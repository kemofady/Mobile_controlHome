
smart_home_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000452c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000017e  00800060  0000452c  000045c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000011  008001de  008001de  0000473e  2**0
                  ALLOC
  3 .stab         00003f90  00000000  00000000  00004740  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000014f4  00000000  00000000  000086d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00009bc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00009d04  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00009e74  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000babd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000c9a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000d758  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000d8b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000db45  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000e313  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 6b 09 	jmp	0x12d6	; 0x12d6 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 92 07 	jmp	0xf24	; 0xf24 <__vector_10>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 c7 06 	jmp	0xd8e	; 0xd8e <__vector_13>
      38:	0c 94 02 07 	jmp	0xe04	; 0xe04 <__vector_14>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 dd 12 	jmp	0x25ba	; 0x25ba <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e2       	ldi	r30, 0x2C	; 44
      68:	f5 e4       	ldi	r31, 0x45	; 69
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 3d       	cpi	r26, 0xDE	; 222
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ae ed       	ldi	r26, 0xDE	; 222
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 3e       	cpi	r26, 0xEF	; 239
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 c3 21 	call	0x4386	; 0x4386 <main>
      8a:	0c 94 94 22 	jmp	0x4528	; 0x4528 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 54 22 	jmp	0x44a8	; 0x44a8 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ae e5       	ldi	r26, 0x5E	; 94
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 70 22 	jmp	0x44e0	; 0x44e0 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 60 22 	jmp	0x44c0	; 0x44c0 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 7c 22 	jmp	0x44f8	; 0x44f8 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 60 22 	jmp	0x44c0	; 0x44c0 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 7c 22 	jmp	0x44f8	; 0x44f8 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 54 22 	jmp	0x44a8	; 0x44a8 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8e e5       	ldi	r24, 0x5E	; 94
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 70 22 	jmp	0x44e0	; 0x44e0 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 60 22 	jmp	0x44c0	; 0x44c0 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 7c 22 	jmp	0x44f8	; 0x44f8 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 60 22 	jmp	0x44c0	; 0x44c0 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 7c 22 	jmp	0x44f8	; 0x44f8 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 60 22 	jmp	0x44c0	; 0x44c0 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 7c 22 	jmp	0x44f8	; 0x44f8 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 64 22 	jmp	0x44c8	; 0x44c8 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 80 22 	jmp	0x4500	; 0x4500 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <UART_init>:

void (* UART_RecIntCallBack)(void) = '\0' ;
u8 *UART_DataPtr ;

void UART_init()
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	/*stop 1 bit
	CLR_BIT(UCSRC,3);
 	 */
	/*We don't use set and clear bit because in MC has one address for two registers
	 *so bit7 should be always set  */
	UCSRC=0b10000110;
     b4e:	e0 e4       	ldi	r30, 0x40	; 64
     b50:	f0 e0       	ldi	r31, 0x00	; 0
     b52:	86 e8       	ldi	r24, 0x86	; 134
     b54:	80 83       	st	Z, r24
	/*enable */
	SET_BIT(UCSRB,4);
     b56:	aa e2       	ldi	r26, 0x2A	; 42
     b58:	b0 e0       	ldi	r27, 0x00	; 0
     b5a:	ea e2       	ldi	r30, 0x2A	; 42
     b5c:	f0 e0       	ldi	r31, 0x00	; 0
     b5e:	80 81       	ld	r24, Z
     b60:	80 61       	ori	r24, 0x10	; 16
     b62:	8c 93       	st	X, r24
	SET_BIT(UCSRB,3);
     b64:	aa e2       	ldi	r26, 0x2A	; 42
     b66:	b0 e0       	ldi	r27, 0x00	; 0
     b68:	ea e2       	ldi	r30, 0x2A	; 42
     b6a:	f0 e0       	ldi	r31, 0x00	; 0
     b6c:	80 81       	ld	r24, Z
     b6e:	88 60       	ori	r24, 0x08	; 8
     b70:	8c 93       	st	X, r24
	/*SPEED 9600*/
	UBRRL=51;
     b72:	e9 e2       	ldi	r30, 0x29	; 41
     b74:	f0 e0       	ldi	r31, 0x00	; 0
     b76:	83 e3       	ldi	r24, 0x33	; 51
     b78:	80 83       	st	Z, r24

}
     b7a:	cf 91       	pop	r28
     b7c:	df 91       	pop	r29
     b7e:	08 95       	ret

00000b80 <UART_voidSend>:

void UART_voidSend(u8 cpy_u8data)
{
     b80:	df 93       	push	r29
     b82:	cf 93       	push	r28
     b84:	0f 92       	push	r0
     b86:	cd b7       	in	r28, 0x3d	; 61
     b88:	de b7       	in	r29, 0x3e	; 62
     b8a:	89 83       	std	Y+1, r24	; 0x01
	/* Data Register Empty flag*/
	while(GET_BIT(UCSRA,5)==0);
     b8c:	eb e2       	ldi	r30, 0x2B	; 43
     b8e:	f0 e0       	ldi	r31, 0x00	; 0
     b90:	80 81       	ld	r24, Z
     b92:	82 95       	swap	r24
     b94:	86 95       	lsr	r24
     b96:	87 70       	andi	r24, 0x07	; 7
     b98:	88 2f       	mov	r24, r24
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	81 70       	andi	r24, 0x01	; 1
     b9e:	90 70       	andi	r25, 0x00	; 0
     ba0:	00 97       	sbiw	r24, 0x00	; 0
     ba2:	a1 f3       	breq	.-24     	; 0xb8c <UART_voidSend+0xc>

		UDR=cpy_u8data;
     ba4:	ec e2       	ldi	r30, 0x2C	; 44
     ba6:	f0 e0       	ldi	r31, 0x00	; 0
     ba8:	89 81       	ldd	r24, Y+1	; 0x01
     baa:	80 83       	st	Z, r24

}
     bac:	0f 90       	pop	r0
     bae:	cf 91       	pop	r28
     bb0:	df 91       	pop	r29
     bb2:	08 95       	ret

00000bb4 <UART_u8Recive>:

u8 UART_u8Recive(){
     bb4:	df 93       	push	r29
     bb6:	cf 93       	push	r28
     bb8:	cd b7       	in	r28, 0x3d	; 61
     bba:	de b7       	in	r29, 0x3e	; 62
	/*Receive Complete flag*/
	while(GET_BIT(UCSRA,7)==0);
     bbc:	eb e2       	ldi	r30, 0x2B	; 43
     bbe:	f0 e0       	ldi	r31, 0x00	; 0
     bc0:	80 81       	ld	r24, Z
     bc2:	88 23       	and	r24, r24
     bc4:	dc f7       	brge	.-10     	; 0xbbc <UART_u8Recive+0x8>

		return UDR;
     bc6:	ec e2       	ldi	r30, 0x2C	; 44
     bc8:	f0 e0       	ldi	r31, 0x00	; 0
     bca:	80 81       	ld	r24, Z


}
     bcc:	cf 91       	pop	r28
     bce:	df 91       	pop	r29
     bd0:	08 95       	ret

00000bd2 <UART_voidSendString>:
void UART_voidSendString(u8 *str)
{
     bd2:	df 93       	push	r29
     bd4:	cf 93       	push	r28
     bd6:	00 d0       	rcall	.+0      	; 0xbd8 <UART_voidSendString+0x6>
     bd8:	0f 92       	push	r0
     bda:	cd b7       	in	r28, 0x3d	; 61
     bdc:	de b7       	in	r29, 0x3e	; 62
     bde:	9b 83       	std	Y+3, r25	; 0x03
     be0:	8a 83       	std	Y+2, r24	; 0x02
	u8 index;
	for (index=0 ; str[index]!='\0';index++) // '\0' It expresses to NULL the end of string
     be2:	19 82       	std	Y+1, r1	; 0x01
     be4:	0e c0       	rjmp	.+28     	; 0xc02 <UART_voidSendString+0x30>
	{
		UART_voidSend(str[index]);
     be6:	89 81       	ldd	r24, Y+1	; 0x01
     be8:	28 2f       	mov	r18, r24
     bea:	30 e0       	ldi	r19, 0x00	; 0
     bec:	8a 81       	ldd	r24, Y+2	; 0x02
     bee:	9b 81       	ldd	r25, Y+3	; 0x03
     bf0:	fc 01       	movw	r30, r24
     bf2:	e2 0f       	add	r30, r18
     bf4:	f3 1f       	adc	r31, r19
     bf6:	80 81       	ld	r24, Z
     bf8:	0e 94 c0 05 	call	0xb80	; 0xb80 <UART_voidSend>

}
void UART_voidSendString(u8 *str)
{
	u8 index;
	for (index=0 ; str[index]!='\0';index++) // '\0' It expresses to NULL the end of string
     bfc:	89 81       	ldd	r24, Y+1	; 0x01
     bfe:	8f 5f       	subi	r24, 0xFF	; 255
     c00:	89 83       	std	Y+1, r24	; 0x01
     c02:	89 81       	ldd	r24, Y+1	; 0x01
     c04:	28 2f       	mov	r18, r24
     c06:	30 e0       	ldi	r19, 0x00	; 0
     c08:	8a 81       	ldd	r24, Y+2	; 0x02
     c0a:	9b 81       	ldd	r25, Y+3	; 0x03
     c0c:	fc 01       	movw	r30, r24
     c0e:	e2 0f       	add	r30, r18
     c10:	f3 1f       	adc	r31, r19
     c12:	80 81       	ld	r24, Z
     c14:	88 23       	and	r24, r24
     c16:	39 f7       	brne	.-50     	; 0xbe6 <UART_voidSendString+0x14>
	{
		UART_voidSend(str[index]);
	}

}
     c18:	0f 90       	pop	r0
     c1a:	0f 90       	pop	r0
     c1c:	0f 90       	pop	r0
     c1e:	cf 91       	pop	r28
     c20:	df 91       	pop	r29
     c22:	08 95       	ret

00000c24 <UART_ReceiveString>:



void UART_ReceiveString(u8 *str)
{
     c24:	0f 93       	push	r16
     c26:	1f 93       	push	r17
     c28:	df 93       	push	r29
     c2a:	cf 93       	push	r28
     c2c:	00 d0       	rcall	.+0      	; 0xc2e <UART_ReceiveString+0xa>
     c2e:	0f 92       	push	r0
     c30:	cd b7       	in	r28, 0x3d	; 61
     c32:	de b7       	in	r29, 0x3e	; 62
     c34:	9b 83       	std	Y+3, r25	; 0x03
     c36:	8a 83       	std	Y+2, r24	; 0x02
	u8 i = 0;
     c38:	19 82       	std	Y+1, r1	; 0x01
	str[i] = UART_u8Recive();
     c3a:	89 81       	ldd	r24, Y+1	; 0x01
     c3c:	28 2f       	mov	r18, r24
     c3e:	30 e0       	ldi	r19, 0x00	; 0
     c40:	8a 81       	ldd	r24, Y+2	; 0x02
     c42:	9b 81       	ldd	r25, Y+3	; 0x03
     c44:	8c 01       	movw	r16, r24
     c46:	02 0f       	add	r16, r18
     c48:	13 1f       	adc	r17, r19
     c4a:	0e 94 da 05 	call	0xbb4	; 0xbb4 <UART_u8Recive>
     c4e:	f8 01       	movw	r30, r16
     c50:	80 83       	st	Z, r24
     c52:	0f c0       	rjmp	.+30     	; 0xc72 <UART_ReceiveString+0x4e>
	/*will continue to receive until you send . */
	while(str[i] != '#')
	{
		i++;
     c54:	89 81       	ldd	r24, Y+1	; 0x01
     c56:	8f 5f       	subi	r24, 0xFF	; 255
     c58:	89 83       	std	Y+1, r24	; 0x01
		str[i] = UART_u8Recive();
     c5a:	89 81       	ldd	r24, Y+1	; 0x01
     c5c:	28 2f       	mov	r18, r24
     c5e:	30 e0       	ldi	r19, 0x00	; 0
     c60:	8a 81       	ldd	r24, Y+2	; 0x02
     c62:	9b 81       	ldd	r25, Y+3	; 0x03
     c64:	8c 01       	movw	r16, r24
     c66:	02 0f       	add	r16, r18
     c68:	13 1f       	adc	r17, r19
     c6a:	0e 94 da 05 	call	0xbb4	; 0xbb4 <UART_u8Recive>
     c6e:	f8 01       	movw	r30, r16
     c70:	80 83       	st	Z, r24
void UART_ReceiveString(u8 *str)
{
	u8 i = 0;
	str[i] = UART_u8Recive();
	/*will continue to receive until you send . */
	while(str[i] != '#')
     c72:	89 81       	ldd	r24, Y+1	; 0x01
     c74:	28 2f       	mov	r18, r24
     c76:	30 e0       	ldi	r19, 0x00	; 0
     c78:	8a 81       	ldd	r24, Y+2	; 0x02
     c7a:	9b 81       	ldd	r25, Y+3	; 0x03
     c7c:	fc 01       	movw	r30, r24
     c7e:	e2 0f       	add	r30, r18
     c80:	f3 1f       	adc	r31, r19
     c82:	80 81       	ld	r24, Z
     c84:	83 32       	cpi	r24, 0x23	; 35
     c86:	31 f7       	brne	.-52     	; 0xc54 <UART_ReceiveString+0x30>
	{
		i++;
		str[i] = UART_u8Recive();
	}
	str[i] = '\0';
     c88:	89 81       	ldd	r24, Y+1	; 0x01
     c8a:	28 2f       	mov	r18, r24
     c8c:	30 e0       	ldi	r19, 0x00	; 0
     c8e:	8a 81       	ldd	r24, Y+2	; 0x02
     c90:	9b 81       	ldd	r25, Y+3	; 0x03
     c92:	fc 01       	movw	r30, r24
     c94:	e2 0f       	add	r30, r18
     c96:	f3 1f       	adc	r31, r19
     c98:	10 82       	st	Z, r1
}
     c9a:	0f 90       	pop	r0
     c9c:	0f 90       	pop	r0
     c9e:	0f 90       	pop	r0
     ca0:	cf 91       	pop	r28
     ca2:	df 91       	pop	r29
     ca4:	1f 91       	pop	r17
     ca6:	0f 91       	pop	r16
     ca8:	08 95       	ret

00000caa <UART_voidSendStringAsyhc>:

u8 i = 0; // to be seen in interrupt and function
u8 *global_u8userSend = 0; // to be seen in interrupt and function

void UART_voidSendStringAsyhc(u8 *str) {
     caa:	df 93       	push	r29
     cac:	cf 93       	push	r28
     cae:	00 d0       	rcall	.+0      	; 0xcb0 <UART_voidSendStringAsyhc+0x6>
     cb0:	cd b7       	in	r28, 0x3d	; 61
     cb2:	de b7       	in	r29, 0x3e	; 62
     cb4:	9a 83       	std	Y+2, r25	; 0x02
     cb6:	89 83       	std	Y+1, r24	; 0x01
  i = 0;
     cb8:	10 92 e0 01 	sts	0x01E0, r1
  global_u8userSend = str;
     cbc:	89 81       	ldd	r24, Y+1	; 0x01
     cbe:	9a 81       	ldd	r25, Y+2	; 0x02
     cc0:	90 93 e2 01 	sts	0x01E2, r25
     cc4:	80 93 e1 01 	sts	0x01E1, r24

  /*Enable Tx INT*/
  GIE_voidEnable();
     cc8:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <GIE_voidEnable>

  /*Enable Data Register Empty INTI*/
  SET_BIT(UCSRB, 5);
     ccc:	aa e2       	ldi	r26, 0x2A	; 42
     cce:	b0 e0       	ldi	r27, 0x00	; 0
     cd0:	ea e2       	ldi	r30, 0x2A	; 42
     cd2:	f0 e0       	ldi	r31, 0x00	; 0
     cd4:	80 81       	ld	r24, Z
     cd6:	80 62       	ori	r24, 0x20	; 32
     cd8:	8c 93       	st	X, r24

  if (global_u8userSend[i] != '\0') {
     cda:	20 91 e1 01 	lds	r18, 0x01E1
     cde:	30 91 e2 01 	lds	r19, 0x01E2
     ce2:	80 91 e0 01 	lds	r24, 0x01E0
     ce6:	88 2f       	mov	r24, r24
     ce8:	90 e0       	ldi	r25, 0x00	; 0
     cea:	f9 01       	movw	r30, r18
     cec:	e8 0f       	add	r30, r24
     cee:	f9 1f       	adc	r31, r25
     cf0:	80 81       	ld	r24, Z
     cf2:	88 23       	and	r24, r24
     cf4:	a1 f0       	breq	.+40     	; 0xd1e <UART_voidSendStringAsyhc+0x74>
    UDR = global_u8userSend[i];
     cf6:	ac e2       	ldi	r26, 0x2C	; 44
     cf8:	b0 e0       	ldi	r27, 0x00	; 0
     cfa:	20 91 e1 01 	lds	r18, 0x01E1
     cfe:	30 91 e2 01 	lds	r19, 0x01E2
     d02:	80 91 e0 01 	lds	r24, 0x01E0
     d06:	88 2f       	mov	r24, r24
     d08:	90 e0       	ldi	r25, 0x00	; 0
     d0a:	f9 01       	movw	r30, r18
     d0c:	e8 0f       	add	r30, r24
     d0e:	f9 1f       	adc	r31, r25
     d10:	80 81       	ld	r24, Z
     d12:	8c 93       	st	X, r24
    i++;
     d14:	80 91 e0 01 	lds	r24, 0x01E0
     d18:	8f 5f       	subi	r24, 0xFF	; 255
     d1a:	80 93 e0 01 	sts	0x01E0, r24
  }
}
     d1e:	0f 90       	pop	r0
     d20:	0f 90       	pop	r0
     d22:	cf 91       	pop	r28
     d24:	df 91       	pop	r29
     d26:	08 95       	ret

00000d28 <UART_u8RecAsynch>:

u8 UART_u8RecAsynch (void (*func)(void), u8 *Cpy_DataPtr)
{
     d28:	df 93       	push	r29
     d2a:	cf 93       	push	r28
     d2c:	00 d0       	rcall	.+0      	; 0xd2e <UART_u8RecAsynch+0x6>
     d2e:	00 d0       	rcall	.+0      	; 0xd30 <UART_u8RecAsynch+0x8>
     d30:	0f 92       	push	r0
     d32:	cd b7       	in	r28, 0x3d	; 61
     d34:	de b7       	in	r29, 0x3e	; 62
     d36:	9b 83       	std	Y+3, r25	; 0x03
     d38:	8a 83       	std	Y+2, r24	; 0x02
     d3a:	7d 83       	std	Y+5, r23	; 0x05
     d3c:	6c 83       	std	Y+4, r22	; 0x04
	u8 local_error = 1 ;
     d3e:	81 e0       	ldi	r24, 0x01	; 1
     d40:	89 83       	std	Y+1, r24	; 0x01
	if ((func != '\0') && (Cpy_DataPtr != '\0'))
     d42:	8a 81       	ldd	r24, Y+2	; 0x02
     d44:	9b 81       	ldd	r25, Y+3	; 0x03
     d46:	00 97       	sbiw	r24, 0x00	; 0
     d48:	89 f0       	breq	.+34     	; 0xd6c <UART_u8RecAsynch+0x44>
     d4a:	8c 81       	ldd	r24, Y+4	; 0x04
     d4c:	9d 81       	ldd	r25, Y+5	; 0x05
     d4e:	00 97       	sbiw	r24, 0x00	; 0
     d50:	69 f0       	breq	.+26     	; 0xd6c <UART_u8RecAsynch+0x44>
	{
		UART_RecIntCallBack = func ;
     d52:	8a 81       	ldd	r24, Y+2	; 0x02
     d54:	9b 81       	ldd	r25, Y+3	; 0x03
     d56:	90 93 df 01 	sts	0x01DF, r25
     d5a:	80 93 de 01 	sts	0x01DE, r24
		UART_DataPtr = Cpy_DataPtr;
     d5e:	8c 81       	ldd	r24, Y+4	; 0x04
     d60:	9d 81       	ldd	r25, Y+5	; 0x05
     d62:	90 93 e4 01 	sts	0x01E4, r25
     d66:	80 93 e3 01 	sts	0x01E3, r24
     d6a:	01 c0       	rjmp	.+2      	; 0xd6e <UART_u8RecAsynch+0x46>
	}
	else
	{
		local_error = 0;
     d6c:	19 82       	std	Y+1, r1	; 0x01
	}

	/* Enable interrupt */
	SET_BIT(UCSRB ,7);
     d6e:	aa e2       	ldi	r26, 0x2A	; 42
     d70:	b0 e0       	ldi	r27, 0x00	; 0
     d72:	ea e2       	ldi	r30, 0x2A	; 42
     d74:	f0 e0       	ldi	r31, 0x00	; 0
     d76:	80 81       	ld	r24, Z
     d78:	80 68       	ori	r24, 0x80	; 128
     d7a:	8c 93       	st	X, r24
	return local_error ;
     d7c:	89 81       	ldd	r24, Y+1	; 0x01
}
     d7e:	0f 90       	pop	r0
     d80:	0f 90       	pop	r0
     d82:	0f 90       	pop	r0
     d84:	0f 90       	pop	r0
     d86:	0f 90       	pop	r0
     d88:	cf 91       	pop	r28
     d8a:	df 91       	pop	r29
     d8c:	08 95       	ret

00000d8e <__vector_13>:

void __vector_13 (void) __attribute__((signal)) ;
void __vector_13 (void)
{
     d8e:	1f 92       	push	r1
     d90:	0f 92       	push	r0
     d92:	0f b6       	in	r0, 0x3f	; 63
     d94:	0f 92       	push	r0
     d96:	11 24       	eor	r1, r1
     d98:	2f 93       	push	r18
     d9a:	3f 93       	push	r19
     d9c:	4f 93       	push	r20
     d9e:	5f 93       	push	r21
     da0:	6f 93       	push	r22
     da2:	7f 93       	push	r23
     da4:	8f 93       	push	r24
     da6:	9f 93       	push	r25
     da8:	af 93       	push	r26
     daa:	bf 93       	push	r27
     dac:	ef 93       	push	r30
     dae:	ff 93       	push	r31
     db0:	df 93       	push	r29
     db2:	cf 93       	push	r28
     db4:	cd b7       	in	r28, 0x3d	; 61
     db6:	de b7       	in	r29, 0x3e	; 62
	if (UART_RecIntCallBack != '\0')
     db8:	80 91 de 01 	lds	r24, 0x01DE
     dbc:	90 91 df 01 	lds	r25, 0x01DF
     dc0:	00 97       	sbiw	r24, 0x00	; 0
     dc2:	69 f0       	breq	.+26     	; 0xdde <__vector_13+0x50>
	{
		*UART_DataPtr = UDR ;
     dc4:	a0 91 e3 01 	lds	r26, 0x01E3
     dc8:	b0 91 e4 01 	lds	r27, 0x01E4
     dcc:	ec e2       	ldi	r30, 0x2C	; 44
     dce:	f0 e0       	ldi	r31, 0x00	; 0
     dd0:	80 81       	ld	r24, Z
     dd2:	8c 93       	st	X, r24
		UART_RecIntCallBack();
     dd4:	e0 91 de 01 	lds	r30, 0x01DE
     dd8:	f0 91 df 01 	lds	r31, 0x01DF
     ddc:	09 95       	icall
	}
}
     dde:	cf 91       	pop	r28
     de0:	df 91       	pop	r29
     de2:	ff 91       	pop	r31
     de4:	ef 91       	pop	r30
     de6:	bf 91       	pop	r27
     de8:	af 91       	pop	r26
     dea:	9f 91       	pop	r25
     dec:	8f 91       	pop	r24
     dee:	7f 91       	pop	r23
     df0:	6f 91       	pop	r22
     df2:	5f 91       	pop	r21
     df4:	4f 91       	pop	r20
     df6:	3f 91       	pop	r19
     df8:	2f 91       	pop	r18
     dfa:	0f 90       	pop	r0
     dfc:	0f be       	out	0x3f, r0	; 63
     dfe:	0f 90       	pop	r0
     e00:	1f 90       	pop	r1
     e02:	18 95       	reti

00000e04 <__vector_14>:


/*Tx completed*/
void __vector_14 (void) __attribute__((signal));
void __vector_14 (void){
     e04:	1f 92       	push	r1
     e06:	0f 92       	push	r0
     e08:	0f b6       	in	r0, 0x3f	; 63
     e0a:	0f 92       	push	r0
     e0c:	11 24       	eor	r1, r1
     e0e:	2f 93       	push	r18
     e10:	3f 93       	push	r19
     e12:	8f 93       	push	r24
     e14:	9f 93       	push	r25
     e16:	af 93       	push	r26
     e18:	bf 93       	push	r27
     e1a:	ef 93       	push	r30
     e1c:	ff 93       	push	r31
     e1e:	df 93       	push	r29
     e20:	cf 93       	push	r28
     e22:	cd b7       	in	r28, 0x3d	; 61
     e24:	de b7       	in	r29, 0x3e	; 62
  if (global_u8userSend[i] != '\0') {
     e26:	20 91 e1 01 	lds	r18, 0x01E1
     e2a:	30 91 e2 01 	lds	r19, 0x01E2
     e2e:	80 91 e0 01 	lds	r24, 0x01E0
     e32:	88 2f       	mov	r24, r24
     e34:	90 e0       	ldi	r25, 0x00	; 0
     e36:	f9 01       	movw	r30, r18
     e38:	e8 0f       	add	r30, r24
     e3a:	f9 1f       	adc	r31, r25
     e3c:	80 81       	ld	r24, Z
     e3e:	88 23       	and	r24, r24
     e40:	a1 f0       	breq	.+40     	; 0xe6a <__vector_14+0x66>
    UDR = global_u8userSend[i];
     e42:	ac e2       	ldi	r26, 0x2C	; 44
     e44:	b0 e0       	ldi	r27, 0x00	; 0
     e46:	20 91 e1 01 	lds	r18, 0x01E1
     e4a:	30 91 e2 01 	lds	r19, 0x01E2
     e4e:	80 91 e0 01 	lds	r24, 0x01E0
     e52:	88 2f       	mov	r24, r24
     e54:	90 e0       	ldi	r25, 0x00	; 0
     e56:	f9 01       	movw	r30, r18
     e58:	e8 0f       	add	r30, r24
     e5a:	f9 1f       	adc	r31, r25
     e5c:	80 81       	ld	r24, Z
     e5e:	8c 93       	st	X, r24
    i++;
     e60:	80 91 e0 01 	lds	r24, 0x01E0
     e64:	8f 5f       	subi	r24, 0xFF	; 255
     e66:	80 93 e0 01 	sts	0x01E0, r24
  }
}
     e6a:	cf 91       	pop	r28
     e6c:	df 91       	pop	r29
     e6e:	ff 91       	pop	r31
     e70:	ef 91       	pop	r30
     e72:	bf 91       	pop	r27
     e74:	af 91       	pop	r26
     e76:	9f 91       	pop	r25
     e78:	8f 91       	pop	r24
     e7a:	3f 91       	pop	r19
     e7c:	2f 91       	pop	r18
     e7e:	0f 90       	pop	r0
     e80:	0f be       	out	0x3f, r0	; 63
     e82:	0f 90       	pop	r0
     e84:	1f 90       	pop	r1
     e86:	18 95       	reti

00000e88 <Timer_voidInitTimer0>:
#include "Timer_Reg.h"

void (* callback_OCR) (void);
void (* callback_ICU)(void);
void Timer_voidInitTimer0(void)
{
     e88:	df 93       	push	r29
     e8a:	cf 93       	push	r28
     e8c:	cd b7       	in	r28, 0x3d	; 61
     e8e:	de b7       	in	r29, 0x3e	; 62
	/* Choose CTC mode */

	SET_BIT(TCCR0 , 6);
     e90:	a3 e5       	ldi	r26, 0x53	; 83
     e92:	b0 e0       	ldi	r27, 0x00	; 0
     e94:	e3 e5       	ldi	r30, 0x53	; 83
     e96:	f0 e0       	ldi	r31, 0x00	; 0
     e98:	80 81       	ld	r24, Z
     e9a:	80 64       	ori	r24, 0x40	; 64
     e9c:	8c 93       	st	X, r24
	CLR_BIT(TCCR0 , 3);
     e9e:	a3 e5       	ldi	r26, 0x53	; 83
     ea0:	b0 e0       	ldi	r27, 0x00	; 0
     ea2:	e3 e5       	ldi	r30, 0x53	; 83
     ea4:	f0 e0       	ldi	r31, 0x00	; 0
     ea6:	80 81       	ld	r24, Z
     ea8:	87 7f       	andi	r24, 0xF7	; 247
     eaa:	8c 93       	st	X, r24

	OCR0 = 250;
     eac:	ec e5       	ldi	r30, 0x5C	; 92
     eae:	f0 e0       	ldi	r31, 0x00	; 0
     eb0:	8a ef       	ldi	r24, 0xFA	; 250
     eb2:	80 83       	st	Z, r24

	/* Enable interrupt ocr */

	SET_BIT(TIMSK , 1); //SIE
     eb4:	a9 e5       	ldi	r26, 0x59	; 89
     eb6:	b0 e0       	ldi	r27, 0x00	; 0
     eb8:	e9 e5       	ldi	r30, 0x59	; 89
     eba:	f0 e0       	ldi	r31, 0x00	; 0
     ebc:	80 81       	ld	r24, Z
     ebe:	82 60       	ori	r24, 0x02	; 2
     ec0:	8c 93       	st	X, r24
	SET_BIT(SREG , 7); //GIE
     ec2:	af e5       	ldi	r26, 0x5F	; 95
     ec4:	b0 e0       	ldi	r27, 0x00	; 0
     ec6:	ef e5       	ldi	r30, 0x5F	; 95
     ec8:	f0 e0       	ldi	r31, 0x00	; 0
     eca:	80 81       	ld	r24, Z
     ecc:	80 68       	ori	r24, 0x80	; 128
     ece:	8c 93       	st	X, r24

	/* Choose pre scaller */
	SET_BIT(TCCR0 , 0);
     ed0:	a3 e5       	ldi	r26, 0x53	; 83
     ed2:	b0 e0       	ldi	r27, 0x00	; 0
     ed4:	e3 e5       	ldi	r30, 0x53	; 83
     ed6:	f0 e0       	ldi	r31, 0x00	; 0
     ed8:	80 81       	ld	r24, Z
     eda:	81 60       	ori	r24, 0x01	; 1
     edc:	8c 93       	st	X, r24
	SET_BIT(TCCR0 , 1);
     ede:	a3 e5       	ldi	r26, 0x53	; 83
     ee0:	b0 e0       	ldi	r27, 0x00	; 0
     ee2:	e3 e5       	ldi	r30, 0x53	; 83
     ee4:	f0 e0       	ldi	r31, 0x00	; 0
     ee6:	80 81       	ld	r24, Z
     ee8:	82 60       	ori	r24, 0x02	; 2
     eea:	8c 93       	st	X, r24
	CLR_BIT(TCCR0 , 2);
     eec:	a3 e5       	ldi	r26, 0x53	; 83
     eee:	b0 e0       	ldi	r27, 0x00	; 0
     ef0:	e3 e5       	ldi	r30, 0x53	; 83
     ef2:	f0 e0       	ldi	r31, 0x00	; 0
     ef4:	80 81       	ld	r24, Z
     ef6:	8b 7f       	andi	r24, 0xFB	; 251
     ef8:	8c 93       	st	X, r24

}
     efa:	cf 91       	pop	r28
     efc:	df 91       	pop	r29
     efe:	08 95       	ret

00000f00 <Timer_voidSetCtc0Isr>:

void Timer_voidSetCtc0Isr(void (*func)(void))
{
     f00:	df 93       	push	r29
     f02:	cf 93       	push	r28
     f04:	00 d0       	rcall	.+0      	; 0xf06 <Timer_voidSetCtc0Isr+0x6>
     f06:	cd b7       	in	r28, 0x3d	; 61
     f08:	de b7       	in	r29, 0x3e	; 62
     f0a:	9a 83       	std	Y+2, r25	; 0x02
     f0c:	89 83       	std	Y+1, r24	; 0x01
	callback_OCR = func;
     f0e:	89 81       	ldd	r24, Y+1	; 0x01
     f10:	9a 81       	ldd	r25, Y+2	; 0x02
     f12:	90 93 e6 01 	sts	0x01E6, r25
     f16:	80 93 e5 01 	sts	0x01E5, r24
}
     f1a:	0f 90       	pop	r0
     f1c:	0f 90       	pop	r0
     f1e:	cf 91       	pop	r28
     f20:	df 91       	pop	r29
     f22:	08 95       	ret

00000f24 <__vector_10>:

/* ISR => CTC0 */
void __vector_10 (void) __attribute__((signal));
void __vector_10 (void)
{
     f24:	1f 92       	push	r1
     f26:	0f 92       	push	r0
     f28:	0f b6       	in	r0, 0x3f	; 63
     f2a:	0f 92       	push	r0
     f2c:	11 24       	eor	r1, r1
     f2e:	2f 93       	push	r18
     f30:	3f 93       	push	r19
     f32:	4f 93       	push	r20
     f34:	5f 93       	push	r21
     f36:	6f 93       	push	r22
     f38:	7f 93       	push	r23
     f3a:	8f 93       	push	r24
     f3c:	9f 93       	push	r25
     f3e:	af 93       	push	r26
     f40:	bf 93       	push	r27
     f42:	ef 93       	push	r30
     f44:	ff 93       	push	r31
     f46:	df 93       	push	r29
     f48:	cf 93       	push	r28
     f4a:	cd b7       	in	r28, 0x3d	; 61
     f4c:	de b7       	in	r29, 0x3e	; 62
	if (callback_OCR != '\0'){
     f4e:	80 91 e5 01 	lds	r24, 0x01E5
     f52:	90 91 e6 01 	lds	r25, 0x01E6
     f56:	00 97       	sbiw	r24, 0x00	; 0
     f58:	29 f0       	breq	.+10     	; 0xf64 <__vector_10+0x40>
		callback_OCR();
     f5a:	e0 91 e5 01 	lds	r30, 0x01E5
     f5e:	f0 91 e6 01 	lds	r31, 0x01E6
     f62:	09 95       	icall
	}

}
     f64:	cf 91       	pop	r28
     f66:	df 91       	pop	r29
     f68:	ff 91       	pop	r31
     f6a:	ef 91       	pop	r30
     f6c:	bf 91       	pop	r27
     f6e:	af 91       	pop	r26
     f70:	9f 91       	pop	r25
     f72:	8f 91       	pop	r24
     f74:	7f 91       	pop	r23
     f76:	6f 91       	pop	r22
     f78:	5f 91       	pop	r21
     f7a:	4f 91       	pop	r20
     f7c:	3f 91       	pop	r19
     f7e:	2f 91       	pop	r18
     f80:	0f 90       	pop	r0
     f82:	0f be       	out	0x3f, r0	; 63
     f84:	0f 90       	pop	r0
     f86:	1f 90       	pop	r1
     f88:	18 95       	reti

00000f8a <PWM_voidInit0>:

void PWM_voidInit0(void)
{
     f8a:	df 93       	push	r29
     f8c:	cf 93       	push	r28
     f8e:	cd b7       	in	r28, 0x3d	; 61
     f90:	de b7       	in	r29, 0x3e	; 62
	/* Activate timer mode fast PWM */
	SET_BIT(TCCR0 , 6);
     f92:	a3 e5       	ldi	r26, 0x53	; 83
     f94:	b0 e0       	ldi	r27, 0x00	; 0
     f96:	e3 e5       	ldi	r30, 0x53	; 83
     f98:	f0 e0       	ldi	r31, 0x00	; 0
     f9a:	80 81       	ld	r24, Z
     f9c:	80 64       	ori	r24, 0x40	; 64
     f9e:	8c 93       	st	X, r24
	CLR_BIT(TCCR0 , 3);
     fa0:	a3 e5       	ldi	r26, 0x53	; 83
     fa2:	b0 e0       	ldi	r27, 0x00	; 0
     fa4:	e3 e5       	ldi	r30, 0x53	; 83
     fa6:	f0 e0       	ldi	r31, 0x00	; 0
     fa8:	80 81       	ld	r24, Z
     faa:	87 7f       	andi	r24, 0xF7	; 247
     fac:	8c 93       	st	X, r24

	/* Non inverting mode */
	SET_BIT(TCCR0, 5);
     fae:	a3 e5       	ldi	r26, 0x53	; 83
     fb0:	b0 e0       	ldi	r27, 0x00	; 0
     fb2:	e3 e5       	ldi	r30, 0x53	; 83
     fb4:	f0 e0       	ldi	r31, 0x00	; 0
     fb6:	80 81       	ld	r24, Z
     fb8:	80 62       	ori	r24, 0x20	; 32
     fba:	8c 93       	st	X, r24
	CLR_BIT(TCCR0, 4);
     fbc:	a3 e5       	ldi	r26, 0x53	; 83
     fbe:	b0 e0       	ldi	r27, 0x00	; 0
     fc0:	e3 e5       	ldi	r30, 0x53	; 83
     fc2:	f0 e0       	ldi	r31, 0x00	; 0
     fc4:	80 81       	ld	r24, Z
     fc6:	8f 7e       	andi	r24, 0xEF	; 239
     fc8:	8c 93       	st	X, r24

	/* Select ps to be 8 */
	CLR_BIT(TCCR0,0);
     fca:	a3 e5       	ldi	r26, 0x53	; 83
     fcc:	b0 e0       	ldi	r27, 0x00	; 0
     fce:	e3 e5       	ldi	r30, 0x53	; 83
     fd0:	f0 e0       	ldi	r31, 0x00	; 0
     fd2:	80 81       	ld	r24, Z
     fd4:	8e 7f       	andi	r24, 0xFE	; 254
     fd6:	8c 93       	st	X, r24
	SET_BIT(TCCR0,1);
     fd8:	a3 e5       	ldi	r26, 0x53	; 83
     fda:	b0 e0       	ldi	r27, 0x00	; 0
     fdc:	e3 e5       	ldi	r30, 0x53	; 83
     fde:	f0 e0       	ldi	r31, 0x00	; 0
     fe0:	80 81       	ld	r24, Z
     fe2:	82 60       	ori	r24, 0x02	; 2
     fe4:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,2);
     fe6:	a3 e5       	ldi	r26, 0x53	; 83
     fe8:	b0 e0       	ldi	r27, 0x00	; 0
     fea:	e3 e5       	ldi	r30, 0x53	; 83
     fec:	f0 e0       	ldi	r31, 0x00	; 0
     fee:	80 81       	ld	r24, Z
     ff0:	8b 7f       	andi	r24, 0xFB	; 251
     ff2:	8c 93       	st	X, r24

}
     ff4:	cf 91       	pop	r28
     ff6:	df 91       	pop	r29
     ff8:	08 95       	ret

00000ffa <PWM_voidSetDutyCycle>:

void PWM_voidSetDutyCycle(u8 Cpy_u8Duty)
{
     ffa:	df 93       	push	r29
     ffc:	cf 93       	push	r28
     ffe:	0f 92       	push	r0
    1000:	cd b7       	in	r28, 0x3d	; 61
    1002:	de b7       	in	r29, 0x3e	; 62
    1004:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = Cpy_u8Duty;
    1006:	ec e5       	ldi	r30, 0x5C	; 92
    1008:	f0 e0       	ldi	r31, 0x00	; 0
    100a:	89 81       	ldd	r24, Y+1	; 0x01
    100c:	80 83       	st	Z, r24
}
    100e:	0f 90       	pop	r0
    1010:	cf 91       	pop	r28
    1012:	df 91       	pop	r29
    1014:	08 95       	ret

00001016 <PWM_voidInitTimer1>:
void PWM_voidInitTimer1(void)
{
    1016:	df 93       	push	r29
    1018:	cf 93       	push	r28
    101a:	cd b7       	in	r28, 0x3d	; 61
    101c:	de b7       	in	r29, 0x3e	; 62
	/* select the mode FAST PWM*/
	SET_BIT(TCCR1A,1);
    101e:	af e4       	ldi	r26, 0x4F	; 79
    1020:	b0 e0       	ldi	r27, 0x00	; 0
    1022:	ef e4       	ldi	r30, 0x4F	; 79
    1024:	f0 e0       	ldi	r31, 0x00	; 0
    1026:	80 81       	ld	r24, Z
    1028:	82 60       	ori	r24, 0x02	; 2
    102a:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A,0);
    102c:	af e4       	ldi	r26, 0x4F	; 79
    102e:	b0 e0       	ldi	r27, 0x00	; 0
    1030:	ef e4       	ldi	r30, 0x4F	; 79
    1032:	f0 e0       	ldi	r31, 0x00	; 0
    1034:	80 81       	ld	r24, Z
    1036:	8e 7f       	andi	r24, 0xFE	; 254
    1038:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,3);
    103a:	ae e4       	ldi	r26, 0x4E	; 78
    103c:	b0 e0       	ldi	r27, 0x00	; 0
    103e:	ee e4       	ldi	r30, 0x4E	; 78
    1040:	f0 e0       	ldi	r31, 0x00	; 0
    1042:	80 81       	ld	r24, Z
    1044:	88 60       	ori	r24, 0x08	; 8
    1046:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,4);
    1048:	ae e4       	ldi	r26, 0x4E	; 78
    104a:	b0 e0       	ldi	r27, 0x00	; 0
    104c:	ee e4       	ldi	r30, 0x4E	; 78
    104e:	f0 e0       	ldi	r31, 0x00	; 0
    1050:	80 81       	ld	r24, Z
    1052:	80 61       	ori	r24, 0x10	; 16
    1054:	8c 93       	st	X, r24

	/* Non inverting */
	SET_BIT(TCCR1A, 7);
    1056:	af e4       	ldi	r26, 0x4F	; 79
    1058:	b0 e0       	ldi	r27, 0x00	; 0
    105a:	ef e4       	ldi	r30, 0x4F	; 79
    105c:	f0 e0       	ldi	r31, 0x00	; 0
    105e:	80 81       	ld	r24, Z
    1060:	80 68       	ori	r24, 0x80	; 128
    1062:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A, 6);
    1064:	af e4       	ldi	r26, 0x4F	; 79
    1066:	b0 e0       	ldi	r27, 0x00	; 0
    1068:	ef e4       	ldi	r30, 0x4F	; 79
    106a:	f0 e0       	ldi	r31, 0x00	; 0
    106c:	80 81       	ld	r24, Z
    106e:	8f 7b       	andi	r24, 0xBF	; 191
    1070:	8c 93       	st	X, r24

	/* PS = 8 */
	CLR_BIT(TCCR1B, 0);
    1072:	ae e4       	ldi	r26, 0x4E	; 78
    1074:	b0 e0       	ldi	r27, 0x00	; 0
    1076:	ee e4       	ldi	r30, 0x4E	; 78
    1078:	f0 e0       	ldi	r31, 0x00	; 0
    107a:	80 81       	ld	r24, Z
    107c:	8e 7f       	andi	r24, 0xFE	; 254
    107e:	8c 93       	st	X, r24
	SET_BIT(TCCR1B, 1);
    1080:	ae e4       	ldi	r26, 0x4E	; 78
    1082:	b0 e0       	ldi	r27, 0x00	; 0
    1084:	ee e4       	ldi	r30, 0x4E	; 78
    1086:	f0 e0       	ldi	r31, 0x00	; 0
    1088:	80 81       	ld	r24, Z
    108a:	82 60       	ori	r24, 0x02	; 2
    108c:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B, 2);
    108e:	ae e4       	ldi	r26, 0x4E	; 78
    1090:	b0 e0       	ldi	r27, 0x00	; 0
    1092:	ee e4       	ldi	r30, 0x4E	; 78
    1094:	f0 e0       	ldi	r31, 0x00	; 0
    1096:	80 81       	ld	r24, Z
    1098:	8b 7f       	andi	r24, 0xFB	; 251
    109a:	8c 93       	st	X, r24

	/* determine the max*/
	ICR1 = 20000;
    109c:	e6 e4       	ldi	r30, 0x46	; 70
    109e:	f0 e0       	ldi	r31, 0x00	; 0
    10a0:	80 e2       	ldi	r24, 0x20	; 32
    10a2:	9e e4       	ldi	r25, 0x4E	; 78
    10a4:	91 83       	std	Z+1, r25	; 0x01
    10a6:	80 83       	st	Z, r24


}
    10a8:	cf 91       	pop	r28
    10aa:	df 91       	pop	r29
    10ac:	08 95       	ret

000010ae <PWM_voidSetDutyCycle1>:

void PWM_voidSetDutyCycle1(u16 Cpy_u16Duty)
{
    10ae:	df 93       	push	r29
    10b0:	cf 93       	push	r28
    10b2:	00 d0       	rcall	.+0      	; 0x10b4 <PWM_voidSetDutyCycle1+0x6>
    10b4:	cd b7       	in	r28, 0x3d	; 61
    10b6:	de b7       	in	r29, 0x3e	; 62
    10b8:	9a 83       	std	Y+2, r25	; 0x02
    10ba:	89 83       	std	Y+1, r24	; 0x01
	OCR1A = Cpy_u16Duty;
    10bc:	ea e4       	ldi	r30, 0x4A	; 74
    10be:	f0 e0       	ldi	r31, 0x00	; 0
    10c0:	89 81       	ldd	r24, Y+1	; 0x01
    10c2:	9a 81       	ldd	r25, Y+2	; 0x02
    10c4:	91 83       	std	Z+1, r25	; 0x01
    10c6:	80 83       	st	Z, r24
}
    10c8:	0f 90       	pop	r0
    10ca:	0f 90       	pop	r0
    10cc:	cf 91       	pop	r28
    10ce:	df 91       	pop	r29
    10d0:	08 95       	ret

000010d2 <map>:
s32 map(s32 cpy_inputmini,s32 cpy_inputmax,s32 cpy_outmini,s32 cpy_outmax,s32 cpy_val)
{
    10d2:	af 92       	push	r10
    10d4:	bf 92       	push	r11
    10d6:	cf 92       	push	r12
    10d8:	df 92       	push	r13
    10da:	ef 92       	push	r14
    10dc:	ff 92       	push	r15
    10de:	0f 93       	push	r16
    10e0:	1f 93       	push	r17
    10e2:	df 93       	push	r29
    10e4:	cf 93       	push	r28
    10e6:	cd b7       	in	r28, 0x3d	; 61
    10e8:	de b7       	in	r29, 0x3e	; 62
    10ea:	64 97       	sbiw	r28, 0x14	; 20
    10ec:	0f b6       	in	r0, 0x3f	; 63
    10ee:	f8 94       	cli
    10f0:	de bf       	out	0x3e, r29	; 62
    10f2:	0f be       	out	0x3f, r0	; 63
    10f4:	cd bf       	out	0x3d, r28	; 61
    10f6:	6d 83       	std	Y+5, r22	; 0x05
    10f8:	7e 83       	std	Y+6, r23	; 0x06
    10fa:	8f 83       	std	Y+7, r24	; 0x07
    10fc:	98 87       	std	Y+8, r25	; 0x08
    10fe:	29 87       	std	Y+9, r18	; 0x09
    1100:	3a 87       	std	Y+10, r19	; 0x0a
    1102:	4b 87       	std	Y+11, r20	; 0x0b
    1104:	5c 87       	std	Y+12, r21	; 0x0c
    1106:	ed 86       	std	Y+13, r14	; 0x0d
    1108:	fe 86       	std	Y+14, r15	; 0x0e
    110a:	0f 87       	std	Y+15, r16	; 0x0f
    110c:	18 8b       	std	Y+16, r17	; 0x10
    110e:	a9 8a       	std	Y+17, r10	; 0x11
    1110:	ba 8a       	std	Y+18, r11	; 0x12
    1112:	cb 8a       	std	Y+19, r12	; 0x13
    1114:	dc 8a       	std	Y+20, r13	; 0x14
	s32 local_holder = cpy_val - cpy_inputmax;
    1116:	29 a1       	ldd	r18, Y+33	; 0x21
    1118:	3a a1       	ldd	r19, Y+34	; 0x22
    111a:	4b a1       	ldd	r20, Y+35	; 0x23
    111c:	5c a1       	ldd	r21, Y+36	; 0x24
    111e:	89 85       	ldd	r24, Y+9	; 0x09
    1120:	9a 85       	ldd	r25, Y+10	; 0x0a
    1122:	ab 85       	ldd	r26, Y+11	; 0x0b
    1124:	bc 85       	ldd	r27, Y+12	; 0x0c
    1126:	79 01       	movw	r14, r18
    1128:	8a 01       	movw	r16, r20
    112a:	e8 1a       	sub	r14, r24
    112c:	f9 0a       	sbc	r15, r25
    112e:	0a 0b       	sbc	r16, r26
    1130:	1b 0b       	sbc	r17, r27
    1132:	d8 01       	movw	r26, r16
    1134:	c7 01       	movw	r24, r14
    1136:	89 83       	std	Y+1, r24	; 0x01
    1138:	9a 83       	std	Y+2, r25	; 0x02
    113a:	ab 83       	std	Y+3, r26	; 0x03
    113c:	bc 83       	std	Y+4, r27	; 0x04
	local_holder *=(cpy_outmini-cpy_outmax);
    113e:	2d 85       	ldd	r18, Y+13	; 0x0d
    1140:	3e 85       	ldd	r19, Y+14	; 0x0e
    1142:	4f 85       	ldd	r20, Y+15	; 0x0f
    1144:	58 89       	ldd	r21, Y+16	; 0x10
    1146:	89 89       	ldd	r24, Y+17	; 0x11
    1148:	9a 89       	ldd	r25, Y+18	; 0x12
    114a:	ab 89       	ldd	r26, Y+19	; 0x13
    114c:	bc 89       	ldd	r27, Y+20	; 0x14
    114e:	28 1b       	sub	r18, r24
    1150:	39 0b       	sbc	r19, r25
    1152:	4a 0b       	sbc	r20, r26
    1154:	5b 0b       	sbc	r21, r27
    1156:	89 81       	ldd	r24, Y+1	; 0x01
    1158:	9a 81       	ldd	r25, Y+2	; 0x02
    115a:	ab 81       	ldd	r26, Y+3	; 0x03
    115c:	bc 81       	ldd	r27, Y+4	; 0x04
    115e:	bc 01       	movw	r22, r24
    1160:	cd 01       	movw	r24, r26
    1162:	0e 94 e4 21 	call	0x43c8	; 0x43c8 <__mulsi3>
    1166:	dc 01       	movw	r26, r24
    1168:	cb 01       	movw	r24, r22
    116a:	89 83       	std	Y+1, r24	; 0x01
    116c:	9a 83       	std	Y+2, r25	; 0x02
    116e:	ab 83       	std	Y+3, r26	; 0x03
    1170:	bc 83       	std	Y+4, r27	; 0x04
	local_holder /=(cpy_inputmini-cpy_inputmax);
    1172:	2d 81       	ldd	r18, Y+5	; 0x05
    1174:	3e 81       	ldd	r19, Y+6	; 0x06
    1176:	4f 81       	ldd	r20, Y+7	; 0x07
    1178:	58 85       	ldd	r21, Y+8	; 0x08
    117a:	89 85       	ldd	r24, Y+9	; 0x09
    117c:	9a 85       	ldd	r25, Y+10	; 0x0a
    117e:	ab 85       	ldd	r26, Y+11	; 0x0b
    1180:	bc 85       	ldd	r27, Y+12	; 0x0c
    1182:	28 1b       	sub	r18, r24
    1184:	39 0b       	sbc	r19, r25
    1186:	4a 0b       	sbc	r20, r26
    1188:	5b 0b       	sbc	r21, r27
    118a:	89 81       	ldd	r24, Y+1	; 0x01
    118c:	9a 81       	ldd	r25, Y+2	; 0x02
    118e:	ab 81       	ldd	r26, Y+3	; 0x03
    1190:	bc 81       	ldd	r27, Y+4	; 0x04
    1192:	bc 01       	movw	r22, r24
    1194:	cd 01       	movw	r24, r26
    1196:	0e 94 17 22 	call	0x442e	; 0x442e <__divmodsi4>
    119a:	da 01       	movw	r26, r20
    119c:	c9 01       	movw	r24, r18
    119e:	89 83       	std	Y+1, r24	; 0x01
    11a0:	9a 83       	std	Y+2, r25	; 0x02
    11a2:	ab 83       	std	Y+3, r26	; 0x03
    11a4:	bc 83       	std	Y+4, r27	; 0x04
	local_holder += cpy_outmax;
    11a6:	29 81       	ldd	r18, Y+1	; 0x01
    11a8:	3a 81       	ldd	r19, Y+2	; 0x02
    11aa:	4b 81       	ldd	r20, Y+3	; 0x03
    11ac:	5c 81       	ldd	r21, Y+4	; 0x04
    11ae:	89 89       	ldd	r24, Y+17	; 0x11
    11b0:	9a 89       	ldd	r25, Y+18	; 0x12
    11b2:	ab 89       	ldd	r26, Y+19	; 0x13
    11b4:	bc 89       	ldd	r27, Y+20	; 0x14
    11b6:	82 0f       	add	r24, r18
    11b8:	93 1f       	adc	r25, r19
    11ba:	a4 1f       	adc	r26, r20
    11bc:	b5 1f       	adc	r27, r21
    11be:	89 83       	std	Y+1, r24	; 0x01
    11c0:	9a 83       	std	Y+2, r25	; 0x02
    11c2:	ab 83       	std	Y+3, r26	; 0x03
    11c4:	bc 83       	std	Y+4, r27	; 0x04
	return local_holder;
    11c6:	89 81       	ldd	r24, Y+1	; 0x01
    11c8:	9a 81       	ldd	r25, Y+2	; 0x02
    11ca:	ab 81       	ldd	r26, Y+3	; 0x03
    11cc:	bc 81       	ldd	r27, Y+4	; 0x04
}
    11ce:	bc 01       	movw	r22, r24
    11d0:	cd 01       	movw	r24, r26
    11d2:	64 96       	adiw	r28, 0x14	; 20
    11d4:	0f b6       	in	r0, 0x3f	; 63
    11d6:	f8 94       	cli
    11d8:	de bf       	out	0x3e, r29	; 62
    11da:	0f be       	out	0x3f, r0	; 63
    11dc:	cd bf       	out	0x3d, r28	; 61
    11de:	cf 91       	pop	r28
    11e0:	df 91       	pop	r29
    11e2:	1f 91       	pop	r17
    11e4:	0f 91       	pop	r16
    11e6:	ff 90       	pop	r15
    11e8:	ef 90       	pop	r14
    11ea:	df 90       	pop	r13
    11ec:	cf 90       	pop	r12
    11ee:	bf 90       	pop	r11
    11f0:	af 90       	pop	r10
    11f2:	08 95       	ret

000011f4 <ICU_voidInit>:
/******************** ICU ********************/


void ICU_voidInit(void)
{
    11f4:	df 93       	push	r29
    11f6:	cf 93       	push	r28
    11f8:	cd b7       	in	r28, 0x3d	; 61
    11fa:	de b7       	in	r29, 0x3e	; 62
	/* Set event rising */
	SET_BIT(TCCR1B , 6);
    11fc:	ae e4       	ldi	r26, 0x4E	; 78
    11fe:	b0 e0       	ldi	r27, 0x00	; 0
    1200:	ee e4       	ldi	r30, 0x4E	; 78
    1202:	f0 e0       	ldi	r31, 0x00	; 0
    1204:	80 81       	ld	r24, Z
    1206:	80 64       	ori	r24, 0x40	; 64
    1208:	8c 93       	st	X, r24
	/* enable interrupt */
	SET_BIT(TIMSK , 5); // SIE
    120a:	a9 e5       	ldi	r26, 0x59	; 89
    120c:	b0 e0       	ldi	r27, 0x00	; 0
    120e:	e9 e5       	ldi	r30, 0x59	; 89
    1210:	f0 e0       	ldi	r31, 0x00	; 0
    1212:	80 81       	ld	r24, Z
    1214:	80 62       	ori	r24, 0x20	; 32
    1216:	8c 93       	st	X, r24
	/* P.S = 8 */
	CLR_BIT(TCCR1B , 0);
    1218:	ae e4       	ldi	r26, 0x4E	; 78
    121a:	b0 e0       	ldi	r27, 0x00	; 0
    121c:	ee e4       	ldi	r30, 0x4E	; 78
    121e:	f0 e0       	ldi	r31, 0x00	; 0
    1220:	80 81       	ld	r24, Z
    1222:	8e 7f       	andi	r24, 0xFE	; 254
    1224:	8c 93       	st	X, r24
	SET_BIT(TCCR1B , 1);
    1226:	ae e4       	ldi	r26, 0x4E	; 78
    1228:	b0 e0       	ldi	r27, 0x00	; 0
    122a:	ee e4       	ldi	r30, 0x4E	; 78
    122c:	f0 e0       	ldi	r31, 0x00	; 0
    122e:	80 81       	ld	r24, Z
    1230:	82 60       	ori	r24, 0x02	; 2
    1232:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B , 2);
    1234:	ae e4       	ldi	r26, 0x4E	; 78
    1236:	b0 e0       	ldi	r27, 0x00	; 0
    1238:	ee e4       	ldi	r30, 0x4E	; 78
    123a:	f0 e0       	ldi	r31, 0x00	; 0
    123c:	80 81       	ld	r24, Z
    123e:	8b 7f       	andi	r24, 0xFB	; 251
    1240:	8c 93       	st	X, r24

}
    1242:	cf 91       	pop	r28
    1244:	df 91       	pop	r29
    1246:	08 95       	ret

00001248 <ICU_voidSetSenseControl>:

void ICU_voidSetSenseControl(u8 state)
{
    1248:	df 93       	push	r29
    124a:	cf 93       	push	r28
    124c:	0f 92       	push	r0
    124e:	cd b7       	in	r28, 0x3d	; 61
    1250:	de b7       	in	r29, 0x3e	; 62
    1252:	89 83       	std	Y+1, r24	; 0x01
	if (state == 0)
    1254:	89 81       	ldd	r24, Y+1	; 0x01
    1256:	88 23       	and	r24, r24
    1258:	41 f4       	brne	.+16     	; 0x126a <ICU_voidSetSenseControl+0x22>
	{
		CLR_BIT(TCCR1B , 6); //falling
    125a:	ae e4       	ldi	r26, 0x4E	; 78
    125c:	b0 e0       	ldi	r27, 0x00	; 0
    125e:	ee e4       	ldi	r30, 0x4E	; 78
    1260:	f0 e0       	ldi	r31, 0x00	; 0
    1262:	80 81       	ld	r24, Z
    1264:	8f 7b       	andi	r24, 0xBF	; 191
    1266:	8c 93       	st	X, r24
    1268:	07 c0       	rjmp	.+14     	; 0x1278 <ICU_voidSetSenseControl+0x30>
	}
	else
	{
		SET_BIT(TCCR1B , 6); // rising
    126a:	ae e4       	ldi	r26, 0x4E	; 78
    126c:	b0 e0       	ldi	r27, 0x00	; 0
    126e:	ee e4       	ldi	r30, 0x4E	; 78
    1270:	f0 e0       	ldi	r31, 0x00	; 0
    1272:	80 81       	ld	r24, Z
    1274:	80 64       	ori	r24, 0x40	; 64
    1276:	8c 93       	st	X, r24

	}
}
    1278:	0f 90       	pop	r0
    127a:	cf 91       	pop	r28
    127c:	df 91       	pop	r29
    127e:	08 95       	ret

00001280 <ICU_u16ReadValue>:

u16 ICU_u16ReadValue(void)
{
    1280:	df 93       	push	r29
    1282:	cf 93       	push	r28
    1284:	cd b7       	in	r28, 0x3d	; 61
    1286:	de b7       	in	r29, 0x3e	; 62
	return ICR1;
    1288:	e6 e4       	ldi	r30, 0x46	; 70
    128a:	f0 e0       	ldi	r31, 0x00	; 0
    128c:	80 81       	ld	r24, Z
    128e:	91 81       	ldd	r25, Z+1	; 0x01
}
    1290:	cf 91       	pop	r28
    1292:	df 91       	pop	r29
    1294:	08 95       	ret

00001296 <ICU_voidSetCallBack>:

void ICU_voidSetCallBack(void (*func)(void))
{
    1296:	df 93       	push	r29
    1298:	cf 93       	push	r28
    129a:	00 d0       	rcall	.+0      	; 0x129c <ICU_voidSetCallBack+0x6>
    129c:	cd b7       	in	r28, 0x3d	; 61
    129e:	de b7       	in	r29, 0x3e	; 62
    12a0:	9a 83       	std	Y+2, r25	; 0x02
    12a2:	89 83       	std	Y+1, r24	; 0x01
	callback_ICU = func;
    12a4:	89 81       	ldd	r24, Y+1	; 0x01
    12a6:	9a 81       	ldd	r25, Y+2	; 0x02
    12a8:	90 93 e8 01 	sts	0x01E8, r25
    12ac:	80 93 e7 01 	sts	0x01E7, r24
}
    12b0:	0f 90       	pop	r0
    12b2:	0f 90       	pop	r0
    12b4:	cf 91       	pop	r28
    12b6:	df 91       	pop	r29
    12b8:	08 95       	ret

000012ba <ICU_voidDisableInterrupt>:

void ICU_voidDisableInterrupt(void)
{
    12ba:	df 93       	push	r29
    12bc:	cf 93       	push	r28
    12be:	cd b7       	in	r28, 0x3d	; 61
    12c0:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK , 5); // SIE
    12c2:	a9 e5       	ldi	r26, 0x59	; 89
    12c4:	b0 e0       	ldi	r27, 0x00	; 0
    12c6:	e9 e5       	ldi	r30, 0x59	; 89
    12c8:	f0 e0       	ldi	r31, 0x00	; 0
    12ca:	80 81       	ld	r24, Z
    12cc:	8f 7d       	andi	r24, 0xDF	; 223
    12ce:	8c 93       	st	X, r24

}
    12d0:	cf 91       	pop	r28
    12d2:	df 91       	pop	r29
    12d4:	08 95       	ret

000012d6 <__vector_6>:

void __vector_6 (void) __attribute__((signal));
void __vector_6 (void)
{
    12d6:	1f 92       	push	r1
    12d8:	0f 92       	push	r0
    12da:	0f b6       	in	r0, 0x3f	; 63
    12dc:	0f 92       	push	r0
    12de:	11 24       	eor	r1, r1
    12e0:	2f 93       	push	r18
    12e2:	3f 93       	push	r19
    12e4:	4f 93       	push	r20
    12e6:	5f 93       	push	r21
    12e8:	6f 93       	push	r22
    12ea:	7f 93       	push	r23
    12ec:	8f 93       	push	r24
    12ee:	9f 93       	push	r25
    12f0:	af 93       	push	r26
    12f2:	bf 93       	push	r27
    12f4:	ef 93       	push	r30
    12f6:	ff 93       	push	r31
    12f8:	df 93       	push	r29
    12fa:	cf 93       	push	r28
    12fc:	cd b7       	in	r28, 0x3d	; 61
    12fe:	de b7       	in	r29, 0x3e	; 62

	if (callback_ICU != '\0'){
    1300:	80 91 e7 01 	lds	r24, 0x01E7
    1304:	90 91 e8 01 	lds	r25, 0x01E8
    1308:	00 97       	sbiw	r24, 0x00	; 0
    130a:	29 f0       	breq	.+10     	; 0x1316 <__vector_6+0x40>
		callback_ICU();
    130c:	e0 91 e7 01 	lds	r30, 0x01E7
    1310:	f0 91 e8 01 	lds	r31, 0x01E8
    1314:	09 95       	icall
	}

}
    1316:	cf 91       	pop	r28
    1318:	df 91       	pop	r29
    131a:	ff 91       	pop	r31
    131c:	ef 91       	pop	r30
    131e:	bf 91       	pop	r27
    1320:	af 91       	pop	r26
    1322:	9f 91       	pop	r25
    1324:	8f 91       	pop	r24
    1326:	7f 91       	pop	r23
    1328:	6f 91       	pop	r22
    132a:	5f 91       	pop	r21
    132c:	4f 91       	pop	r20
    132e:	3f 91       	pop	r19
    1330:	2f 91       	pop	r18
    1332:	0f 90       	pop	r0
    1334:	0f be       	out	0x3f, r0	; 63
    1336:	0f 90       	pop	r0
    1338:	1f 90       	pop	r1
    133a:	18 95       	reti

0000133c <LCD_voidinit>:





void LCD_voidinit(){
    133c:	df 93       	push	r29
    133e:	cf 93       	push	r28
    1340:	cd b7       	in	r28, 0x3d	; 61
    1342:	de b7       	in	r29, 0x3e	; 62
    1344:	e8 97       	sbiw	r28, 0x38	; 56
    1346:	0f b6       	in	r0, 0x3f	; 63
    1348:	f8 94       	cli
    134a:	de bf       	out	0x3e, r29	; 62
    134c:	0f be       	out	0x3f, r0	; 63
    134e:	cd bf       	out	0x3d, r28	; 61
	Dio_voidSetPortDirection(LCD_DATA_PORT,DIO_OUTPUT);
    1350:	82 e0       	ldi	r24, 0x02	; 2
    1352:	61 e0       	ldi	r22, 0x01	; 1
    1354:	0e 94 53 11 	call	0x22a6	; 0x22a6 <Dio_voidSetPortDirection>
	Dio_voidSetPinDirection(LCD_RS_PORT,LCD_RS_PIN,DIO_OUTPUT);
    1358:	83 e0       	ldi	r24, 0x03	; 3
    135a:	62 e0       	ldi	r22, 0x02	; 2
    135c:	41 e0       	ldi	r20, 0x01	; 1
    135e:	0e 94 d9 0e 	call	0x1db2	; 0x1db2 <Dio_voidSetPinDirection>
	Dio_voidSetPinDirection(LCD_RW_PORT,LCD_RW_PIN,DIO_OUTPUT);
    1362:	83 e0       	ldi	r24, 0x03	; 3
    1364:	63 e0       	ldi	r22, 0x03	; 3
    1366:	41 e0       	ldi	r20, 0x01	; 1
    1368:	0e 94 d9 0e 	call	0x1db2	; 0x1db2 <Dio_voidSetPinDirection>
	Dio_voidSetPinDirection(LCD_E_PORT,LCD_E_PIN,DIO_OUTPUT);
    136c:	83 e0       	ldi	r24, 0x03	; 3
    136e:	64 e0       	ldi	r22, 0x04	; 4
    1370:	41 e0       	ldi	r20, 0x01	; 1
    1372:	0e 94 d9 0e 	call	0x1db2	; 0x1db2 <Dio_voidSetPinDirection>
    1376:	80 e0       	ldi	r24, 0x00	; 0
    1378:	90 e0       	ldi	r25, 0x00	; 0
    137a:	a0 e2       	ldi	r26, 0x20	; 32
    137c:	b2 e4       	ldi	r27, 0x42	; 66
    137e:	8d ab       	std	Y+53, r24	; 0x35
    1380:	9e ab       	std	Y+54, r25	; 0x36
    1382:	af ab       	std	Y+55, r26	; 0x37
    1384:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1386:	6d a9       	ldd	r22, Y+53	; 0x35
    1388:	7e a9       	ldd	r23, Y+54	; 0x36
    138a:	8f a9       	ldd	r24, Y+55	; 0x37
    138c:	98 ad       	ldd	r25, Y+56	; 0x38
    138e:	20 e0       	ldi	r18, 0x00	; 0
    1390:	30 e0       	ldi	r19, 0x00	; 0
    1392:	4a ef       	ldi	r20, 0xFA	; 250
    1394:	54 e4       	ldi	r21, 0x44	; 68
    1396:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    139a:	dc 01       	movw	r26, r24
    139c:	cb 01       	movw	r24, r22
    139e:	89 ab       	std	Y+49, r24	; 0x31
    13a0:	9a ab       	std	Y+50, r25	; 0x32
    13a2:	ab ab       	std	Y+51, r26	; 0x33
    13a4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    13a6:	69 a9       	ldd	r22, Y+49	; 0x31
    13a8:	7a a9       	ldd	r23, Y+50	; 0x32
    13aa:	8b a9       	ldd	r24, Y+51	; 0x33
    13ac:	9c a9       	ldd	r25, Y+52	; 0x34
    13ae:	20 e0       	ldi	r18, 0x00	; 0
    13b0:	30 e0       	ldi	r19, 0x00	; 0
    13b2:	40 e8       	ldi	r20, 0x80	; 128
    13b4:	5f e3       	ldi	r21, 0x3F	; 63
    13b6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    13ba:	88 23       	and	r24, r24
    13bc:	2c f4       	brge	.+10     	; 0x13c8 <LCD_voidinit+0x8c>
		__ticks = 1;
    13be:	81 e0       	ldi	r24, 0x01	; 1
    13c0:	90 e0       	ldi	r25, 0x00	; 0
    13c2:	98 ab       	std	Y+48, r25	; 0x30
    13c4:	8f a7       	std	Y+47, r24	; 0x2f
    13c6:	3f c0       	rjmp	.+126    	; 0x1446 <LCD_voidinit+0x10a>
	else if (__tmp > 65535)
    13c8:	69 a9       	ldd	r22, Y+49	; 0x31
    13ca:	7a a9       	ldd	r23, Y+50	; 0x32
    13cc:	8b a9       	ldd	r24, Y+51	; 0x33
    13ce:	9c a9       	ldd	r25, Y+52	; 0x34
    13d0:	20 e0       	ldi	r18, 0x00	; 0
    13d2:	3f ef       	ldi	r19, 0xFF	; 255
    13d4:	4f e7       	ldi	r20, 0x7F	; 127
    13d6:	57 e4       	ldi	r21, 0x47	; 71
    13d8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    13dc:	18 16       	cp	r1, r24
    13de:	4c f5       	brge	.+82     	; 0x1432 <LCD_voidinit+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13e0:	6d a9       	ldd	r22, Y+53	; 0x35
    13e2:	7e a9       	ldd	r23, Y+54	; 0x36
    13e4:	8f a9       	ldd	r24, Y+55	; 0x37
    13e6:	98 ad       	ldd	r25, Y+56	; 0x38
    13e8:	20 e0       	ldi	r18, 0x00	; 0
    13ea:	30 e0       	ldi	r19, 0x00	; 0
    13ec:	40 e2       	ldi	r20, 0x20	; 32
    13ee:	51 e4       	ldi	r21, 0x41	; 65
    13f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13f4:	dc 01       	movw	r26, r24
    13f6:	cb 01       	movw	r24, r22
    13f8:	bc 01       	movw	r22, r24
    13fa:	cd 01       	movw	r24, r26
    13fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1400:	dc 01       	movw	r26, r24
    1402:	cb 01       	movw	r24, r22
    1404:	98 ab       	std	Y+48, r25	; 0x30
    1406:	8f a7       	std	Y+47, r24	; 0x2f
    1408:	0f c0       	rjmp	.+30     	; 0x1428 <LCD_voidinit+0xec>
    140a:	88 ec       	ldi	r24, 0xC8	; 200
    140c:	90 e0       	ldi	r25, 0x00	; 0
    140e:	9e a7       	std	Y+46, r25	; 0x2e
    1410:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1412:	8d a5       	ldd	r24, Y+45	; 0x2d
    1414:	9e a5       	ldd	r25, Y+46	; 0x2e
    1416:	01 97       	sbiw	r24, 0x01	; 1
    1418:	f1 f7       	brne	.-4      	; 0x1416 <LCD_voidinit+0xda>
    141a:	9e a7       	std	Y+46, r25	; 0x2e
    141c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    141e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1420:	98 a9       	ldd	r25, Y+48	; 0x30
    1422:	01 97       	sbiw	r24, 0x01	; 1
    1424:	98 ab       	std	Y+48, r25	; 0x30
    1426:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1428:	8f a5       	ldd	r24, Y+47	; 0x2f
    142a:	98 a9       	ldd	r25, Y+48	; 0x30
    142c:	00 97       	sbiw	r24, 0x00	; 0
    142e:	69 f7       	brne	.-38     	; 0x140a <LCD_voidinit+0xce>
    1430:	14 c0       	rjmp	.+40     	; 0x145a <LCD_voidinit+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1432:	69 a9       	ldd	r22, Y+49	; 0x31
    1434:	7a a9       	ldd	r23, Y+50	; 0x32
    1436:	8b a9       	ldd	r24, Y+51	; 0x33
    1438:	9c a9       	ldd	r25, Y+52	; 0x34
    143a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    143e:	dc 01       	movw	r26, r24
    1440:	cb 01       	movw	r24, r22
    1442:	98 ab       	std	Y+48, r25	; 0x30
    1444:	8f a7       	std	Y+47, r24	; 0x2f
    1446:	8f a5       	ldd	r24, Y+47	; 0x2f
    1448:	98 a9       	ldd	r25, Y+48	; 0x30
    144a:	9c a7       	std	Y+44, r25	; 0x2c
    144c:	8b a7       	std	Y+43, r24	; 0x2b
    144e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1450:	9c a5       	ldd	r25, Y+44	; 0x2c
    1452:	01 97       	sbiw	r24, 0x01	; 1
    1454:	f1 f7       	brne	.-4      	; 0x1452 <LCD_voidinit+0x116>
    1456:	9c a7       	std	Y+44, r25	; 0x2c
    1458:	8b a7       	std	Y+43, r24	; 0x2b



	_delay_ms(40);
	LCD_voidsendcommand(0b00111000);
    145a:	88 e3       	ldi	r24, 0x38	; 56
    145c:	0e 94 98 0b 	call	0x1730	; 0x1730 <LCD_voidsendcommand>
    1460:	80 e0       	ldi	r24, 0x00	; 0
    1462:	90 e0       	ldi	r25, 0x00	; 0
    1464:	a0 e8       	ldi	r26, 0x80	; 128
    1466:	bf e3       	ldi	r27, 0x3F	; 63
    1468:	8f a3       	std	Y+39, r24	; 0x27
    146a:	98 a7       	std	Y+40, r25	; 0x28
    146c:	a9 a7       	std	Y+41, r26	; 0x29
    146e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1470:	6f a1       	ldd	r22, Y+39	; 0x27
    1472:	78 a5       	ldd	r23, Y+40	; 0x28
    1474:	89 a5       	ldd	r24, Y+41	; 0x29
    1476:	9a a5       	ldd	r25, Y+42	; 0x2a
    1478:	20 e0       	ldi	r18, 0x00	; 0
    147a:	30 e0       	ldi	r19, 0x00	; 0
    147c:	4a ef       	ldi	r20, 0xFA	; 250
    147e:	54 e4       	ldi	r21, 0x44	; 68
    1480:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1484:	dc 01       	movw	r26, r24
    1486:	cb 01       	movw	r24, r22
    1488:	8b a3       	std	Y+35, r24	; 0x23
    148a:	9c a3       	std	Y+36, r25	; 0x24
    148c:	ad a3       	std	Y+37, r26	; 0x25
    148e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1490:	6b a1       	ldd	r22, Y+35	; 0x23
    1492:	7c a1       	ldd	r23, Y+36	; 0x24
    1494:	8d a1       	ldd	r24, Y+37	; 0x25
    1496:	9e a1       	ldd	r25, Y+38	; 0x26
    1498:	20 e0       	ldi	r18, 0x00	; 0
    149a:	30 e0       	ldi	r19, 0x00	; 0
    149c:	40 e8       	ldi	r20, 0x80	; 128
    149e:	5f e3       	ldi	r21, 0x3F	; 63
    14a0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    14a4:	88 23       	and	r24, r24
    14a6:	2c f4       	brge	.+10     	; 0x14b2 <LCD_voidinit+0x176>
		__ticks = 1;
    14a8:	81 e0       	ldi	r24, 0x01	; 1
    14aa:	90 e0       	ldi	r25, 0x00	; 0
    14ac:	9a a3       	std	Y+34, r25	; 0x22
    14ae:	89 a3       	std	Y+33, r24	; 0x21
    14b0:	3f c0       	rjmp	.+126    	; 0x1530 <LCD_voidinit+0x1f4>
	else if (__tmp > 65535)
    14b2:	6b a1       	ldd	r22, Y+35	; 0x23
    14b4:	7c a1       	ldd	r23, Y+36	; 0x24
    14b6:	8d a1       	ldd	r24, Y+37	; 0x25
    14b8:	9e a1       	ldd	r25, Y+38	; 0x26
    14ba:	20 e0       	ldi	r18, 0x00	; 0
    14bc:	3f ef       	ldi	r19, 0xFF	; 255
    14be:	4f e7       	ldi	r20, 0x7F	; 127
    14c0:	57 e4       	ldi	r21, 0x47	; 71
    14c2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    14c6:	18 16       	cp	r1, r24
    14c8:	4c f5       	brge	.+82     	; 0x151c <LCD_voidinit+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14ca:	6f a1       	ldd	r22, Y+39	; 0x27
    14cc:	78 a5       	ldd	r23, Y+40	; 0x28
    14ce:	89 a5       	ldd	r24, Y+41	; 0x29
    14d0:	9a a5       	ldd	r25, Y+42	; 0x2a
    14d2:	20 e0       	ldi	r18, 0x00	; 0
    14d4:	30 e0       	ldi	r19, 0x00	; 0
    14d6:	40 e2       	ldi	r20, 0x20	; 32
    14d8:	51 e4       	ldi	r21, 0x41	; 65
    14da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14de:	dc 01       	movw	r26, r24
    14e0:	cb 01       	movw	r24, r22
    14e2:	bc 01       	movw	r22, r24
    14e4:	cd 01       	movw	r24, r26
    14e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14ea:	dc 01       	movw	r26, r24
    14ec:	cb 01       	movw	r24, r22
    14ee:	9a a3       	std	Y+34, r25	; 0x22
    14f0:	89 a3       	std	Y+33, r24	; 0x21
    14f2:	0f c0       	rjmp	.+30     	; 0x1512 <LCD_voidinit+0x1d6>
    14f4:	88 ec       	ldi	r24, 0xC8	; 200
    14f6:	90 e0       	ldi	r25, 0x00	; 0
    14f8:	98 a3       	std	Y+32, r25	; 0x20
    14fa:	8f 8f       	std	Y+31, r24	; 0x1f
    14fc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    14fe:	98 a1       	ldd	r25, Y+32	; 0x20
    1500:	01 97       	sbiw	r24, 0x01	; 1
    1502:	f1 f7       	brne	.-4      	; 0x1500 <LCD_voidinit+0x1c4>
    1504:	98 a3       	std	Y+32, r25	; 0x20
    1506:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1508:	89 a1       	ldd	r24, Y+33	; 0x21
    150a:	9a a1       	ldd	r25, Y+34	; 0x22
    150c:	01 97       	sbiw	r24, 0x01	; 1
    150e:	9a a3       	std	Y+34, r25	; 0x22
    1510:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1512:	89 a1       	ldd	r24, Y+33	; 0x21
    1514:	9a a1       	ldd	r25, Y+34	; 0x22
    1516:	00 97       	sbiw	r24, 0x00	; 0
    1518:	69 f7       	brne	.-38     	; 0x14f4 <LCD_voidinit+0x1b8>
    151a:	14 c0       	rjmp	.+40     	; 0x1544 <LCD_voidinit+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    151c:	6b a1       	ldd	r22, Y+35	; 0x23
    151e:	7c a1       	ldd	r23, Y+36	; 0x24
    1520:	8d a1       	ldd	r24, Y+37	; 0x25
    1522:	9e a1       	ldd	r25, Y+38	; 0x26
    1524:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1528:	dc 01       	movw	r26, r24
    152a:	cb 01       	movw	r24, r22
    152c:	9a a3       	std	Y+34, r25	; 0x22
    152e:	89 a3       	std	Y+33, r24	; 0x21
    1530:	89 a1       	ldd	r24, Y+33	; 0x21
    1532:	9a a1       	ldd	r25, Y+34	; 0x22
    1534:	9e 8f       	std	Y+30, r25	; 0x1e
    1536:	8d 8f       	std	Y+29, r24	; 0x1d
    1538:	8d 8d       	ldd	r24, Y+29	; 0x1d
    153a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    153c:	01 97       	sbiw	r24, 0x01	; 1
    153e:	f1 f7       	brne	.-4      	; 0x153c <LCD_voidinit+0x200>
    1540:	9e 8f       	std	Y+30, r25	; 0x1e
    1542:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LCD_voidsendcommand(0b00001100);
    1544:	8c e0       	ldi	r24, 0x0C	; 12
    1546:	0e 94 98 0b 	call	0x1730	; 0x1730 <LCD_voidsendcommand>
    154a:	80 e0       	ldi	r24, 0x00	; 0
    154c:	90 e0       	ldi	r25, 0x00	; 0
    154e:	a0 e8       	ldi	r26, 0x80	; 128
    1550:	bf e3       	ldi	r27, 0x3F	; 63
    1552:	89 8f       	std	Y+25, r24	; 0x19
    1554:	9a 8f       	std	Y+26, r25	; 0x1a
    1556:	ab 8f       	std	Y+27, r26	; 0x1b
    1558:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    155a:	69 8d       	ldd	r22, Y+25	; 0x19
    155c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    155e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1560:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1562:	20 e0       	ldi	r18, 0x00	; 0
    1564:	30 e0       	ldi	r19, 0x00	; 0
    1566:	4a ef       	ldi	r20, 0xFA	; 250
    1568:	54 e4       	ldi	r21, 0x44	; 68
    156a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    156e:	dc 01       	movw	r26, r24
    1570:	cb 01       	movw	r24, r22
    1572:	8d 8b       	std	Y+21, r24	; 0x15
    1574:	9e 8b       	std	Y+22, r25	; 0x16
    1576:	af 8b       	std	Y+23, r26	; 0x17
    1578:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    157a:	6d 89       	ldd	r22, Y+21	; 0x15
    157c:	7e 89       	ldd	r23, Y+22	; 0x16
    157e:	8f 89       	ldd	r24, Y+23	; 0x17
    1580:	98 8d       	ldd	r25, Y+24	; 0x18
    1582:	20 e0       	ldi	r18, 0x00	; 0
    1584:	30 e0       	ldi	r19, 0x00	; 0
    1586:	40 e8       	ldi	r20, 0x80	; 128
    1588:	5f e3       	ldi	r21, 0x3F	; 63
    158a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    158e:	88 23       	and	r24, r24
    1590:	2c f4       	brge	.+10     	; 0x159c <LCD_voidinit+0x260>
		__ticks = 1;
    1592:	81 e0       	ldi	r24, 0x01	; 1
    1594:	90 e0       	ldi	r25, 0x00	; 0
    1596:	9c 8b       	std	Y+20, r25	; 0x14
    1598:	8b 8b       	std	Y+19, r24	; 0x13
    159a:	3f c0       	rjmp	.+126    	; 0x161a <LCD_voidinit+0x2de>
	else if (__tmp > 65535)
    159c:	6d 89       	ldd	r22, Y+21	; 0x15
    159e:	7e 89       	ldd	r23, Y+22	; 0x16
    15a0:	8f 89       	ldd	r24, Y+23	; 0x17
    15a2:	98 8d       	ldd	r25, Y+24	; 0x18
    15a4:	20 e0       	ldi	r18, 0x00	; 0
    15a6:	3f ef       	ldi	r19, 0xFF	; 255
    15a8:	4f e7       	ldi	r20, 0x7F	; 127
    15aa:	57 e4       	ldi	r21, 0x47	; 71
    15ac:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    15b0:	18 16       	cp	r1, r24
    15b2:	4c f5       	brge	.+82     	; 0x1606 <LCD_voidinit+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15b4:	69 8d       	ldd	r22, Y+25	; 0x19
    15b6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    15b8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    15ba:	9c 8d       	ldd	r25, Y+28	; 0x1c
    15bc:	20 e0       	ldi	r18, 0x00	; 0
    15be:	30 e0       	ldi	r19, 0x00	; 0
    15c0:	40 e2       	ldi	r20, 0x20	; 32
    15c2:	51 e4       	ldi	r21, 0x41	; 65
    15c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15c8:	dc 01       	movw	r26, r24
    15ca:	cb 01       	movw	r24, r22
    15cc:	bc 01       	movw	r22, r24
    15ce:	cd 01       	movw	r24, r26
    15d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15d4:	dc 01       	movw	r26, r24
    15d6:	cb 01       	movw	r24, r22
    15d8:	9c 8b       	std	Y+20, r25	; 0x14
    15da:	8b 8b       	std	Y+19, r24	; 0x13
    15dc:	0f c0       	rjmp	.+30     	; 0x15fc <LCD_voidinit+0x2c0>
    15de:	88 ec       	ldi	r24, 0xC8	; 200
    15e0:	90 e0       	ldi	r25, 0x00	; 0
    15e2:	9a 8b       	std	Y+18, r25	; 0x12
    15e4:	89 8b       	std	Y+17, r24	; 0x11
    15e6:	89 89       	ldd	r24, Y+17	; 0x11
    15e8:	9a 89       	ldd	r25, Y+18	; 0x12
    15ea:	01 97       	sbiw	r24, 0x01	; 1
    15ec:	f1 f7       	brne	.-4      	; 0x15ea <LCD_voidinit+0x2ae>
    15ee:	9a 8b       	std	Y+18, r25	; 0x12
    15f0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15f2:	8b 89       	ldd	r24, Y+19	; 0x13
    15f4:	9c 89       	ldd	r25, Y+20	; 0x14
    15f6:	01 97       	sbiw	r24, 0x01	; 1
    15f8:	9c 8b       	std	Y+20, r25	; 0x14
    15fa:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15fc:	8b 89       	ldd	r24, Y+19	; 0x13
    15fe:	9c 89       	ldd	r25, Y+20	; 0x14
    1600:	00 97       	sbiw	r24, 0x00	; 0
    1602:	69 f7       	brne	.-38     	; 0x15de <LCD_voidinit+0x2a2>
    1604:	14 c0       	rjmp	.+40     	; 0x162e <LCD_voidinit+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1606:	6d 89       	ldd	r22, Y+21	; 0x15
    1608:	7e 89       	ldd	r23, Y+22	; 0x16
    160a:	8f 89       	ldd	r24, Y+23	; 0x17
    160c:	98 8d       	ldd	r25, Y+24	; 0x18
    160e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1612:	dc 01       	movw	r26, r24
    1614:	cb 01       	movw	r24, r22
    1616:	9c 8b       	std	Y+20, r25	; 0x14
    1618:	8b 8b       	std	Y+19, r24	; 0x13
    161a:	8b 89       	ldd	r24, Y+19	; 0x13
    161c:	9c 89       	ldd	r25, Y+20	; 0x14
    161e:	98 8b       	std	Y+16, r25	; 0x10
    1620:	8f 87       	std	Y+15, r24	; 0x0f
    1622:	8f 85       	ldd	r24, Y+15	; 0x0f
    1624:	98 89       	ldd	r25, Y+16	; 0x10
    1626:	01 97       	sbiw	r24, 0x01	; 1
    1628:	f1 f7       	brne	.-4      	; 0x1626 <LCD_voidinit+0x2ea>
    162a:	98 8b       	std	Y+16, r25	; 0x10
    162c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCD_voidsendcommand(0b00000001);
    162e:	81 e0       	ldi	r24, 0x01	; 1
    1630:	0e 94 98 0b 	call	0x1730	; 0x1730 <LCD_voidsendcommand>
    1634:	80 e0       	ldi	r24, 0x00	; 0
    1636:	90 e0       	ldi	r25, 0x00	; 0
    1638:	a0 e0       	ldi	r26, 0x00	; 0
    163a:	b0 e4       	ldi	r27, 0x40	; 64
    163c:	8b 87       	std	Y+11, r24	; 0x0b
    163e:	9c 87       	std	Y+12, r25	; 0x0c
    1640:	ad 87       	std	Y+13, r26	; 0x0d
    1642:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1644:	6b 85       	ldd	r22, Y+11	; 0x0b
    1646:	7c 85       	ldd	r23, Y+12	; 0x0c
    1648:	8d 85       	ldd	r24, Y+13	; 0x0d
    164a:	9e 85       	ldd	r25, Y+14	; 0x0e
    164c:	20 e0       	ldi	r18, 0x00	; 0
    164e:	30 e0       	ldi	r19, 0x00	; 0
    1650:	4a ef       	ldi	r20, 0xFA	; 250
    1652:	54 e4       	ldi	r21, 0x44	; 68
    1654:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1658:	dc 01       	movw	r26, r24
    165a:	cb 01       	movw	r24, r22
    165c:	8f 83       	std	Y+7, r24	; 0x07
    165e:	98 87       	std	Y+8, r25	; 0x08
    1660:	a9 87       	std	Y+9, r26	; 0x09
    1662:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1664:	6f 81       	ldd	r22, Y+7	; 0x07
    1666:	78 85       	ldd	r23, Y+8	; 0x08
    1668:	89 85       	ldd	r24, Y+9	; 0x09
    166a:	9a 85       	ldd	r25, Y+10	; 0x0a
    166c:	20 e0       	ldi	r18, 0x00	; 0
    166e:	30 e0       	ldi	r19, 0x00	; 0
    1670:	40 e8       	ldi	r20, 0x80	; 128
    1672:	5f e3       	ldi	r21, 0x3F	; 63
    1674:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1678:	88 23       	and	r24, r24
    167a:	2c f4       	brge	.+10     	; 0x1686 <LCD_voidinit+0x34a>
		__ticks = 1;
    167c:	81 e0       	ldi	r24, 0x01	; 1
    167e:	90 e0       	ldi	r25, 0x00	; 0
    1680:	9e 83       	std	Y+6, r25	; 0x06
    1682:	8d 83       	std	Y+5, r24	; 0x05
    1684:	3f c0       	rjmp	.+126    	; 0x1704 <LCD_voidinit+0x3c8>
	else if (__tmp > 65535)
    1686:	6f 81       	ldd	r22, Y+7	; 0x07
    1688:	78 85       	ldd	r23, Y+8	; 0x08
    168a:	89 85       	ldd	r24, Y+9	; 0x09
    168c:	9a 85       	ldd	r25, Y+10	; 0x0a
    168e:	20 e0       	ldi	r18, 0x00	; 0
    1690:	3f ef       	ldi	r19, 0xFF	; 255
    1692:	4f e7       	ldi	r20, 0x7F	; 127
    1694:	57 e4       	ldi	r21, 0x47	; 71
    1696:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    169a:	18 16       	cp	r1, r24
    169c:	4c f5       	brge	.+82     	; 0x16f0 <LCD_voidinit+0x3b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    169e:	6b 85       	ldd	r22, Y+11	; 0x0b
    16a0:	7c 85       	ldd	r23, Y+12	; 0x0c
    16a2:	8d 85       	ldd	r24, Y+13	; 0x0d
    16a4:	9e 85       	ldd	r25, Y+14	; 0x0e
    16a6:	20 e0       	ldi	r18, 0x00	; 0
    16a8:	30 e0       	ldi	r19, 0x00	; 0
    16aa:	40 e2       	ldi	r20, 0x20	; 32
    16ac:	51 e4       	ldi	r21, 0x41	; 65
    16ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16b2:	dc 01       	movw	r26, r24
    16b4:	cb 01       	movw	r24, r22
    16b6:	bc 01       	movw	r22, r24
    16b8:	cd 01       	movw	r24, r26
    16ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16be:	dc 01       	movw	r26, r24
    16c0:	cb 01       	movw	r24, r22
    16c2:	9e 83       	std	Y+6, r25	; 0x06
    16c4:	8d 83       	std	Y+5, r24	; 0x05
    16c6:	0f c0       	rjmp	.+30     	; 0x16e6 <LCD_voidinit+0x3aa>
    16c8:	88 ec       	ldi	r24, 0xC8	; 200
    16ca:	90 e0       	ldi	r25, 0x00	; 0
    16cc:	9c 83       	std	Y+4, r25	; 0x04
    16ce:	8b 83       	std	Y+3, r24	; 0x03
    16d0:	8b 81       	ldd	r24, Y+3	; 0x03
    16d2:	9c 81       	ldd	r25, Y+4	; 0x04
    16d4:	01 97       	sbiw	r24, 0x01	; 1
    16d6:	f1 f7       	brne	.-4      	; 0x16d4 <LCD_voidinit+0x398>
    16d8:	9c 83       	std	Y+4, r25	; 0x04
    16da:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16dc:	8d 81       	ldd	r24, Y+5	; 0x05
    16de:	9e 81       	ldd	r25, Y+6	; 0x06
    16e0:	01 97       	sbiw	r24, 0x01	; 1
    16e2:	9e 83       	std	Y+6, r25	; 0x06
    16e4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16e6:	8d 81       	ldd	r24, Y+5	; 0x05
    16e8:	9e 81       	ldd	r25, Y+6	; 0x06
    16ea:	00 97       	sbiw	r24, 0x00	; 0
    16ec:	69 f7       	brne	.-38     	; 0x16c8 <LCD_voidinit+0x38c>
    16ee:	14 c0       	rjmp	.+40     	; 0x1718 <LCD_voidinit+0x3dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16f0:	6f 81       	ldd	r22, Y+7	; 0x07
    16f2:	78 85       	ldd	r23, Y+8	; 0x08
    16f4:	89 85       	ldd	r24, Y+9	; 0x09
    16f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    16f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16fc:	dc 01       	movw	r26, r24
    16fe:	cb 01       	movw	r24, r22
    1700:	9e 83       	std	Y+6, r25	; 0x06
    1702:	8d 83       	std	Y+5, r24	; 0x05
    1704:	8d 81       	ldd	r24, Y+5	; 0x05
    1706:	9e 81       	ldd	r25, Y+6	; 0x06
    1708:	9a 83       	std	Y+2, r25	; 0x02
    170a:	89 83       	std	Y+1, r24	; 0x01
    170c:	89 81       	ldd	r24, Y+1	; 0x01
    170e:	9a 81       	ldd	r25, Y+2	; 0x02
    1710:	01 97       	sbiw	r24, 0x01	; 1
    1712:	f1 f7       	brne	.-4      	; 0x1710 <LCD_voidinit+0x3d4>
    1714:	9a 83       	std	Y+2, r25	; 0x02
    1716:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	LCD_voidsendcommand(0b00000110);
    1718:	86 e0       	ldi	r24, 0x06	; 6
    171a:	0e 94 98 0b 	call	0x1730	; 0x1730 <LCD_voidsendcommand>
}
    171e:	e8 96       	adiw	r28, 0x38	; 56
    1720:	0f b6       	in	r0, 0x3f	; 63
    1722:	f8 94       	cli
    1724:	de bf       	out	0x3e, r29	; 62
    1726:	0f be       	out	0x3f, r0	; 63
    1728:	cd bf       	out	0x3d, r28	; 61
    172a:	cf 91       	pop	r28
    172c:	df 91       	pop	r29
    172e:	08 95       	ret

00001730 <LCD_voidsendcommand>:


void LCD_voidsendcommand(u8 cpy_u8command){
    1730:	df 93       	push	r29
    1732:	cf 93       	push	r28
    1734:	cd b7       	in	r28, 0x3d	; 61
    1736:	de b7       	in	r29, 0x3e	; 62
    1738:	2f 97       	sbiw	r28, 0x0f	; 15
    173a:	0f b6       	in	r0, 0x3f	; 63
    173c:	f8 94       	cli
    173e:	de bf       	out	0x3e, r29	; 62
    1740:	0f be       	out	0x3f, r0	; 63
    1742:	cd bf       	out	0x3d, r28	; 61
    1744:	8f 87       	std	Y+15, r24	; 0x0f
	Dio_voidSetPinValue(LCD_RS_PORT,LCD_RS_PIN,DIO_LOW);
    1746:	83 e0       	ldi	r24, 0x03	; 3
    1748:	62 e0       	ldi	r22, 0x02	; 2
    174a:	40 e0       	ldi	r20, 0x00	; 0
    174c:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <Dio_voidSetPinValue>
	Dio_voidSetPinValue(LCD_RW_PORT,LCD_RW_PIN,DIO_LOW);
    1750:	83 e0       	ldi	r24, 0x03	; 3
    1752:	63 e0       	ldi	r22, 0x03	; 3
    1754:	40 e0       	ldi	r20, 0x00	; 0
    1756:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <Dio_voidSetPinValue>
	Dio_voidSetPortValue(LCD_DATA_PORT,cpy_u8command);
    175a:	82 e0       	ldi	r24, 0x02	; 2
    175c:	6f 85       	ldd	r22, Y+15	; 0x0f
    175e:	0e 94 cc 11 	call	0x2398	; 0x2398 <Dio_voidSetPortValue>
	Dio_voidSetPinValue(LCD_E_PORT,LCD_E_PIN,DIO_HIGH);
    1762:	83 e0       	ldi	r24, 0x03	; 3
    1764:	64 e0       	ldi	r22, 0x04	; 4
    1766:	41 e0       	ldi	r20, 0x01	; 1
    1768:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <Dio_voidSetPinValue>
    176c:	80 e0       	ldi	r24, 0x00	; 0
    176e:	90 e0       	ldi	r25, 0x00	; 0
    1770:	a0 e0       	ldi	r26, 0x00	; 0
    1772:	b0 e4       	ldi	r27, 0x40	; 64
    1774:	8b 87       	std	Y+11, r24	; 0x0b
    1776:	9c 87       	std	Y+12, r25	; 0x0c
    1778:	ad 87       	std	Y+13, r26	; 0x0d
    177a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    177c:	6b 85       	ldd	r22, Y+11	; 0x0b
    177e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1780:	8d 85       	ldd	r24, Y+13	; 0x0d
    1782:	9e 85       	ldd	r25, Y+14	; 0x0e
    1784:	20 e0       	ldi	r18, 0x00	; 0
    1786:	30 e0       	ldi	r19, 0x00	; 0
    1788:	4a ef       	ldi	r20, 0xFA	; 250
    178a:	54 e4       	ldi	r21, 0x44	; 68
    178c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1790:	dc 01       	movw	r26, r24
    1792:	cb 01       	movw	r24, r22
    1794:	8f 83       	std	Y+7, r24	; 0x07
    1796:	98 87       	std	Y+8, r25	; 0x08
    1798:	a9 87       	std	Y+9, r26	; 0x09
    179a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    179c:	6f 81       	ldd	r22, Y+7	; 0x07
    179e:	78 85       	ldd	r23, Y+8	; 0x08
    17a0:	89 85       	ldd	r24, Y+9	; 0x09
    17a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    17a4:	20 e0       	ldi	r18, 0x00	; 0
    17a6:	30 e0       	ldi	r19, 0x00	; 0
    17a8:	40 e8       	ldi	r20, 0x80	; 128
    17aa:	5f e3       	ldi	r21, 0x3F	; 63
    17ac:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17b0:	88 23       	and	r24, r24
    17b2:	2c f4       	brge	.+10     	; 0x17be <LCD_voidsendcommand+0x8e>
		__ticks = 1;
    17b4:	81 e0       	ldi	r24, 0x01	; 1
    17b6:	90 e0       	ldi	r25, 0x00	; 0
    17b8:	9e 83       	std	Y+6, r25	; 0x06
    17ba:	8d 83       	std	Y+5, r24	; 0x05
    17bc:	3f c0       	rjmp	.+126    	; 0x183c <LCD_voidsendcommand+0x10c>
	else if (__tmp > 65535)
    17be:	6f 81       	ldd	r22, Y+7	; 0x07
    17c0:	78 85       	ldd	r23, Y+8	; 0x08
    17c2:	89 85       	ldd	r24, Y+9	; 0x09
    17c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    17c6:	20 e0       	ldi	r18, 0x00	; 0
    17c8:	3f ef       	ldi	r19, 0xFF	; 255
    17ca:	4f e7       	ldi	r20, 0x7F	; 127
    17cc:	57 e4       	ldi	r21, 0x47	; 71
    17ce:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17d2:	18 16       	cp	r1, r24
    17d4:	4c f5       	brge	.+82     	; 0x1828 <LCD_voidsendcommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17d6:	6b 85       	ldd	r22, Y+11	; 0x0b
    17d8:	7c 85       	ldd	r23, Y+12	; 0x0c
    17da:	8d 85       	ldd	r24, Y+13	; 0x0d
    17dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    17de:	20 e0       	ldi	r18, 0x00	; 0
    17e0:	30 e0       	ldi	r19, 0x00	; 0
    17e2:	40 e2       	ldi	r20, 0x20	; 32
    17e4:	51 e4       	ldi	r21, 0x41	; 65
    17e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17ea:	dc 01       	movw	r26, r24
    17ec:	cb 01       	movw	r24, r22
    17ee:	bc 01       	movw	r22, r24
    17f0:	cd 01       	movw	r24, r26
    17f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17f6:	dc 01       	movw	r26, r24
    17f8:	cb 01       	movw	r24, r22
    17fa:	9e 83       	std	Y+6, r25	; 0x06
    17fc:	8d 83       	std	Y+5, r24	; 0x05
    17fe:	0f c0       	rjmp	.+30     	; 0x181e <LCD_voidsendcommand+0xee>
    1800:	88 ec       	ldi	r24, 0xC8	; 200
    1802:	90 e0       	ldi	r25, 0x00	; 0
    1804:	9c 83       	std	Y+4, r25	; 0x04
    1806:	8b 83       	std	Y+3, r24	; 0x03
    1808:	8b 81       	ldd	r24, Y+3	; 0x03
    180a:	9c 81       	ldd	r25, Y+4	; 0x04
    180c:	01 97       	sbiw	r24, 0x01	; 1
    180e:	f1 f7       	brne	.-4      	; 0x180c <LCD_voidsendcommand+0xdc>
    1810:	9c 83       	std	Y+4, r25	; 0x04
    1812:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1814:	8d 81       	ldd	r24, Y+5	; 0x05
    1816:	9e 81       	ldd	r25, Y+6	; 0x06
    1818:	01 97       	sbiw	r24, 0x01	; 1
    181a:	9e 83       	std	Y+6, r25	; 0x06
    181c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    181e:	8d 81       	ldd	r24, Y+5	; 0x05
    1820:	9e 81       	ldd	r25, Y+6	; 0x06
    1822:	00 97       	sbiw	r24, 0x00	; 0
    1824:	69 f7       	brne	.-38     	; 0x1800 <LCD_voidsendcommand+0xd0>
    1826:	14 c0       	rjmp	.+40     	; 0x1850 <LCD_voidsendcommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1828:	6f 81       	ldd	r22, Y+7	; 0x07
    182a:	78 85       	ldd	r23, Y+8	; 0x08
    182c:	89 85       	ldd	r24, Y+9	; 0x09
    182e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1830:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1834:	dc 01       	movw	r26, r24
    1836:	cb 01       	movw	r24, r22
    1838:	9e 83       	std	Y+6, r25	; 0x06
    183a:	8d 83       	std	Y+5, r24	; 0x05
    183c:	8d 81       	ldd	r24, Y+5	; 0x05
    183e:	9e 81       	ldd	r25, Y+6	; 0x06
    1840:	9a 83       	std	Y+2, r25	; 0x02
    1842:	89 83       	std	Y+1, r24	; 0x01
    1844:	89 81       	ldd	r24, Y+1	; 0x01
    1846:	9a 81       	ldd	r25, Y+2	; 0x02
    1848:	01 97       	sbiw	r24, 0x01	; 1
    184a:	f1 f7       	brne	.-4      	; 0x1848 <LCD_voidsendcommand+0x118>
    184c:	9a 83       	std	Y+2, r25	; 0x02
    184e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	Dio_voidSetPinValue(LCD_E_PORT,LCD_E_PIN,DIO_LOW);
    1850:	83 e0       	ldi	r24, 0x03	; 3
    1852:	64 e0       	ldi	r22, 0x04	; 4
    1854:	40 e0       	ldi	r20, 0x00	; 0
    1856:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <Dio_voidSetPinValue>
}
    185a:	2f 96       	adiw	r28, 0x0f	; 15
    185c:	0f b6       	in	r0, 0x3f	; 63
    185e:	f8 94       	cli
    1860:	de bf       	out	0x3e, r29	; 62
    1862:	0f be       	out	0x3f, r0	; 63
    1864:	cd bf       	out	0x3d, r28	; 61
    1866:	cf 91       	pop	r28
    1868:	df 91       	pop	r29
    186a:	08 95       	ret

0000186c <LCD_voidsenddata>:
void LCD_voidsenddata(u8 cpy_u8data){
    186c:	df 93       	push	r29
    186e:	cf 93       	push	r28
    1870:	cd b7       	in	r28, 0x3d	; 61
    1872:	de b7       	in	r29, 0x3e	; 62
    1874:	2f 97       	sbiw	r28, 0x0f	; 15
    1876:	0f b6       	in	r0, 0x3f	; 63
    1878:	f8 94       	cli
    187a:	de bf       	out	0x3e, r29	; 62
    187c:	0f be       	out	0x3f, r0	; 63
    187e:	cd bf       	out	0x3d, r28	; 61
    1880:	8f 87       	std	Y+15, r24	; 0x0f
	Dio_voidSetPinValue(LCD_RS_PORT,LCD_RS_PIN,DIO_HIGH);
    1882:	83 e0       	ldi	r24, 0x03	; 3
    1884:	62 e0       	ldi	r22, 0x02	; 2
    1886:	41 e0       	ldi	r20, 0x01	; 1
    1888:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <Dio_voidSetPinValue>
	Dio_voidSetPinValue(LCD_RW_PORT,LCD_RW_PIN,DIO_LOW);
    188c:	83 e0       	ldi	r24, 0x03	; 3
    188e:	63 e0       	ldi	r22, 0x03	; 3
    1890:	40 e0       	ldi	r20, 0x00	; 0
    1892:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <Dio_voidSetPinValue>
	Dio_voidSetPortValue(LCD_DATA_PORT,cpy_u8data);
    1896:	82 e0       	ldi	r24, 0x02	; 2
    1898:	6f 85       	ldd	r22, Y+15	; 0x0f
    189a:	0e 94 cc 11 	call	0x2398	; 0x2398 <Dio_voidSetPortValue>
	Dio_voidSetPinValue(LCD_E_PORT,LCD_E_PIN,DIO_HIGH);
    189e:	83 e0       	ldi	r24, 0x03	; 3
    18a0:	64 e0       	ldi	r22, 0x04	; 4
    18a2:	41 e0       	ldi	r20, 0x01	; 1
    18a4:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <Dio_voidSetPinValue>
    18a8:	80 e0       	ldi	r24, 0x00	; 0
    18aa:	90 e0       	ldi	r25, 0x00	; 0
    18ac:	a0 e0       	ldi	r26, 0x00	; 0
    18ae:	b0 e4       	ldi	r27, 0x40	; 64
    18b0:	8b 87       	std	Y+11, r24	; 0x0b
    18b2:	9c 87       	std	Y+12, r25	; 0x0c
    18b4:	ad 87       	std	Y+13, r26	; 0x0d
    18b6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18b8:	6b 85       	ldd	r22, Y+11	; 0x0b
    18ba:	7c 85       	ldd	r23, Y+12	; 0x0c
    18bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    18be:	9e 85       	ldd	r25, Y+14	; 0x0e
    18c0:	20 e0       	ldi	r18, 0x00	; 0
    18c2:	30 e0       	ldi	r19, 0x00	; 0
    18c4:	4a ef       	ldi	r20, 0xFA	; 250
    18c6:	54 e4       	ldi	r21, 0x44	; 68
    18c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18cc:	dc 01       	movw	r26, r24
    18ce:	cb 01       	movw	r24, r22
    18d0:	8f 83       	std	Y+7, r24	; 0x07
    18d2:	98 87       	std	Y+8, r25	; 0x08
    18d4:	a9 87       	std	Y+9, r26	; 0x09
    18d6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    18d8:	6f 81       	ldd	r22, Y+7	; 0x07
    18da:	78 85       	ldd	r23, Y+8	; 0x08
    18dc:	89 85       	ldd	r24, Y+9	; 0x09
    18de:	9a 85       	ldd	r25, Y+10	; 0x0a
    18e0:	20 e0       	ldi	r18, 0x00	; 0
    18e2:	30 e0       	ldi	r19, 0x00	; 0
    18e4:	40 e8       	ldi	r20, 0x80	; 128
    18e6:	5f e3       	ldi	r21, 0x3F	; 63
    18e8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    18ec:	88 23       	and	r24, r24
    18ee:	2c f4       	brge	.+10     	; 0x18fa <LCD_voidsenddata+0x8e>
		__ticks = 1;
    18f0:	81 e0       	ldi	r24, 0x01	; 1
    18f2:	90 e0       	ldi	r25, 0x00	; 0
    18f4:	9e 83       	std	Y+6, r25	; 0x06
    18f6:	8d 83       	std	Y+5, r24	; 0x05
    18f8:	3f c0       	rjmp	.+126    	; 0x1978 <LCD_voidsenddata+0x10c>
	else if (__tmp > 65535)
    18fa:	6f 81       	ldd	r22, Y+7	; 0x07
    18fc:	78 85       	ldd	r23, Y+8	; 0x08
    18fe:	89 85       	ldd	r24, Y+9	; 0x09
    1900:	9a 85       	ldd	r25, Y+10	; 0x0a
    1902:	20 e0       	ldi	r18, 0x00	; 0
    1904:	3f ef       	ldi	r19, 0xFF	; 255
    1906:	4f e7       	ldi	r20, 0x7F	; 127
    1908:	57 e4       	ldi	r21, 0x47	; 71
    190a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    190e:	18 16       	cp	r1, r24
    1910:	4c f5       	brge	.+82     	; 0x1964 <LCD_voidsenddata+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1912:	6b 85       	ldd	r22, Y+11	; 0x0b
    1914:	7c 85       	ldd	r23, Y+12	; 0x0c
    1916:	8d 85       	ldd	r24, Y+13	; 0x0d
    1918:	9e 85       	ldd	r25, Y+14	; 0x0e
    191a:	20 e0       	ldi	r18, 0x00	; 0
    191c:	30 e0       	ldi	r19, 0x00	; 0
    191e:	40 e2       	ldi	r20, 0x20	; 32
    1920:	51 e4       	ldi	r21, 0x41	; 65
    1922:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1926:	dc 01       	movw	r26, r24
    1928:	cb 01       	movw	r24, r22
    192a:	bc 01       	movw	r22, r24
    192c:	cd 01       	movw	r24, r26
    192e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1932:	dc 01       	movw	r26, r24
    1934:	cb 01       	movw	r24, r22
    1936:	9e 83       	std	Y+6, r25	; 0x06
    1938:	8d 83       	std	Y+5, r24	; 0x05
    193a:	0f c0       	rjmp	.+30     	; 0x195a <LCD_voidsenddata+0xee>
    193c:	88 ec       	ldi	r24, 0xC8	; 200
    193e:	90 e0       	ldi	r25, 0x00	; 0
    1940:	9c 83       	std	Y+4, r25	; 0x04
    1942:	8b 83       	std	Y+3, r24	; 0x03
    1944:	8b 81       	ldd	r24, Y+3	; 0x03
    1946:	9c 81       	ldd	r25, Y+4	; 0x04
    1948:	01 97       	sbiw	r24, 0x01	; 1
    194a:	f1 f7       	brne	.-4      	; 0x1948 <LCD_voidsenddata+0xdc>
    194c:	9c 83       	std	Y+4, r25	; 0x04
    194e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1950:	8d 81       	ldd	r24, Y+5	; 0x05
    1952:	9e 81       	ldd	r25, Y+6	; 0x06
    1954:	01 97       	sbiw	r24, 0x01	; 1
    1956:	9e 83       	std	Y+6, r25	; 0x06
    1958:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    195a:	8d 81       	ldd	r24, Y+5	; 0x05
    195c:	9e 81       	ldd	r25, Y+6	; 0x06
    195e:	00 97       	sbiw	r24, 0x00	; 0
    1960:	69 f7       	brne	.-38     	; 0x193c <LCD_voidsenddata+0xd0>
    1962:	14 c0       	rjmp	.+40     	; 0x198c <LCD_voidsenddata+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1964:	6f 81       	ldd	r22, Y+7	; 0x07
    1966:	78 85       	ldd	r23, Y+8	; 0x08
    1968:	89 85       	ldd	r24, Y+9	; 0x09
    196a:	9a 85       	ldd	r25, Y+10	; 0x0a
    196c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1970:	dc 01       	movw	r26, r24
    1972:	cb 01       	movw	r24, r22
    1974:	9e 83       	std	Y+6, r25	; 0x06
    1976:	8d 83       	std	Y+5, r24	; 0x05
    1978:	8d 81       	ldd	r24, Y+5	; 0x05
    197a:	9e 81       	ldd	r25, Y+6	; 0x06
    197c:	9a 83       	std	Y+2, r25	; 0x02
    197e:	89 83       	std	Y+1, r24	; 0x01
    1980:	89 81       	ldd	r24, Y+1	; 0x01
    1982:	9a 81       	ldd	r25, Y+2	; 0x02
    1984:	01 97       	sbiw	r24, 0x01	; 1
    1986:	f1 f7       	brne	.-4      	; 0x1984 <LCD_voidsenddata+0x118>
    1988:	9a 83       	std	Y+2, r25	; 0x02
    198a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	Dio_voidSetPinValue(LCD_E_PORT,LCD_E_PIN,DIO_LOW);
    198c:	83 e0       	ldi	r24, 0x03	; 3
    198e:	64 e0       	ldi	r22, 0x04	; 4
    1990:	40 e0       	ldi	r20, 0x00	; 0
    1992:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <Dio_voidSetPinValue>
}
    1996:	2f 96       	adiw	r28, 0x0f	; 15
    1998:	0f b6       	in	r0, 0x3f	; 63
    199a:	f8 94       	cli
    199c:	de bf       	out	0x3e, r29	; 62
    199e:	0f be       	out	0x3f, r0	; 63
    19a0:	cd bf       	out	0x3d, r28	; 61
    19a2:	cf 91       	pop	r28
    19a4:	df 91       	pop	r29
    19a6:	08 95       	ret

000019a8 <LCD_voidsendstring>:




void LCD_voidsendstring(u8* str){
    19a8:	df 93       	push	r29
    19aa:	cf 93       	push	r28
    19ac:	00 d0       	rcall	.+0      	; 0x19ae <LCD_voidsendstring+0x6>
    19ae:	0f 92       	push	r0
    19b0:	cd b7       	in	r28, 0x3d	; 61
    19b2:	de b7       	in	r29, 0x3e	; 62
    19b4:	9b 83       	std	Y+3, r25	; 0x03
    19b6:	8a 83       	std	Y+2, r24	; 0x02
	u8 index;
	for (index=0 ; str[index]!='\0';index++) // '\0' It expresses to NULL the end of string
    19b8:	19 82       	std	Y+1, r1	; 0x01
    19ba:	0e c0       	rjmp	.+28     	; 0x19d8 <LCD_voidsendstring+0x30>
	{
		LCD_voidsenddata(str[index]);
    19bc:	89 81       	ldd	r24, Y+1	; 0x01
    19be:	28 2f       	mov	r18, r24
    19c0:	30 e0       	ldi	r19, 0x00	; 0
    19c2:	8a 81       	ldd	r24, Y+2	; 0x02
    19c4:	9b 81       	ldd	r25, Y+3	; 0x03
    19c6:	fc 01       	movw	r30, r24
    19c8:	e2 0f       	add	r30, r18
    19ca:	f3 1f       	adc	r31, r19
    19cc:	80 81       	ld	r24, Z
    19ce:	0e 94 36 0c 	call	0x186c	; 0x186c <LCD_voidsenddata>



void LCD_voidsendstring(u8* str){
	u8 index;
	for (index=0 ; str[index]!='\0';index++) // '\0' It expresses to NULL the end of string
    19d2:	89 81       	ldd	r24, Y+1	; 0x01
    19d4:	8f 5f       	subi	r24, 0xFF	; 255
    19d6:	89 83       	std	Y+1, r24	; 0x01
    19d8:	89 81       	ldd	r24, Y+1	; 0x01
    19da:	28 2f       	mov	r18, r24
    19dc:	30 e0       	ldi	r19, 0x00	; 0
    19de:	8a 81       	ldd	r24, Y+2	; 0x02
    19e0:	9b 81       	ldd	r25, Y+3	; 0x03
    19e2:	fc 01       	movw	r30, r24
    19e4:	e2 0f       	add	r30, r18
    19e6:	f3 1f       	adc	r31, r19
    19e8:	80 81       	ld	r24, Z
    19ea:	88 23       	and	r24, r24
    19ec:	39 f7       	brne	.-50     	; 0x19bc <LCD_voidsendstring+0x14>
	{
		LCD_voidsenddata(str[index]);
	}

}
    19ee:	0f 90       	pop	r0
    19f0:	0f 90       	pop	r0
    19f2:	0f 90       	pop	r0
    19f4:	cf 91       	pop	r28
    19f6:	df 91       	pop	r29
    19f8:	08 95       	ret

000019fa <LCD_gotoxy>:





void LCD_gotoxy(u8 cpy_u8x,u8 cpy_u8y){
    19fa:	df 93       	push	r29
    19fc:	cf 93       	push	r28
    19fe:	00 d0       	rcall	.+0      	; 0x1a00 <LCD_gotoxy+0x6>
    1a00:	00 d0       	rcall	.+0      	; 0x1a02 <LCD_gotoxy+0x8>
    1a02:	cd b7       	in	r28, 0x3d	; 61
    1a04:	de b7       	in	r29, 0x3e	; 62
    1a06:	8b 83       	std	Y+3, r24	; 0x03
    1a08:	6c 83       	std	Y+4, r22	; 0x04
u16 address=(cpy_u8x*64)+cpy_u8y+128 ;
    1a0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a0c:	88 2f       	mov	r24, r24
    1a0e:	90 e0       	ldi	r25, 0x00	; 0
    1a10:	9c 01       	movw	r18, r24
    1a12:	00 24       	eor	r0, r0
    1a14:	36 95       	lsr	r19
    1a16:	27 95       	ror	r18
    1a18:	07 94       	ror	r0
    1a1a:	36 95       	lsr	r19
    1a1c:	27 95       	ror	r18
    1a1e:	07 94       	ror	r0
    1a20:	32 2f       	mov	r19, r18
    1a22:	20 2d       	mov	r18, r0
    1a24:	8c 81       	ldd	r24, Y+4	; 0x04
    1a26:	88 2f       	mov	r24, r24
    1a28:	90 e0       	ldi	r25, 0x00	; 0
    1a2a:	82 0f       	add	r24, r18
    1a2c:	93 1f       	adc	r25, r19
    1a2e:	80 58       	subi	r24, 0x80	; 128
    1a30:	9f 4f       	sbci	r25, 0xFF	; 255
    1a32:	9a 83       	std	Y+2, r25	; 0x02
    1a34:	89 83       	std	Y+1, r24	; 0x01
LCD_voidsendcommand(address);
    1a36:	89 81       	ldd	r24, Y+1	; 0x01
    1a38:	0e 94 98 0b 	call	0x1730	; 0x1730 <LCD_voidsendcommand>
}
    1a3c:	0f 90       	pop	r0
    1a3e:	0f 90       	pop	r0
    1a40:	0f 90       	pop	r0
    1a42:	0f 90       	pop	r0
    1a44:	cf 91       	pop	r28
    1a46:	df 91       	pop	r29
    1a48:	08 95       	ret

00001a4a <LCD_voidpattern>:


void LCD_voidpattern(u8 cpy_u8blocknum,u8* cpy_u8patternarr){
    1a4a:	df 93       	push	r29
    1a4c:	cf 93       	push	r28
    1a4e:	00 d0       	rcall	.+0      	; 0x1a50 <LCD_voidpattern+0x6>
    1a50:	00 d0       	rcall	.+0      	; 0x1a52 <LCD_voidpattern+0x8>
    1a52:	0f 92       	push	r0
    1a54:	cd b7       	in	r28, 0x3d	; 61
    1a56:	de b7       	in	r29, 0x3e	; 62
    1a58:	8b 83       	std	Y+3, r24	; 0x03
    1a5a:	7d 83       	std	Y+5, r23	; 0x05
    1a5c:	6c 83       	std	Y+4, r22	; 0x04
	u8 adress= 64 + (8*cpy_u8blocknum);
    1a5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a60:	88 2f       	mov	r24, r24
    1a62:	90 e0       	ldi	r25, 0x00	; 0
    1a64:	08 96       	adiw	r24, 0x08	; 8
    1a66:	88 0f       	add	r24, r24
    1a68:	99 1f       	adc	r25, r25
    1a6a:	88 0f       	add	r24, r24
    1a6c:	99 1f       	adc	r25, r25
    1a6e:	88 0f       	add	r24, r24
    1a70:	99 1f       	adc	r25, r25
    1a72:	8a 83       	std	Y+2, r24	; 0x02
	LCD_voidsendcommand(adress);
    1a74:	8a 81       	ldd	r24, Y+2	; 0x02
    1a76:	0e 94 98 0b 	call	0x1730	; 0x1730 <LCD_voidsendcommand>
	for(u8 i=0;i<9;i++){
    1a7a:	19 82       	std	Y+1, r1	; 0x01
    1a7c:	0e c0       	rjmp	.+28     	; 0x1a9a <LCD_voidpattern+0x50>
		LCD_voidsenddata(cpy_u8patternarr[i]);
    1a7e:	89 81       	ldd	r24, Y+1	; 0x01
    1a80:	28 2f       	mov	r18, r24
    1a82:	30 e0       	ldi	r19, 0x00	; 0
    1a84:	8c 81       	ldd	r24, Y+4	; 0x04
    1a86:	9d 81       	ldd	r25, Y+5	; 0x05
    1a88:	fc 01       	movw	r30, r24
    1a8a:	e2 0f       	add	r30, r18
    1a8c:	f3 1f       	adc	r31, r19
    1a8e:	80 81       	ld	r24, Z
    1a90:	0e 94 36 0c 	call	0x186c	; 0x186c <LCD_voidsenddata>


void LCD_voidpattern(u8 cpy_u8blocknum,u8* cpy_u8patternarr){
	u8 adress= 64 + (8*cpy_u8blocknum);
	LCD_voidsendcommand(adress);
	for(u8 i=0;i<9;i++){
    1a94:	89 81       	ldd	r24, Y+1	; 0x01
    1a96:	8f 5f       	subi	r24, 0xFF	; 255
    1a98:	89 83       	std	Y+1, r24	; 0x01
    1a9a:	89 81       	ldd	r24, Y+1	; 0x01
    1a9c:	89 30       	cpi	r24, 0x09	; 9
    1a9e:	78 f3       	brcs	.-34     	; 0x1a7e <LCD_voidpattern+0x34>
		LCD_voidsenddata(cpy_u8patternarr[i]);

	}
	LCD_voidsendcommand(0x02);   //command to return back home
    1aa0:	82 e0       	ldi	r24, 0x02	; 2
    1aa2:	0e 94 98 0b 	call	0x1730	; 0x1730 <LCD_voidsendcommand>
}
    1aa6:	0f 90       	pop	r0
    1aa8:	0f 90       	pop	r0
    1aaa:	0f 90       	pop	r0
    1aac:	0f 90       	pop	r0
    1aae:	0f 90       	pop	r0
    1ab0:	cf 91       	pop	r28
    1ab2:	df 91       	pop	r29
    1ab4:	08 95       	ret

00001ab6 <LCD_voidnameinsinusoidal>:

void  LCD_voidnameinsinusoidal(){
    1ab6:	df 93       	push	r29
    1ab8:	cf 93       	push	r28
    1aba:	cd b7       	in	r28, 0x3d	; 61
    1abc:	de b7       	in	r29, 0x3e	; 62
    1abe:	60 97       	sbiw	r28, 0x10	; 16
    1ac0:	0f b6       	in	r0, 0x3f	; 63
    1ac2:	f8 94       	cli
    1ac4:	de bf       	out	0x3e, r29	; 62
    1ac6:	0f be       	out	0x3f, r0	; 63
    1ac8:	cd bf       	out	0x3d, r28	; 61
	u8 row=1;
    1aca:	81 e0       	ldi	r24, 0x01	; 1
    1acc:	88 8b       	std	Y+16, r24	; 0x10
	u8 column=0;
    1ace:	1f 86       	std	Y+15, r1	; 0x0f
	for(column=0;column<12;column++){
    1ad0:	1f 86       	std	Y+15, r1	; 0x0f
    1ad2:	84 c0       	rjmp	.+264    	; 0x1bdc <LCD_voidnameinsinusoidal+0x126>
		row^=1;  //To be placed once by 1 and once by 0
    1ad4:	98 89       	ldd	r25, Y+16	; 0x10
    1ad6:	81 e0       	ldi	r24, 0x01	; 1
    1ad8:	89 27       	eor	r24, r25
    1ada:	88 8b       	std	Y+16, r24	; 0x10
		LCD_gotoxy(row,column);
    1adc:	88 89       	ldd	r24, Y+16	; 0x10
    1ade:	6f 85       	ldd	r22, Y+15	; 0x0f
    1ae0:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <LCD_gotoxy>
		LCD_voidsendstring("karim");
    1ae4:	80 e6       	ldi	r24, 0x60	; 96
    1ae6:	90 e0       	ldi	r25, 0x00	; 0
    1ae8:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <LCD_voidsendstring>
    1aec:	80 e0       	ldi	r24, 0x00	; 0
    1aee:	90 e0       	ldi	r25, 0x00	; 0
    1af0:	aa e7       	ldi	r26, 0x7A	; 122
    1af2:	b3 e4       	ldi	r27, 0x43	; 67
    1af4:	8b 87       	std	Y+11, r24	; 0x0b
    1af6:	9c 87       	std	Y+12, r25	; 0x0c
    1af8:	ad 87       	std	Y+13, r26	; 0x0d
    1afa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1afc:	6b 85       	ldd	r22, Y+11	; 0x0b
    1afe:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b00:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b02:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b04:	20 e0       	ldi	r18, 0x00	; 0
    1b06:	30 e0       	ldi	r19, 0x00	; 0
    1b08:	4a ef       	ldi	r20, 0xFA	; 250
    1b0a:	54 e4       	ldi	r21, 0x44	; 68
    1b0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b10:	dc 01       	movw	r26, r24
    1b12:	cb 01       	movw	r24, r22
    1b14:	8f 83       	std	Y+7, r24	; 0x07
    1b16:	98 87       	std	Y+8, r25	; 0x08
    1b18:	a9 87       	std	Y+9, r26	; 0x09
    1b1a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b1c:	6f 81       	ldd	r22, Y+7	; 0x07
    1b1e:	78 85       	ldd	r23, Y+8	; 0x08
    1b20:	89 85       	ldd	r24, Y+9	; 0x09
    1b22:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b24:	20 e0       	ldi	r18, 0x00	; 0
    1b26:	30 e0       	ldi	r19, 0x00	; 0
    1b28:	40 e8       	ldi	r20, 0x80	; 128
    1b2a:	5f e3       	ldi	r21, 0x3F	; 63
    1b2c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b30:	88 23       	and	r24, r24
    1b32:	2c f4       	brge	.+10     	; 0x1b3e <LCD_voidnameinsinusoidal+0x88>
		__ticks = 1;
    1b34:	81 e0       	ldi	r24, 0x01	; 1
    1b36:	90 e0       	ldi	r25, 0x00	; 0
    1b38:	9e 83       	std	Y+6, r25	; 0x06
    1b3a:	8d 83       	std	Y+5, r24	; 0x05
    1b3c:	3f c0       	rjmp	.+126    	; 0x1bbc <LCD_voidnameinsinusoidal+0x106>
	else if (__tmp > 65535)
    1b3e:	6f 81       	ldd	r22, Y+7	; 0x07
    1b40:	78 85       	ldd	r23, Y+8	; 0x08
    1b42:	89 85       	ldd	r24, Y+9	; 0x09
    1b44:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b46:	20 e0       	ldi	r18, 0x00	; 0
    1b48:	3f ef       	ldi	r19, 0xFF	; 255
    1b4a:	4f e7       	ldi	r20, 0x7F	; 127
    1b4c:	57 e4       	ldi	r21, 0x47	; 71
    1b4e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b52:	18 16       	cp	r1, r24
    1b54:	4c f5       	brge	.+82     	; 0x1ba8 <LCD_voidnameinsinusoidal+0xf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b56:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b58:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b5a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b5c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b5e:	20 e0       	ldi	r18, 0x00	; 0
    1b60:	30 e0       	ldi	r19, 0x00	; 0
    1b62:	40 e2       	ldi	r20, 0x20	; 32
    1b64:	51 e4       	ldi	r21, 0x41	; 65
    1b66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b6a:	dc 01       	movw	r26, r24
    1b6c:	cb 01       	movw	r24, r22
    1b6e:	bc 01       	movw	r22, r24
    1b70:	cd 01       	movw	r24, r26
    1b72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b76:	dc 01       	movw	r26, r24
    1b78:	cb 01       	movw	r24, r22
    1b7a:	9e 83       	std	Y+6, r25	; 0x06
    1b7c:	8d 83       	std	Y+5, r24	; 0x05
    1b7e:	0f c0       	rjmp	.+30     	; 0x1b9e <LCD_voidnameinsinusoidal+0xe8>
    1b80:	88 ec       	ldi	r24, 0xC8	; 200
    1b82:	90 e0       	ldi	r25, 0x00	; 0
    1b84:	9c 83       	std	Y+4, r25	; 0x04
    1b86:	8b 83       	std	Y+3, r24	; 0x03
    1b88:	8b 81       	ldd	r24, Y+3	; 0x03
    1b8a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b8c:	01 97       	sbiw	r24, 0x01	; 1
    1b8e:	f1 f7       	brne	.-4      	; 0x1b8c <LCD_voidnameinsinusoidal+0xd6>
    1b90:	9c 83       	std	Y+4, r25	; 0x04
    1b92:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b94:	8d 81       	ldd	r24, Y+5	; 0x05
    1b96:	9e 81       	ldd	r25, Y+6	; 0x06
    1b98:	01 97       	sbiw	r24, 0x01	; 1
    1b9a:	9e 83       	std	Y+6, r25	; 0x06
    1b9c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b9e:	8d 81       	ldd	r24, Y+5	; 0x05
    1ba0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ba2:	00 97       	sbiw	r24, 0x00	; 0
    1ba4:	69 f7       	brne	.-38     	; 0x1b80 <LCD_voidnameinsinusoidal+0xca>
    1ba6:	14 c0       	rjmp	.+40     	; 0x1bd0 <LCD_voidnameinsinusoidal+0x11a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ba8:	6f 81       	ldd	r22, Y+7	; 0x07
    1baa:	78 85       	ldd	r23, Y+8	; 0x08
    1bac:	89 85       	ldd	r24, Y+9	; 0x09
    1bae:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bb0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bb4:	dc 01       	movw	r26, r24
    1bb6:	cb 01       	movw	r24, r22
    1bb8:	9e 83       	std	Y+6, r25	; 0x06
    1bba:	8d 83       	std	Y+5, r24	; 0x05
    1bbc:	8d 81       	ldd	r24, Y+5	; 0x05
    1bbe:	9e 81       	ldd	r25, Y+6	; 0x06
    1bc0:	9a 83       	std	Y+2, r25	; 0x02
    1bc2:	89 83       	std	Y+1, r24	; 0x01
    1bc4:	89 81       	ldd	r24, Y+1	; 0x01
    1bc6:	9a 81       	ldd	r25, Y+2	; 0x02
    1bc8:	01 97       	sbiw	r24, 0x01	; 1
    1bca:	f1 f7       	brne	.-4      	; 0x1bc8 <LCD_voidnameinsinusoidal+0x112>
    1bcc:	9a 83       	std	Y+2, r25	; 0x02
    1bce:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(250);
		LCD_voidsendcommand(0x01);   // clear name
    1bd0:	81 e0       	ldi	r24, 0x01	; 1
    1bd2:	0e 94 98 0b 	call	0x1730	; 0x1730 <LCD_voidsendcommand>
}

void  LCD_voidnameinsinusoidal(){
	u8 row=1;
	u8 column=0;
	for(column=0;column<12;column++){
    1bd6:	8f 85       	ldd	r24, Y+15	; 0x0f
    1bd8:	8f 5f       	subi	r24, 0xFF	; 255
    1bda:	8f 87       	std	Y+15, r24	; 0x0f
    1bdc:	8f 85       	ldd	r24, Y+15	; 0x0f
    1bde:	8c 30       	cpi	r24, 0x0C	; 12
    1be0:	08 f4       	brcc	.+2      	; 0x1be4 <LCD_voidnameinsinusoidal+0x12e>
    1be2:	78 cf       	rjmp	.-272    	; 0x1ad4 <LCD_voidnameinsinusoidal+0x1e>
		LCD_gotoxy(row,column);
		LCD_voidsendstring("karim");
		_delay_ms(250);
		LCD_voidsendcommand(0x01);   // clear name
	}
}
    1be4:	60 96       	adiw	r28, 0x10	; 16
    1be6:	0f b6       	in	r0, 0x3f	; 63
    1be8:	f8 94       	cli
    1bea:	de bf       	out	0x3e, r29	; 62
    1bec:	0f be       	out	0x3f, r0	; 63
    1bee:	cd bf       	out	0x3d, r28	; 61
    1bf0:	cf 91       	pop	r28
    1bf2:	df 91       	pop	r29
    1bf4:	08 95       	ret

00001bf6 <LCD_voidclearscrean>:

void LCD_voidclearscrean(){
    1bf6:	df 93       	push	r29
    1bf8:	cf 93       	push	r28
    1bfa:	cd b7       	in	r28, 0x3d	; 61
    1bfc:	de b7       	in	r29, 0x3e	; 62
	LCD_voidsendcommand(0x01);
    1bfe:	81 e0       	ldi	r24, 0x01	; 1
    1c00:	0e 94 98 0b 	call	0x1730	; 0x1730 <LCD_voidsendcommand>
}
    1c04:	cf 91       	pop	r28
    1c06:	df 91       	pop	r29
    1c08:	08 95       	ret

00001c0a <LCD_voidWriteNumber>:



void LCD_voidWriteNumber (s32 Cpy_u32Number)
{
    1c0a:	0f 93       	push	r16
    1c0c:	1f 93       	push	r17
    1c0e:	df 93       	push	r29
    1c10:	cf 93       	push	r28
    1c12:	cd b7       	in	r28, 0x3d	; 61
    1c14:	de b7       	in	r29, 0x3e	; 62
    1c16:	64 97       	sbiw	r28, 0x14	; 20
    1c18:	0f b6       	in	r0, 0x3f	; 63
    1c1a:	f8 94       	cli
    1c1c:	de bf       	out	0x3e, r29	; 62
    1c1e:	0f be       	out	0x3f, r0	; 63
    1c20:	cd bf       	out	0x3d, r28	; 61
    1c22:	69 8b       	std	Y+17, r22	; 0x11
    1c24:	7a 8b       	std	Y+18, r23	; 0x12
    1c26:	8b 8b       	std	Y+19, r24	; 0x13
    1c28:	9c 8b       	std	Y+20, r25	; 0x14
 u8 local_u8Counter = 0 ;
    1c2a:	1e 82       	std	Y+6, r1	; 0x06
 u8 local_u8ArrNumber [10];
 s32 local_s32Number = Cpy_u32Number ;
    1c2c:	89 89       	ldd	r24, Y+17	; 0x11
    1c2e:	9a 89       	ldd	r25, Y+18	; 0x12
    1c30:	ab 89       	ldd	r26, Y+19	; 0x13
    1c32:	bc 89       	ldd	r27, Y+20	; 0x14
    1c34:	8a 83       	std	Y+2, r24	; 0x02
    1c36:	9b 83       	std	Y+3, r25	; 0x03
    1c38:	ac 83       	std	Y+4, r26	; 0x04
    1c3a:	bd 83       	std	Y+5, r27	; 0x05
 if (Cpy_u32Number < 0)
    1c3c:	89 89       	ldd	r24, Y+17	; 0x11
    1c3e:	9a 89       	ldd	r25, Y+18	; 0x12
    1c40:	ab 89       	ldd	r26, Y+19	; 0x13
    1c42:	bc 89       	ldd	r27, Y+20	; 0x14
    1c44:	bb 23       	and	r27, r27
    1c46:	0c f0       	brlt	.+2      	; 0x1c4a <LCD_voidWriteNumber+0x40>
    1c48:	51 c0       	rjmp	.+162    	; 0x1cec <LCD_voidWriteNumber+0xe2>
 {
  local_s32Number = -1 * Cpy_u32Number;
    1c4a:	89 89       	ldd	r24, Y+17	; 0x11
    1c4c:	9a 89       	ldd	r25, Y+18	; 0x12
    1c4e:	ab 89       	ldd	r26, Y+19	; 0x13
    1c50:	bc 89       	ldd	r27, Y+20	; 0x14
    1c52:	b0 95       	com	r27
    1c54:	a0 95       	com	r26
    1c56:	90 95       	com	r25
    1c58:	81 95       	neg	r24
    1c5a:	9f 4f       	sbci	r25, 0xFF	; 255
    1c5c:	af 4f       	sbci	r26, 0xFF	; 255
    1c5e:	bf 4f       	sbci	r27, 0xFF	; 255
    1c60:	8a 83       	std	Y+2, r24	; 0x02
    1c62:	9b 83       	std	Y+3, r25	; 0x03
    1c64:	ac 83       	std	Y+4, r26	; 0x04
    1c66:	bd 83       	std	Y+5, r27	; 0x05
    1c68:	41 c0       	rjmp	.+130    	; 0x1cec <LCD_voidWriteNumber+0xe2>
 }

 while (local_s32Number){
  /* get the digit */
  local_u8ArrNumber [local_u8Counter] = (local_s32Number % 10) ;
    1c6a:	8e 81       	ldd	r24, Y+6	; 0x06
    1c6c:	08 2f       	mov	r16, r24
    1c6e:	10 e0       	ldi	r17, 0x00	; 0
    1c70:	8a 81       	ldd	r24, Y+2	; 0x02
    1c72:	9b 81       	ldd	r25, Y+3	; 0x03
    1c74:	ac 81       	ldd	r26, Y+4	; 0x04
    1c76:	bd 81       	ldd	r27, Y+5	; 0x05
    1c78:	2a e0       	ldi	r18, 0x0A	; 10
    1c7a:	30 e0       	ldi	r19, 0x00	; 0
    1c7c:	40 e0       	ldi	r20, 0x00	; 0
    1c7e:	50 e0       	ldi	r21, 0x00	; 0
    1c80:	bc 01       	movw	r22, r24
    1c82:	cd 01       	movw	r24, r26
    1c84:	0e 94 17 22 	call	0x442e	; 0x442e <__divmodsi4>
    1c88:	dc 01       	movw	r26, r24
    1c8a:	cb 01       	movw	r24, r22
    1c8c:	28 2f       	mov	r18, r24
    1c8e:	ce 01       	movw	r24, r28
    1c90:	07 96       	adiw	r24, 0x07	; 7
    1c92:	fc 01       	movw	r30, r24
    1c94:	e0 0f       	add	r30, r16
    1c96:	f1 1f       	adc	r31, r17
    1c98:	20 83       	st	Z, r18
  /* Convert digit to string  (48) is assci of 0 */
  local_u8ArrNumber [local_u8Counter] += 48;
    1c9a:	8e 81       	ldd	r24, Y+6	; 0x06
    1c9c:	48 2f       	mov	r20, r24
    1c9e:	50 e0       	ldi	r21, 0x00	; 0
    1ca0:	8e 81       	ldd	r24, Y+6	; 0x06
    1ca2:	28 2f       	mov	r18, r24
    1ca4:	30 e0       	ldi	r19, 0x00	; 0
    1ca6:	ce 01       	movw	r24, r28
    1ca8:	07 96       	adiw	r24, 0x07	; 7
    1caa:	fc 01       	movw	r30, r24
    1cac:	e2 0f       	add	r30, r18
    1cae:	f3 1f       	adc	r31, r19
    1cb0:	80 81       	ld	r24, Z
    1cb2:	28 2f       	mov	r18, r24
    1cb4:	20 5d       	subi	r18, 0xD0	; 208
    1cb6:	ce 01       	movw	r24, r28
    1cb8:	07 96       	adiw	r24, 0x07	; 7
    1cba:	fc 01       	movw	r30, r24
    1cbc:	e4 0f       	add	r30, r20
    1cbe:	f5 1f       	adc	r31, r21
    1cc0:	20 83       	st	Z, r18
  /* To remove the first digit */
  local_s32Number /= 10 ;
    1cc2:	8a 81       	ldd	r24, Y+2	; 0x02
    1cc4:	9b 81       	ldd	r25, Y+3	; 0x03
    1cc6:	ac 81       	ldd	r26, Y+4	; 0x04
    1cc8:	bd 81       	ldd	r27, Y+5	; 0x05
    1cca:	2a e0       	ldi	r18, 0x0A	; 10
    1ccc:	30 e0       	ldi	r19, 0x00	; 0
    1cce:	40 e0       	ldi	r20, 0x00	; 0
    1cd0:	50 e0       	ldi	r21, 0x00	; 0
    1cd2:	bc 01       	movw	r22, r24
    1cd4:	cd 01       	movw	r24, r26
    1cd6:	0e 94 17 22 	call	0x442e	; 0x442e <__divmodsi4>
    1cda:	da 01       	movw	r26, r20
    1cdc:	c9 01       	movw	r24, r18
    1cde:	8a 83       	std	Y+2, r24	; 0x02
    1ce0:	9b 83       	std	Y+3, r25	; 0x03
    1ce2:	ac 83       	std	Y+4, r26	; 0x04
    1ce4:	bd 83       	std	Y+5, r27	; 0x05
  local_u8Counter++;
    1ce6:	8e 81       	ldd	r24, Y+6	; 0x06
    1ce8:	8f 5f       	subi	r24, 0xFF	; 255
    1cea:	8e 83       	std	Y+6, r24	; 0x06
 if (Cpy_u32Number < 0)
 {
  local_s32Number = -1 * Cpy_u32Number;
 }

 while (local_s32Number){
    1cec:	8a 81       	ldd	r24, Y+2	; 0x02
    1cee:	9b 81       	ldd	r25, Y+3	; 0x03
    1cf0:	ac 81       	ldd	r26, Y+4	; 0x04
    1cf2:	bd 81       	ldd	r27, Y+5	; 0x05
    1cf4:	00 97       	sbiw	r24, 0x00	; 0
    1cf6:	a1 05       	cpc	r26, r1
    1cf8:	b1 05       	cpc	r27, r1
    1cfa:	09 f0       	breq	.+2      	; 0x1cfe <LCD_voidWriteNumber+0xf4>
    1cfc:	b6 cf       	rjmp	.-148    	; 0x1c6a <LCD_voidWriteNumber+0x60>
  local_s32Number /= 10 ;
  local_u8Counter++;
 }

 /* To handle 0 case and negative case */
 if (local_u8Counter == 0 )
    1cfe:	8e 81       	ldd	r24, Y+6	; 0x06
    1d00:	88 23       	and	r24, r24
    1d02:	19 f4       	brne	.+6      	; 0x1d0a <LCD_voidWriteNumber+0x100>
 {
  local_u8ArrNumber[0] = '0';
    1d04:	80 e3       	ldi	r24, 0x30	; 48
    1d06:	8f 83       	std	Y+7, r24	; 0x07
    1d08:	17 c0       	rjmp	.+46     	; 0x1d38 <LCD_voidWriteNumber+0x12e>
 }
 else
 {
  if (Cpy_u32Number > 0)
    1d0a:	89 89       	ldd	r24, Y+17	; 0x11
    1d0c:	9a 89       	ldd	r25, Y+18	; 0x12
    1d0e:	ab 89       	ldd	r26, Y+19	; 0x13
    1d10:	bc 89       	ldd	r27, Y+20	; 0x14
    1d12:	18 16       	cp	r1, r24
    1d14:	19 06       	cpc	r1, r25
    1d16:	1a 06       	cpc	r1, r26
    1d18:	1b 06       	cpc	r1, r27
    1d1a:	24 f4       	brge	.+8      	; 0x1d24 <LCD_voidWriteNumber+0x11a>
  {
   local_u8Counter--;
    1d1c:	8e 81       	ldd	r24, Y+6	; 0x06
    1d1e:	81 50       	subi	r24, 0x01	; 1
    1d20:	8e 83       	std	Y+6, r24	; 0x06
    1d22:	0a c0       	rjmp	.+20     	; 0x1d38 <LCD_voidWriteNumber+0x12e>
  }
  else
  {
   local_u8ArrNumber[local_u8Counter] = '-';
    1d24:	8e 81       	ldd	r24, Y+6	; 0x06
    1d26:	28 2f       	mov	r18, r24
    1d28:	30 e0       	ldi	r19, 0x00	; 0
    1d2a:	ce 01       	movw	r24, r28
    1d2c:	07 96       	adiw	r24, 0x07	; 7
    1d2e:	fc 01       	movw	r30, r24
    1d30:	e2 0f       	add	r30, r18
    1d32:	f3 1f       	adc	r31, r19
    1d34:	8d e2       	ldi	r24, 0x2D	; 45
    1d36:	80 83       	st	Z, r24
  }
 }

 /* Print from last to first (from biggest digit to the smallest)*/
 for (s8 i = local_u8Counter ; i>= 0 ; i--){
    1d38:	8e 81       	ldd	r24, Y+6	; 0x06
    1d3a:	89 83       	std	Y+1, r24	; 0x01
    1d3c:	10 c0       	rjmp	.+32     	; 0x1d5e <LCD_voidWriteNumber+0x154>
  LCD_voidsenddata(local_u8ArrNumber[i]);
    1d3e:	89 81       	ldd	r24, Y+1	; 0x01
    1d40:	28 2f       	mov	r18, r24
    1d42:	33 27       	eor	r19, r19
    1d44:	27 fd       	sbrc	r18, 7
    1d46:	30 95       	com	r19
    1d48:	ce 01       	movw	r24, r28
    1d4a:	07 96       	adiw	r24, 0x07	; 7
    1d4c:	fc 01       	movw	r30, r24
    1d4e:	e2 0f       	add	r30, r18
    1d50:	f3 1f       	adc	r31, r19
    1d52:	80 81       	ld	r24, Z
    1d54:	0e 94 36 0c 	call	0x186c	; 0x186c <LCD_voidsenddata>
   local_u8ArrNumber[local_u8Counter] = '-';
  }
 }

 /* Print from last to first (from biggest digit to the smallest)*/
 for (s8 i = local_u8Counter ; i>= 0 ; i--){
    1d58:	89 81       	ldd	r24, Y+1	; 0x01
    1d5a:	81 50       	subi	r24, 0x01	; 1
    1d5c:	89 83       	std	Y+1, r24	; 0x01
    1d5e:	89 81       	ldd	r24, Y+1	; 0x01
    1d60:	88 23       	and	r24, r24
    1d62:	6c f7       	brge	.-38     	; 0x1d3e <LCD_voidWriteNumber+0x134>
  LCD_voidsenddata(local_u8ArrNumber[i]);
 }
}
    1d64:	64 96       	adiw	r28, 0x14	; 20
    1d66:	0f b6       	in	r0, 0x3f	; 63
    1d68:	f8 94       	cli
    1d6a:	de bf       	out	0x3e, r29	; 62
    1d6c:	0f be       	out	0x3f, r0	; 63
    1d6e:	cd bf       	out	0x3d, r28	; 61
    1d70:	cf 91       	pop	r28
    1d72:	df 91       	pop	r29
    1d74:	1f 91       	pop	r17
    1d76:	0f 91       	pop	r16
    1d78:	08 95       	ret

00001d7a <GIE_voidEnable>:
#include "GIE_Interface.h"
#include "GIE_Reg.h"
#include "GIE_Cfg.h"

void GIE_voidEnable(void)
{
    1d7a:	df 93       	push	r29
    1d7c:	cf 93       	push	r28
    1d7e:	cd b7       	in	r28, 0x3d	; 61
    1d80:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG , SREG_I);
    1d82:	af e5       	ldi	r26, 0x5F	; 95
    1d84:	b0 e0       	ldi	r27, 0x00	; 0
    1d86:	ef e5       	ldi	r30, 0x5F	; 95
    1d88:	f0 e0       	ldi	r31, 0x00	; 0
    1d8a:	80 81       	ld	r24, Z
    1d8c:	80 68       	ori	r24, 0x80	; 128
    1d8e:	8c 93       	st	X, r24
}
    1d90:	cf 91       	pop	r28
    1d92:	df 91       	pop	r29
    1d94:	08 95       	ret

00001d96 <GIE_voidDisable>:

void GIE_voidDisable(void)
{
    1d96:	df 93       	push	r29
    1d98:	cf 93       	push	r28
    1d9a:	cd b7       	in	r28, 0x3d	; 61
    1d9c:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG , SREG_I);
    1d9e:	af e5       	ldi	r26, 0x5F	; 95
    1da0:	b0 e0       	ldi	r27, 0x00	; 0
    1da2:	ef e5       	ldi	r30, 0x5F	; 95
    1da4:	f0 e0       	ldi	r31, 0x00	; 0
    1da6:	80 81       	ld	r24, Z
    1da8:	8f 77       	andi	r24, 0x7F	; 127
    1daa:	8c 93       	st	X, r24
}
    1dac:	cf 91       	pop	r28
    1dae:	df 91       	pop	r29
    1db0:	08 95       	ret

00001db2 <Dio_voidSetPinDirection>:
#include "Dio_Private.h"
#include "Dio_Cfg.h"
#include "Dio_Reg.h"


void Dio_voidSetPinDirection (u8 Cpy_u8Port , u8 Cpy_u8Pin , u8 Cpy_u8Dirc){
    1db2:	df 93       	push	r29
    1db4:	cf 93       	push	r28
    1db6:	cd b7       	in	r28, 0x3d	; 61
    1db8:	de b7       	in	r29, 0x3e	; 62
    1dba:	27 97       	sbiw	r28, 0x07	; 7
    1dbc:	0f b6       	in	r0, 0x3f	; 63
    1dbe:	f8 94       	cli
    1dc0:	de bf       	out	0x3e, r29	; 62
    1dc2:	0f be       	out	0x3f, r0	; 63
    1dc4:	cd bf       	out	0x3d, r28	; 61
    1dc6:	89 83       	std	Y+1, r24	; 0x01
    1dc8:	6a 83       	std	Y+2, r22	; 0x02
    1dca:	4b 83       	std	Y+3, r20	; 0x03
	if (Cpy_u8Dirc == DIO_INPUT)
    1dcc:	8b 81       	ldd	r24, Y+3	; 0x03
    1dce:	88 23       	and	r24, r24
    1dd0:	09 f0       	breq	.+2      	; 0x1dd4 <Dio_voidSetPinDirection+0x22>
    1dd2:	74 c0       	rjmp	.+232    	; 0x1ebc <Dio_voidSetPinDirection+0x10a>
	{
		switch (Cpy_u8Port){
    1dd4:	89 81       	ldd	r24, Y+1	; 0x01
    1dd6:	28 2f       	mov	r18, r24
    1dd8:	30 e0       	ldi	r19, 0x00	; 0
    1dda:	3f 83       	std	Y+7, r19	; 0x07
    1ddc:	2e 83       	std	Y+6, r18	; 0x06
    1dde:	8e 81       	ldd	r24, Y+6	; 0x06
    1de0:	9f 81       	ldd	r25, Y+7	; 0x07
    1de2:	81 30       	cpi	r24, 0x01	; 1
    1de4:	91 05       	cpc	r25, r1
    1de6:	59 f1       	breq	.+86     	; 0x1e3e <Dio_voidSetPinDirection+0x8c>
    1de8:	2e 81       	ldd	r18, Y+6	; 0x06
    1dea:	3f 81       	ldd	r19, Y+7	; 0x07
    1dec:	22 30       	cpi	r18, 0x02	; 2
    1dee:	31 05       	cpc	r19, r1
    1df0:	2c f4       	brge	.+10     	; 0x1dfc <Dio_voidSetPinDirection+0x4a>
    1df2:	8e 81       	ldd	r24, Y+6	; 0x06
    1df4:	9f 81       	ldd	r25, Y+7	; 0x07
    1df6:	00 97       	sbiw	r24, 0x00	; 0
    1df8:	69 f0       	breq	.+26     	; 0x1e14 <Dio_voidSetPinDirection+0x62>
    1dfa:	d2 c0       	rjmp	.+420    	; 0x1fa0 <Dio_voidSetPinDirection+0x1ee>
    1dfc:	2e 81       	ldd	r18, Y+6	; 0x06
    1dfe:	3f 81       	ldd	r19, Y+7	; 0x07
    1e00:	22 30       	cpi	r18, 0x02	; 2
    1e02:	31 05       	cpc	r19, r1
    1e04:	89 f1       	breq	.+98     	; 0x1e68 <Dio_voidSetPinDirection+0xb6>
    1e06:	8e 81       	ldd	r24, Y+6	; 0x06
    1e08:	9f 81       	ldd	r25, Y+7	; 0x07
    1e0a:	83 30       	cpi	r24, 0x03	; 3
    1e0c:	91 05       	cpc	r25, r1
    1e0e:	09 f4       	brne	.+2      	; 0x1e12 <Dio_voidSetPinDirection+0x60>
    1e10:	40 c0       	rjmp	.+128    	; 0x1e92 <Dio_voidSetPinDirection+0xe0>
    1e12:	c6 c0       	rjmp	.+396    	; 0x1fa0 <Dio_voidSetPinDirection+0x1ee>
		 case DIO_PORTA : CLR_BIT(DDRA , Cpy_u8Pin) ; break;
    1e14:	aa e3       	ldi	r26, 0x3A	; 58
    1e16:	b0 e0       	ldi	r27, 0x00	; 0
    1e18:	ea e3       	ldi	r30, 0x3A	; 58
    1e1a:	f0 e0       	ldi	r31, 0x00	; 0
    1e1c:	80 81       	ld	r24, Z
    1e1e:	48 2f       	mov	r20, r24
    1e20:	8a 81       	ldd	r24, Y+2	; 0x02
    1e22:	28 2f       	mov	r18, r24
    1e24:	30 e0       	ldi	r19, 0x00	; 0
    1e26:	81 e0       	ldi	r24, 0x01	; 1
    1e28:	90 e0       	ldi	r25, 0x00	; 0
    1e2a:	02 2e       	mov	r0, r18
    1e2c:	02 c0       	rjmp	.+4      	; 0x1e32 <Dio_voidSetPinDirection+0x80>
    1e2e:	88 0f       	add	r24, r24
    1e30:	99 1f       	adc	r25, r25
    1e32:	0a 94       	dec	r0
    1e34:	e2 f7       	brpl	.-8      	; 0x1e2e <Dio_voidSetPinDirection+0x7c>
    1e36:	80 95       	com	r24
    1e38:	84 23       	and	r24, r20
    1e3a:	8c 93       	st	X, r24
    1e3c:	b1 c0       	rjmp	.+354    	; 0x1fa0 <Dio_voidSetPinDirection+0x1ee>
		 case DIO_PORTB : CLR_BIT(DDRB , Cpy_u8Pin); break;
    1e3e:	a7 e3       	ldi	r26, 0x37	; 55
    1e40:	b0 e0       	ldi	r27, 0x00	; 0
    1e42:	e7 e3       	ldi	r30, 0x37	; 55
    1e44:	f0 e0       	ldi	r31, 0x00	; 0
    1e46:	80 81       	ld	r24, Z
    1e48:	48 2f       	mov	r20, r24
    1e4a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e4c:	28 2f       	mov	r18, r24
    1e4e:	30 e0       	ldi	r19, 0x00	; 0
    1e50:	81 e0       	ldi	r24, 0x01	; 1
    1e52:	90 e0       	ldi	r25, 0x00	; 0
    1e54:	02 2e       	mov	r0, r18
    1e56:	02 c0       	rjmp	.+4      	; 0x1e5c <Dio_voidSetPinDirection+0xaa>
    1e58:	88 0f       	add	r24, r24
    1e5a:	99 1f       	adc	r25, r25
    1e5c:	0a 94       	dec	r0
    1e5e:	e2 f7       	brpl	.-8      	; 0x1e58 <Dio_voidSetPinDirection+0xa6>
    1e60:	80 95       	com	r24
    1e62:	84 23       	and	r24, r20
    1e64:	8c 93       	st	X, r24
    1e66:	9c c0       	rjmp	.+312    	; 0x1fa0 <Dio_voidSetPinDirection+0x1ee>
		 case DIO_PORTC : CLR_BIT(DDRC , Cpy_u8Pin); break;
    1e68:	a4 e3       	ldi	r26, 0x34	; 52
    1e6a:	b0 e0       	ldi	r27, 0x00	; 0
    1e6c:	e4 e3       	ldi	r30, 0x34	; 52
    1e6e:	f0 e0       	ldi	r31, 0x00	; 0
    1e70:	80 81       	ld	r24, Z
    1e72:	48 2f       	mov	r20, r24
    1e74:	8a 81       	ldd	r24, Y+2	; 0x02
    1e76:	28 2f       	mov	r18, r24
    1e78:	30 e0       	ldi	r19, 0x00	; 0
    1e7a:	81 e0       	ldi	r24, 0x01	; 1
    1e7c:	90 e0       	ldi	r25, 0x00	; 0
    1e7e:	02 2e       	mov	r0, r18
    1e80:	02 c0       	rjmp	.+4      	; 0x1e86 <Dio_voidSetPinDirection+0xd4>
    1e82:	88 0f       	add	r24, r24
    1e84:	99 1f       	adc	r25, r25
    1e86:	0a 94       	dec	r0
    1e88:	e2 f7       	brpl	.-8      	; 0x1e82 <Dio_voidSetPinDirection+0xd0>
    1e8a:	80 95       	com	r24
    1e8c:	84 23       	and	r24, r20
    1e8e:	8c 93       	st	X, r24
    1e90:	87 c0       	rjmp	.+270    	; 0x1fa0 <Dio_voidSetPinDirection+0x1ee>
		 case DIO_PORTD : CLR_BIT(DDRD , Cpy_u8Pin); break;
    1e92:	a1 e3       	ldi	r26, 0x31	; 49
    1e94:	b0 e0       	ldi	r27, 0x00	; 0
    1e96:	e1 e3       	ldi	r30, 0x31	; 49
    1e98:	f0 e0       	ldi	r31, 0x00	; 0
    1e9a:	80 81       	ld	r24, Z
    1e9c:	48 2f       	mov	r20, r24
    1e9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1ea0:	28 2f       	mov	r18, r24
    1ea2:	30 e0       	ldi	r19, 0x00	; 0
    1ea4:	81 e0       	ldi	r24, 0x01	; 1
    1ea6:	90 e0       	ldi	r25, 0x00	; 0
    1ea8:	02 2e       	mov	r0, r18
    1eaa:	02 c0       	rjmp	.+4      	; 0x1eb0 <Dio_voidSetPinDirection+0xfe>
    1eac:	88 0f       	add	r24, r24
    1eae:	99 1f       	adc	r25, r25
    1eb0:	0a 94       	dec	r0
    1eb2:	e2 f7       	brpl	.-8      	; 0x1eac <Dio_voidSetPinDirection+0xfa>
    1eb4:	80 95       	com	r24
    1eb6:	84 23       	and	r24, r20
    1eb8:	8c 93       	st	X, r24
    1eba:	72 c0       	rjmp	.+228    	; 0x1fa0 <Dio_voidSetPinDirection+0x1ee>
		}
	}
	else if (Cpy_u8Dirc == DIO_OUTPUT){
    1ebc:	8b 81       	ldd	r24, Y+3	; 0x03
    1ebe:	81 30       	cpi	r24, 0x01	; 1
    1ec0:	09 f0       	breq	.+2      	; 0x1ec4 <Dio_voidSetPinDirection+0x112>
    1ec2:	6e c0       	rjmp	.+220    	; 0x1fa0 <Dio_voidSetPinDirection+0x1ee>
		switch (Cpy_u8Port){
    1ec4:	89 81       	ldd	r24, Y+1	; 0x01
    1ec6:	28 2f       	mov	r18, r24
    1ec8:	30 e0       	ldi	r19, 0x00	; 0
    1eca:	3d 83       	std	Y+5, r19	; 0x05
    1ecc:	2c 83       	std	Y+4, r18	; 0x04
    1ece:	8c 81       	ldd	r24, Y+4	; 0x04
    1ed0:	9d 81       	ldd	r25, Y+5	; 0x05
    1ed2:	81 30       	cpi	r24, 0x01	; 1
    1ed4:	91 05       	cpc	r25, r1
    1ed6:	49 f1       	breq	.+82     	; 0x1f2a <Dio_voidSetPinDirection+0x178>
    1ed8:	2c 81       	ldd	r18, Y+4	; 0x04
    1eda:	3d 81       	ldd	r19, Y+5	; 0x05
    1edc:	22 30       	cpi	r18, 0x02	; 2
    1ede:	31 05       	cpc	r19, r1
    1ee0:	2c f4       	brge	.+10     	; 0x1eec <Dio_voidSetPinDirection+0x13a>
    1ee2:	8c 81       	ldd	r24, Y+4	; 0x04
    1ee4:	9d 81       	ldd	r25, Y+5	; 0x05
    1ee6:	00 97       	sbiw	r24, 0x00	; 0
    1ee8:	61 f0       	breq	.+24     	; 0x1f02 <Dio_voidSetPinDirection+0x150>
    1eea:	5a c0       	rjmp	.+180    	; 0x1fa0 <Dio_voidSetPinDirection+0x1ee>
    1eec:	2c 81       	ldd	r18, Y+4	; 0x04
    1eee:	3d 81       	ldd	r19, Y+5	; 0x05
    1ef0:	22 30       	cpi	r18, 0x02	; 2
    1ef2:	31 05       	cpc	r19, r1
    1ef4:	71 f1       	breq	.+92     	; 0x1f52 <Dio_voidSetPinDirection+0x1a0>
    1ef6:	8c 81       	ldd	r24, Y+4	; 0x04
    1ef8:	9d 81       	ldd	r25, Y+5	; 0x05
    1efa:	83 30       	cpi	r24, 0x03	; 3
    1efc:	91 05       	cpc	r25, r1
    1efe:	e9 f1       	breq	.+122    	; 0x1f7a <Dio_voidSetPinDirection+0x1c8>
    1f00:	4f c0       	rjmp	.+158    	; 0x1fa0 <Dio_voidSetPinDirection+0x1ee>
		 case DIO_PORTA : SET_BIT(DDRA , Cpy_u8Pin) ; break;
    1f02:	aa e3       	ldi	r26, 0x3A	; 58
    1f04:	b0 e0       	ldi	r27, 0x00	; 0
    1f06:	ea e3       	ldi	r30, 0x3A	; 58
    1f08:	f0 e0       	ldi	r31, 0x00	; 0
    1f0a:	80 81       	ld	r24, Z
    1f0c:	48 2f       	mov	r20, r24
    1f0e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f10:	28 2f       	mov	r18, r24
    1f12:	30 e0       	ldi	r19, 0x00	; 0
    1f14:	81 e0       	ldi	r24, 0x01	; 1
    1f16:	90 e0       	ldi	r25, 0x00	; 0
    1f18:	02 2e       	mov	r0, r18
    1f1a:	02 c0       	rjmp	.+4      	; 0x1f20 <Dio_voidSetPinDirection+0x16e>
    1f1c:	88 0f       	add	r24, r24
    1f1e:	99 1f       	adc	r25, r25
    1f20:	0a 94       	dec	r0
    1f22:	e2 f7       	brpl	.-8      	; 0x1f1c <Dio_voidSetPinDirection+0x16a>
    1f24:	84 2b       	or	r24, r20
    1f26:	8c 93       	st	X, r24
    1f28:	3b c0       	rjmp	.+118    	; 0x1fa0 <Dio_voidSetPinDirection+0x1ee>
		 case DIO_PORTB : SET_BIT(DDRB , Cpy_u8Pin); break;
    1f2a:	a7 e3       	ldi	r26, 0x37	; 55
    1f2c:	b0 e0       	ldi	r27, 0x00	; 0
    1f2e:	e7 e3       	ldi	r30, 0x37	; 55
    1f30:	f0 e0       	ldi	r31, 0x00	; 0
    1f32:	80 81       	ld	r24, Z
    1f34:	48 2f       	mov	r20, r24
    1f36:	8a 81       	ldd	r24, Y+2	; 0x02
    1f38:	28 2f       	mov	r18, r24
    1f3a:	30 e0       	ldi	r19, 0x00	; 0
    1f3c:	81 e0       	ldi	r24, 0x01	; 1
    1f3e:	90 e0       	ldi	r25, 0x00	; 0
    1f40:	02 2e       	mov	r0, r18
    1f42:	02 c0       	rjmp	.+4      	; 0x1f48 <Dio_voidSetPinDirection+0x196>
    1f44:	88 0f       	add	r24, r24
    1f46:	99 1f       	adc	r25, r25
    1f48:	0a 94       	dec	r0
    1f4a:	e2 f7       	brpl	.-8      	; 0x1f44 <Dio_voidSetPinDirection+0x192>
    1f4c:	84 2b       	or	r24, r20
    1f4e:	8c 93       	st	X, r24
    1f50:	27 c0       	rjmp	.+78     	; 0x1fa0 <Dio_voidSetPinDirection+0x1ee>
		 case DIO_PORTC : SET_BIT(DDRC , Cpy_u8Pin); break;
    1f52:	a4 e3       	ldi	r26, 0x34	; 52
    1f54:	b0 e0       	ldi	r27, 0x00	; 0
    1f56:	e4 e3       	ldi	r30, 0x34	; 52
    1f58:	f0 e0       	ldi	r31, 0x00	; 0
    1f5a:	80 81       	ld	r24, Z
    1f5c:	48 2f       	mov	r20, r24
    1f5e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f60:	28 2f       	mov	r18, r24
    1f62:	30 e0       	ldi	r19, 0x00	; 0
    1f64:	81 e0       	ldi	r24, 0x01	; 1
    1f66:	90 e0       	ldi	r25, 0x00	; 0
    1f68:	02 2e       	mov	r0, r18
    1f6a:	02 c0       	rjmp	.+4      	; 0x1f70 <Dio_voidSetPinDirection+0x1be>
    1f6c:	88 0f       	add	r24, r24
    1f6e:	99 1f       	adc	r25, r25
    1f70:	0a 94       	dec	r0
    1f72:	e2 f7       	brpl	.-8      	; 0x1f6c <Dio_voidSetPinDirection+0x1ba>
    1f74:	84 2b       	or	r24, r20
    1f76:	8c 93       	st	X, r24
    1f78:	13 c0       	rjmp	.+38     	; 0x1fa0 <Dio_voidSetPinDirection+0x1ee>
		 case DIO_PORTD : SET_BIT(DDRD , Cpy_u8Pin); break;
    1f7a:	a1 e3       	ldi	r26, 0x31	; 49
    1f7c:	b0 e0       	ldi	r27, 0x00	; 0
    1f7e:	e1 e3       	ldi	r30, 0x31	; 49
    1f80:	f0 e0       	ldi	r31, 0x00	; 0
    1f82:	80 81       	ld	r24, Z
    1f84:	48 2f       	mov	r20, r24
    1f86:	8a 81       	ldd	r24, Y+2	; 0x02
    1f88:	28 2f       	mov	r18, r24
    1f8a:	30 e0       	ldi	r19, 0x00	; 0
    1f8c:	81 e0       	ldi	r24, 0x01	; 1
    1f8e:	90 e0       	ldi	r25, 0x00	; 0
    1f90:	02 2e       	mov	r0, r18
    1f92:	02 c0       	rjmp	.+4      	; 0x1f98 <Dio_voidSetPinDirection+0x1e6>
    1f94:	88 0f       	add	r24, r24
    1f96:	99 1f       	adc	r25, r25
    1f98:	0a 94       	dec	r0
    1f9a:	e2 f7       	brpl	.-8      	; 0x1f94 <Dio_voidSetPinDirection+0x1e2>
    1f9c:	84 2b       	or	r24, r20
    1f9e:	8c 93       	st	X, r24
		}
	}
}
    1fa0:	27 96       	adiw	r28, 0x07	; 7
    1fa2:	0f b6       	in	r0, 0x3f	; 63
    1fa4:	f8 94       	cli
    1fa6:	de bf       	out	0x3e, r29	; 62
    1fa8:	0f be       	out	0x3f, r0	; 63
    1faa:	cd bf       	out	0x3d, r28	; 61
    1fac:	cf 91       	pop	r28
    1fae:	df 91       	pop	r29
    1fb0:	08 95       	ret

00001fb2 <Dio_voidSetPinValue>:
void Dio_voidSetPinValue (u8 Cpy_u8Port , u8 Cpy_u8Pin , u8 Cpy_u8Value){
    1fb2:	df 93       	push	r29
    1fb4:	cf 93       	push	r28
    1fb6:	cd b7       	in	r28, 0x3d	; 61
    1fb8:	de b7       	in	r29, 0x3e	; 62
    1fba:	27 97       	sbiw	r28, 0x07	; 7
    1fbc:	0f b6       	in	r0, 0x3f	; 63
    1fbe:	f8 94       	cli
    1fc0:	de bf       	out	0x3e, r29	; 62
    1fc2:	0f be       	out	0x3f, r0	; 63
    1fc4:	cd bf       	out	0x3d, r28	; 61
    1fc6:	89 83       	std	Y+1, r24	; 0x01
    1fc8:	6a 83       	std	Y+2, r22	; 0x02
    1fca:	4b 83       	std	Y+3, r20	; 0x03
	if (Cpy_u8Value == DIO_LOW)
    1fcc:	8b 81       	ldd	r24, Y+3	; 0x03
    1fce:	88 23       	and	r24, r24
    1fd0:	09 f0       	breq	.+2      	; 0x1fd4 <Dio_voidSetPinValue+0x22>
    1fd2:	74 c0       	rjmp	.+232    	; 0x20bc <Dio_voidSetPinValue+0x10a>
	{
		switch (Cpy_u8Port){
    1fd4:	89 81       	ldd	r24, Y+1	; 0x01
    1fd6:	28 2f       	mov	r18, r24
    1fd8:	30 e0       	ldi	r19, 0x00	; 0
    1fda:	3f 83       	std	Y+7, r19	; 0x07
    1fdc:	2e 83       	std	Y+6, r18	; 0x06
    1fde:	8e 81       	ldd	r24, Y+6	; 0x06
    1fe0:	9f 81       	ldd	r25, Y+7	; 0x07
    1fe2:	81 30       	cpi	r24, 0x01	; 1
    1fe4:	91 05       	cpc	r25, r1
    1fe6:	59 f1       	breq	.+86     	; 0x203e <Dio_voidSetPinValue+0x8c>
    1fe8:	2e 81       	ldd	r18, Y+6	; 0x06
    1fea:	3f 81       	ldd	r19, Y+7	; 0x07
    1fec:	22 30       	cpi	r18, 0x02	; 2
    1fee:	31 05       	cpc	r19, r1
    1ff0:	2c f4       	brge	.+10     	; 0x1ffc <Dio_voidSetPinValue+0x4a>
    1ff2:	8e 81       	ldd	r24, Y+6	; 0x06
    1ff4:	9f 81       	ldd	r25, Y+7	; 0x07
    1ff6:	00 97       	sbiw	r24, 0x00	; 0
    1ff8:	69 f0       	breq	.+26     	; 0x2014 <Dio_voidSetPinValue+0x62>
    1ffa:	d2 c0       	rjmp	.+420    	; 0x21a0 <Dio_voidSetPinValue+0x1ee>
    1ffc:	2e 81       	ldd	r18, Y+6	; 0x06
    1ffe:	3f 81       	ldd	r19, Y+7	; 0x07
    2000:	22 30       	cpi	r18, 0x02	; 2
    2002:	31 05       	cpc	r19, r1
    2004:	89 f1       	breq	.+98     	; 0x2068 <Dio_voidSetPinValue+0xb6>
    2006:	8e 81       	ldd	r24, Y+6	; 0x06
    2008:	9f 81       	ldd	r25, Y+7	; 0x07
    200a:	83 30       	cpi	r24, 0x03	; 3
    200c:	91 05       	cpc	r25, r1
    200e:	09 f4       	brne	.+2      	; 0x2012 <Dio_voidSetPinValue+0x60>
    2010:	40 c0       	rjmp	.+128    	; 0x2092 <Dio_voidSetPinValue+0xe0>
    2012:	c6 c0       	rjmp	.+396    	; 0x21a0 <Dio_voidSetPinValue+0x1ee>
		 case DIO_PORTA : CLR_BIT(PORTA , Cpy_u8Pin) ; break;
    2014:	ab e3       	ldi	r26, 0x3B	; 59
    2016:	b0 e0       	ldi	r27, 0x00	; 0
    2018:	eb e3       	ldi	r30, 0x3B	; 59
    201a:	f0 e0       	ldi	r31, 0x00	; 0
    201c:	80 81       	ld	r24, Z
    201e:	48 2f       	mov	r20, r24
    2020:	8a 81       	ldd	r24, Y+2	; 0x02
    2022:	28 2f       	mov	r18, r24
    2024:	30 e0       	ldi	r19, 0x00	; 0
    2026:	81 e0       	ldi	r24, 0x01	; 1
    2028:	90 e0       	ldi	r25, 0x00	; 0
    202a:	02 2e       	mov	r0, r18
    202c:	02 c0       	rjmp	.+4      	; 0x2032 <Dio_voidSetPinValue+0x80>
    202e:	88 0f       	add	r24, r24
    2030:	99 1f       	adc	r25, r25
    2032:	0a 94       	dec	r0
    2034:	e2 f7       	brpl	.-8      	; 0x202e <Dio_voidSetPinValue+0x7c>
    2036:	80 95       	com	r24
    2038:	84 23       	and	r24, r20
    203a:	8c 93       	st	X, r24
    203c:	b1 c0       	rjmp	.+354    	; 0x21a0 <Dio_voidSetPinValue+0x1ee>
		 case DIO_PORTB : CLR_BIT(PORTB , Cpy_u8Pin); break;
    203e:	a8 e3       	ldi	r26, 0x38	; 56
    2040:	b0 e0       	ldi	r27, 0x00	; 0
    2042:	e8 e3       	ldi	r30, 0x38	; 56
    2044:	f0 e0       	ldi	r31, 0x00	; 0
    2046:	80 81       	ld	r24, Z
    2048:	48 2f       	mov	r20, r24
    204a:	8a 81       	ldd	r24, Y+2	; 0x02
    204c:	28 2f       	mov	r18, r24
    204e:	30 e0       	ldi	r19, 0x00	; 0
    2050:	81 e0       	ldi	r24, 0x01	; 1
    2052:	90 e0       	ldi	r25, 0x00	; 0
    2054:	02 2e       	mov	r0, r18
    2056:	02 c0       	rjmp	.+4      	; 0x205c <Dio_voidSetPinValue+0xaa>
    2058:	88 0f       	add	r24, r24
    205a:	99 1f       	adc	r25, r25
    205c:	0a 94       	dec	r0
    205e:	e2 f7       	brpl	.-8      	; 0x2058 <Dio_voidSetPinValue+0xa6>
    2060:	80 95       	com	r24
    2062:	84 23       	and	r24, r20
    2064:	8c 93       	st	X, r24
    2066:	9c c0       	rjmp	.+312    	; 0x21a0 <Dio_voidSetPinValue+0x1ee>
		 case DIO_PORTC : CLR_BIT(PORTC , Cpy_u8Pin); break;
    2068:	a5 e3       	ldi	r26, 0x35	; 53
    206a:	b0 e0       	ldi	r27, 0x00	; 0
    206c:	e5 e3       	ldi	r30, 0x35	; 53
    206e:	f0 e0       	ldi	r31, 0x00	; 0
    2070:	80 81       	ld	r24, Z
    2072:	48 2f       	mov	r20, r24
    2074:	8a 81       	ldd	r24, Y+2	; 0x02
    2076:	28 2f       	mov	r18, r24
    2078:	30 e0       	ldi	r19, 0x00	; 0
    207a:	81 e0       	ldi	r24, 0x01	; 1
    207c:	90 e0       	ldi	r25, 0x00	; 0
    207e:	02 2e       	mov	r0, r18
    2080:	02 c0       	rjmp	.+4      	; 0x2086 <Dio_voidSetPinValue+0xd4>
    2082:	88 0f       	add	r24, r24
    2084:	99 1f       	adc	r25, r25
    2086:	0a 94       	dec	r0
    2088:	e2 f7       	brpl	.-8      	; 0x2082 <Dio_voidSetPinValue+0xd0>
    208a:	80 95       	com	r24
    208c:	84 23       	and	r24, r20
    208e:	8c 93       	st	X, r24
    2090:	87 c0       	rjmp	.+270    	; 0x21a0 <Dio_voidSetPinValue+0x1ee>
		 case DIO_PORTD : CLR_BIT(PORTD , Cpy_u8Pin); break;
    2092:	a2 e3       	ldi	r26, 0x32	; 50
    2094:	b0 e0       	ldi	r27, 0x00	; 0
    2096:	e2 e3       	ldi	r30, 0x32	; 50
    2098:	f0 e0       	ldi	r31, 0x00	; 0
    209a:	80 81       	ld	r24, Z
    209c:	48 2f       	mov	r20, r24
    209e:	8a 81       	ldd	r24, Y+2	; 0x02
    20a0:	28 2f       	mov	r18, r24
    20a2:	30 e0       	ldi	r19, 0x00	; 0
    20a4:	81 e0       	ldi	r24, 0x01	; 1
    20a6:	90 e0       	ldi	r25, 0x00	; 0
    20a8:	02 2e       	mov	r0, r18
    20aa:	02 c0       	rjmp	.+4      	; 0x20b0 <Dio_voidSetPinValue+0xfe>
    20ac:	88 0f       	add	r24, r24
    20ae:	99 1f       	adc	r25, r25
    20b0:	0a 94       	dec	r0
    20b2:	e2 f7       	brpl	.-8      	; 0x20ac <Dio_voidSetPinValue+0xfa>
    20b4:	80 95       	com	r24
    20b6:	84 23       	and	r24, r20
    20b8:	8c 93       	st	X, r24
    20ba:	72 c0       	rjmp	.+228    	; 0x21a0 <Dio_voidSetPinValue+0x1ee>
		}
	}
	else if (Cpy_u8Value == DIO_HIGH){
    20bc:	8b 81       	ldd	r24, Y+3	; 0x03
    20be:	81 30       	cpi	r24, 0x01	; 1
    20c0:	09 f0       	breq	.+2      	; 0x20c4 <Dio_voidSetPinValue+0x112>
    20c2:	6e c0       	rjmp	.+220    	; 0x21a0 <Dio_voidSetPinValue+0x1ee>
		switch (Cpy_u8Port){
    20c4:	89 81       	ldd	r24, Y+1	; 0x01
    20c6:	28 2f       	mov	r18, r24
    20c8:	30 e0       	ldi	r19, 0x00	; 0
    20ca:	3d 83       	std	Y+5, r19	; 0x05
    20cc:	2c 83       	std	Y+4, r18	; 0x04
    20ce:	8c 81       	ldd	r24, Y+4	; 0x04
    20d0:	9d 81       	ldd	r25, Y+5	; 0x05
    20d2:	81 30       	cpi	r24, 0x01	; 1
    20d4:	91 05       	cpc	r25, r1
    20d6:	49 f1       	breq	.+82     	; 0x212a <Dio_voidSetPinValue+0x178>
    20d8:	2c 81       	ldd	r18, Y+4	; 0x04
    20da:	3d 81       	ldd	r19, Y+5	; 0x05
    20dc:	22 30       	cpi	r18, 0x02	; 2
    20de:	31 05       	cpc	r19, r1
    20e0:	2c f4       	brge	.+10     	; 0x20ec <Dio_voidSetPinValue+0x13a>
    20e2:	8c 81       	ldd	r24, Y+4	; 0x04
    20e4:	9d 81       	ldd	r25, Y+5	; 0x05
    20e6:	00 97       	sbiw	r24, 0x00	; 0
    20e8:	61 f0       	breq	.+24     	; 0x2102 <Dio_voidSetPinValue+0x150>
    20ea:	5a c0       	rjmp	.+180    	; 0x21a0 <Dio_voidSetPinValue+0x1ee>
    20ec:	2c 81       	ldd	r18, Y+4	; 0x04
    20ee:	3d 81       	ldd	r19, Y+5	; 0x05
    20f0:	22 30       	cpi	r18, 0x02	; 2
    20f2:	31 05       	cpc	r19, r1
    20f4:	71 f1       	breq	.+92     	; 0x2152 <Dio_voidSetPinValue+0x1a0>
    20f6:	8c 81       	ldd	r24, Y+4	; 0x04
    20f8:	9d 81       	ldd	r25, Y+5	; 0x05
    20fa:	83 30       	cpi	r24, 0x03	; 3
    20fc:	91 05       	cpc	r25, r1
    20fe:	e9 f1       	breq	.+122    	; 0x217a <Dio_voidSetPinValue+0x1c8>
    2100:	4f c0       	rjmp	.+158    	; 0x21a0 <Dio_voidSetPinValue+0x1ee>
		 case DIO_PORTA : SET_BIT(PORTA , Cpy_u8Pin) ; break;
    2102:	ab e3       	ldi	r26, 0x3B	; 59
    2104:	b0 e0       	ldi	r27, 0x00	; 0
    2106:	eb e3       	ldi	r30, 0x3B	; 59
    2108:	f0 e0       	ldi	r31, 0x00	; 0
    210a:	80 81       	ld	r24, Z
    210c:	48 2f       	mov	r20, r24
    210e:	8a 81       	ldd	r24, Y+2	; 0x02
    2110:	28 2f       	mov	r18, r24
    2112:	30 e0       	ldi	r19, 0x00	; 0
    2114:	81 e0       	ldi	r24, 0x01	; 1
    2116:	90 e0       	ldi	r25, 0x00	; 0
    2118:	02 2e       	mov	r0, r18
    211a:	02 c0       	rjmp	.+4      	; 0x2120 <Dio_voidSetPinValue+0x16e>
    211c:	88 0f       	add	r24, r24
    211e:	99 1f       	adc	r25, r25
    2120:	0a 94       	dec	r0
    2122:	e2 f7       	brpl	.-8      	; 0x211c <Dio_voidSetPinValue+0x16a>
    2124:	84 2b       	or	r24, r20
    2126:	8c 93       	st	X, r24
    2128:	3b c0       	rjmp	.+118    	; 0x21a0 <Dio_voidSetPinValue+0x1ee>
		 case DIO_PORTB : SET_BIT(PORTB , Cpy_u8Pin); break;
    212a:	a8 e3       	ldi	r26, 0x38	; 56
    212c:	b0 e0       	ldi	r27, 0x00	; 0
    212e:	e8 e3       	ldi	r30, 0x38	; 56
    2130:	f0 e0       	ldi	r31, 0x00	; 0
    2132:	80 81       	ld	r24, Z
    2134:	48 2f       	mov	r20, r24
    2136:	8a 81       	ldd	r24, Y+2	; 0x02
    2138:	28 2f       	mov	r18, r24
    213a:	30 e0       	ldi	r19, 0x00	; 0
    213c:	81 e0       	ldi	r24, 0x01	; 1
    213e:	90 e0       	ldi	r25, 0x00	; 0
    2140:	02 2e       	mov	r0, r18
    2142:	02 c0       	rjmp	.+4      	; 0x2148 <Dio_voidSetPinValue+0x196>
    2144:	88 0f       	add	r24, r24
    2146:	99 1f       	adc	r25, r25
    2148:	0a 94       	dec	r0
    214a:	e2 f7       	brpl	.-8      	; 0x2144 <Dio_voidSetPinValue+0x192>
    214c:	84 2b       	or	r24, r20
    214e:	8c 93       	st	X, r24
    2150:	27 c0       	rjmp	.+78     	; 0x21a0 <Dio_voidSetPinValue+0x1ee>
		 case DIO_PORTC : SET_BIT(PORTC , Cpy_u8Pin); break;
    2152:	a5 e3       	ldi	r26, 0x35	; 53
    2154:	b0 e0       	ldi	r27, 0x00	; 0
    2156:	e5 e3       	ldi	r30, 0x35	; 53
    2158:	f0 e0       	ldi	r31, 0x00	; 0
    215a:	80 81       	ld	r24, Z
    215c:	48 2f       	mov	r20, r24
    215e:	8a 81       	ldd	r24, Y+2	; 0x02
    2160:	28 2f       	mov	r18, r24
    2162:	30 e0       	ldi	r19, 0x00	; 0
    2164:	81 e0       	ldi	r24, 0x01	; 1
    2166:	90 e0       	ldi	r25, 0x00	; 0
    2168:	02 2e       	mov	r0, r18
    216a:	02 c0       	rjmp	.+4      	; 0x2170 <Dio_voidSetPinValue+0x1be>
    216c:	88 0f       	add	r24, r24
    216e:	99 1f       	adc	r25, r25
    2170:	0a 94       	dec	r0
    2172:	e2 f7       	brpl	.-8      	; 0x216c <Dio_voidSetPinValue+0x1ba>
    2174:	84 2b       	or	r24, r20
    2176:	8c 93       	st	X, r24
    2178:	13 c0       	rjmp	.+38     	; 0x21a0 <Dio_voidSetPinValue+0x1ee>
		 case DIO_PORTD : SET_BIT(PORTD , Cpy_u8Pin); break;
    217a:	a2 e3       	ldi	r26, 0x32	; 50
    217c:	b0 e0       	ldi	r27, 0x00	; 0
    217e:	e2 e3       	ldi	r30, 0x32	; 50
    2180:	f0 e0       	ldi	r31, 0x00	; 0
    2182:	80 81       	ld	r24, Z
    2184:	48 2f       	mov	r20, r24
    2186:	8a 81       	ldd	r24, Y+2	; 0x02
    2188:	28 2f       	mov	r18, r24
    218a:	30 e0       	ldi	r19, 0x00	; 0
    218c:	81 e0       	ldi	r24, 0x01	; 1
    218e:	90 e0       	ldi	r25, 0x00	; 0
    2190:	02 2e       	mov	r0, r18
    2192:	02 c0       	rjmp	.+4      	; 0x2198 <Dio_voidSetPinValue+0x1e6>
    2194:	88 0f       	add	r24, r24
    2196:	99 1f       	adc	r25, r25
    2198:	0a 94       	dec	r0
    219a:	e2 f7       	brpl	.-8      	; 0x2194 <Dio_voidSetPinValue+0x1e2>
    219c:	84 2b       	or	r24, r20
    219e:	8c 93       	st	X, r24
		}
	}
}
    21a0:	27 96       	adiw	r28, 0x07	; 7
    21a2:	0f b6       	in	r0, 0x3f	; 63
    21a4:	f8 94       	cli
    21a6:	de bf       	out	0x3e, r29	; 62
    21a8:	0f be       	out	0x3f, r0	; 63
    21aa:	cd bf       	out	0x3d, r28	; 61
    21ac:	cf 91       	pop	r28
    21ae:	df 91       	pop	r29
    21b0:	08 95       	ret

000021b2 <Dio_u8GetPinValue>:
u8 Dio_u8GetPinValue (u8 Cpy_u8Port , u8 Cpy_u8Pin){
    21b2:	df 93       	push	r29
    21b4:	cf 93       	push	r28
    21b6:	00 d0       	rcall	.+0      	; 0x21b8 <Dio_u8GetPinValue+0x6>
    21b8:	00 d0       	rcall	.+0      	; 0x21ba <Dio_u8GetPinValue+0x8>
    21ba:	0f 92       	push	r0
    21bc:	cd b7       	in	r28, 0x3d	; 61
    21be:	de b7       	in	r29, 0x3e	; 62
    21c0:	8a 83       	std	Y+2, r24	; 0x02
    21c2:	6b 83       	std	Y+3, r22	; 0x03
	u8 local_u8InValue = 0 ;
    21c4:	19 82       	std	Y+1, r1	; 0x01
	switch (Cpy_u8Port){
    21c6:	8a 81       	ldd	r24, Y+2	; 0x02
    21c8:	28 2f       	mov	r18, r24
    21ca:	30 e0       	ldi	r19, 0x00	; 0
    21cc:	3d 83       	std	Y+5, r19	; 0x05
    21ce:	2c 83       	std	Y+4, r18	; 0x04
    21d0:	4c 81       	ldd	r20, Y+4	; 0x04
    21d2:	5d 81       	ldd	r21, Y+5	; 0x05
    21d4:	41 30       	cpi	r20, 0x01	; 1
    21d6:	51 05       	cpc	r21, r1
    21d8:	41 f1       	breq	.+80     	; 0x222a <Dio_u8GetPinValue+0x78>
    21da:	8c 81       	ldd	r24, Y+4	; 0x04
    21dc:	9d 81       	ldd	r25, Y+5	; 0x05
    21de:	82 30       	cpi	r24, 0x02	; 2
    21e0:	91 05       	cpc	r25, r1
    21e2:	34 f4       	brge	.+12     	; 0x21f0 <Dio_u8GetPinValue+0x3e>
    21e4:	2c 81       	ldd	r18, Y+4	; 0x04
    21e6:	3d 81       	ldd	r19, Y+5	; 0x05
    21e8:	21 15       	cp	r18, r1
    21ea:	31 05       	cpc	r19, r1
    21ec:	61 f0       	breq	.+24     	; 0x2206 <Dio_u8GetPinValue+0x54>
    21ee:	52 c0       	rjmp	.+164    	; 0x2294 <Dio_u8GetPinValue+0xe2>
    21f0:	4c 81       	ldd	r20, Y+4	; 0x04
    21f2:	5d 81       	ldd	r21, Y+5	; 0x05
    21f4:	42 30       	cpi	r20, 0x02	; 2
    21f6:	51 05       	cpc	r21, r1
    21f8:	51 f1       	breq	.+84     	; 0x224e <Dio_u8GetPinValue+0x9c>
    21fa:	8c 81       	ldd	r24, Y+4	; 0x04
    21fc:	9d 81       	ldd	r25, Y+5	; 0x05
    21fe:	83 30       	cpi	r24, 0x03	; 3
    2200:	91 05       	cpc	r25, r1
    2202:	b9 f1       	breq	.+110    	; 0x2272 <Dio_u8GetPinValue+0xc0>
    2204:	47 c0       	rjmp	.+142    	; 0x2294 <Dio_u8GetPinValue+0xe2>
	 case DIO_PORTA : local_u8InValue = GET_BIT(PINA , Cpy_u8Pin) ; break;
    2206:	e9 e3       	ldi	r30, 0x39	; 57
    2208:	f0 e0       	ldi	r31, 0x00	; 0
    220a:	80 81       	ld	r24, Z
    220c:	28 2f       	mov	r18, r24
    220e:	30 e0       	ldi	r19, 0x00	; 0
    2210:	8b 81       	ldd	r24, Y+3	; 0x03
    2212:	88 2f       	mov	r24, r24
    2214:	90 e0       	ldi	r25, 0x00	; 0
    2216:	a9 01       	movw	r20, r18
    2218:	02 c0       	rjmp	.+4      	; 0x221e <Dio_u8GetPinValue+0x6c>
    221a:	55 95       	asr	r21
    221c:	47 95       	ror	r20
    221e:	8a 95       	dec	r24
    2220:	e2 f7       	brpl	.-8      	; 0x221a <Dio_u8GetPinValue+0x68>
    2222:	ca 01       	movw	r24, r20
    2224:	81 70       	andi	r24, 0x01	; 1
    2226:	89 83       	std	Y+1, r24	; 0x01
    2228:	35 c0       	rjmp	.+106    	; 0x2294 <Dio_u8GetPinValue+0xe2>
	 case DIO_PORTB : local_u8InValue = GET_BIT(PINB , Cpy_u8Pin); break;
    222a:	e6 e3       	ldi	r30, 0x36	; 54
    222c:	f0 e0       	ldi	r31, 0x00	; 0
    222e:	80 81       	ld	r24, Z
    2230:	28 2f       	mov	r18, r24
    2232:	30 e0       	ldi	r19, 0x00	; 0
    2234:	8b 81       	ldd	r24, Y+3	; 0x03
    2236:	88 2f       	mov	r24, r24
    2238:	90 e0       	ldi	r25, 0x00	; 0
    223a:	a9 01       	movw	r20, r18
    223c:	02 c0       	rjmp	.+4      	; 0x2242 <Dio_u8GetPinValue+0x90>
    223e:	55 95       	asr	r21
    2240:	47 95       	ror	r20
    2242:	8a 95       	dec	r24
    2244:	e2 f7       	brpl	.-8      	; 0x223e <Dio_u8GetPinValue+0x8c>
    2246:	ca 01       	movw	r24, r20
    2248:	81 70       	andi	r24, 0x01	; 1
    224a:	89 83       	std	Y+1, r24	; 0x01
    224c:	23 c0       	rjmp	.+70     	; 0x2294 <Dio_u8GetPinValue+0xe2>
	 case DIO_PORTC : local_u8InValue = GET_BIT(PINC , Cpy_u8Pin); break;
    224e:	e3 e3       	ldi	r30, 0x33	; 51
    2250:	f0 e0       	ldi	r31, 0x00	; 0
    2252:	80 81       	ld	r24, Z
    2254:	28 2f       	mov	r18, r24
    2256:	30 e0       	ldi	r19, 0x00	; 0
    2258:	8b 81       	ldd	r24, Y+3	; 0x03
    225a:	88 2f       	mov	r24, r24
    225c:	90 e0       	ldi	r25, 0x00	; 0
    225e:	a9 01       	movw	r20, r18
    2260:	02 c0       	rjmp	.+4      	; 0x2266 <Dio_u8GetPinValue+0xb4>
    2262:	55 95       	asr	r21
    2264:	47 95       	ror	r20
    2266:	8a 95       	dec	r24
    2268:	e2 f7       	brpl	.-8      	; 0x2262 <Dio_u8GetPinValue+0xb0>
    226a:	ca 01       	movw	r24, r20
    226c:	81 70       	andi	r24, 0x01	; 1
    226e:	89 83       	std	Y+1, r24	; 0x01
    2270:	11 c0       	rjmp	.+34     	; 0x2294 <Dio_u8GetPinValue+0xe2>
	 case DIO_PORTD : local_u8InValue = GET_BIT(PIND , Cpy_u8Pin); break;
    2272:	e0 e3       	ldi	r30, 0x30	; 48
    2274:	f0 e0       	ldi	r31, 0x00	; 0
    2276:	80 81       	ld	r24, Z
    2278:	28 2f       	mov	r18, r24
    227a:	30 e0       	ldi	r19, 0x00	; 0
    227c:	8b 81       	ldd	r24, Y+3	; 0x03
    227e:	88 2f       	mov	r24, r24
    2280:	90 e0       	ldi	r25, 0x00	; 0
    2282:	a9 01       	movw	r20, r18
    2284:	02 c0       	rjmp	.+4      	; 0x228a <Dio_u8GetPinValue+0xd8>
    2286:	55 95       	asr	r21
    2288:	47 95       	ror	r20
    228a:	8a 95       	dec	r24
    228c:	e2 f7       	brpl	.-8      	; 0x2286 <Dio_u8GetPinValue+0xd4>
    228e:	ca 01       	movw	r24, r20
    2290:	81 70       	andi	r24, 0x01	; 1
    2292:	89 83       	std	Y+1, r24	; 0x01
	}

	return local_u8InValue ;
    2294:	89 81       	ldd	r24, Y+1	; 0x01
}
    2296:	0f 90       	pop	r0
    2298:	0f 90       	pop	r0
    229a:	0f 90       	pop	r0
    229c:	0f 90       	pop	r0
    229e:	0f 90       	pop	r0
    22a0:	cf 91       	pop	r28
    22a2:	df 91       	pop	r29
    22a4:	08 95       	ret

000022a6 <Dio_voidSetPortDirection>:


void Dio_voidSetPortDirection (u8 Cpy_u8Port , u8 Cpy_u8Dirc)
{
    22a6:	df 93       	push	r29
    22a8:	cf 93       	push	r28
    22aa:	00 d0       	rcall	.+0      	; 0x22ac <Dio_voidSetPortDirection+0x6>
    22ac:	00 d0       	rcall	.+0      	; 0x22ae <Dio_voidSetPortDirection+0x8>
    22ae:	00 d0       	rcall	.+0      	; 0x22b0 <Dio_voidSetPortDirection+0xa>
    22b0:	cd b7       	in	r28, 0x3d	; 61
    22b2:	de b7       	in	r29, 0x3e	; 62
    22b4:	89 83       	std	Y+1, r24	; 0x01
    22b6:	6a 83       	std	Y+2, r22	; 0x02
	if (Cpy_u8Dirc == DIO_INPUT)
    22b8:	8a 81       	ldd	r24, Y+2	; 0x02
    22ba:	88 23       	and	r24, r24
    22bc:	79 f5       	brne	.+94     	; 0x231c <Dio_voidSetPortDirection+0x76>
	{
		switch (Cpy_u8Port)
    22be:	89 81       	ldd	r24, Y+1	; 0x01
    22c0:	28 2f       	mov	r18, r24
    22c2:	30 e0       	ldi	r19, 0x00	; 0
    22c4:	3e 83       	std	Y+6, r19	; 0x06
    22c6:	2d 83       	std	Y+5, r18	; 0x05
    22c8:	8d 81       	ldd	r24, Y+5	; 0x05
    22ca:	9e 81       	ldd	r25, Y+6	; 0x06
    22cc:	81 30       	cpi	r24, 0x01	; 1
    22ce:	91 05       	cpc	r25, r1
    22d0:	c9 f0       	breq	.+50     	; 0x2304 <Dio_voidSetPortDirection+0x5e>
    22d2:	2d 81       	ldd	r18, Y+5	; 0x05
    22d4:	3e 81       	ldd	r19, Y+6	; 0x06
    22d6:	22 30       	cpi	r18, 0x02	; 2
    22d8:	31 05       	cpc	r19, r1
    22da:	2c f4       	brge	.+10     	; 0x22e6 <Dio_voidSetPortDirection+0x40>
    22dc:	8d 81       	ldd	r24, Y+5	; 0x05
    22de:	9e 81       	ldd	r25, Y+6	; 0x06
    22e0:	00 97       	sbiw	r24, 0x00	; 0
    22e2:	61 f0       	breq	.+24     	; 0x22fc <Dio_voidSetPortDirection+0x56>
    22e4:	50 c0       	rjmp	.+160    	; 0x2386 <Dio_voidSetPortDirection+0xe0>
    22e6:	2d 81       	ldd	r18, Y+5	; 0x05
    22e8:	3e 81       	ldd	r19, Y+6	; 0x06
    22ea:	22 30       	cpi	r18, 0x02	; 2
    22ec:	31 05       	cpc	r19, r1
    22ee:	71 f0       	breq	.+28     	; 0x230c <Dio_voidSetPortDirection+0x66>
    22f0:	8d 81       	ldd	r24, Y+5	; 0x05
    22f2:	9e 81       	ldd	r25, Y+6	; 0x06
    22f4:	83 30       	cpi	r24, 0x03	; 3
    22f6:	91 05       	cpc	r25, r1
    22f8:	69 f0       	breq	.+26     	; 0x2314 <Dio_voidSetPortDirection+0x6e>
    22fa:	45 c0       	rjmp	.+138    	; 0x2386 <Dio_voidSetPortDirection+0xe0>
		{
		 case DIO_PORTA : DDRA = 0x00 ; break;
    22fc:	ea e3       	ldi	r30, 0x3A	; 58
    22fe:	f0 e0       	ldi	r31, 0x00	; 0
    2300:	10 82       	st	Z, r1
    2302:	41 c0       	rjmp	.+130    	; 0x2386 <Dio_voidSetPortDirection+0xe0>
		 case DIO_PORTB : DDRB = 0x00 ; break;
    2304:	e7 e3       	ldi	r30, 0x37	; 55
    2306:	f0 e0       	ldi	r31, 0x00	; 0
    2308:	10 82       	st	Z, r1
    230a:	3d c0       	rjmp	.+122    	; 0x2386 <Dio_voidSetPortDirection+0xe0>
		 case DIO_PORTC : DDRC = 0x00 ; break;
    230c:	e4 e3       	ldi	r30, 0x34	; 52
    230e:	f0 e0       	ldi	r31, 0x00	; 0
    2310:	10 82       	st	Z, r1
    2312:	39 c0       	rjmp	.+114    	; 0x2386 <Dio_voidSetPortDirection+0xe0>
		 case DIO_PORTD : DDRD = 0x00 ; break;
    2314:	e1 e3       	ldi	r30, 0x31	; 49
    2316:	f0 e0       	ldi	r31, 0x00	; 0
    2318:	10 82       	st	Z, r1
    231a:	35 c0       	rjmp	.+106    	; 0x2386 <Dio_voidSetPortDirection+0xe0>
		}
	}
	else if (Cpy_u8Dirc == DIO_OUTPUT)
    231c:	8a 81       	ldd	r24, Y+2	; 0x02
    231e:	81 30       	cpi	r24, 0x01	; 1
    2320:	91 f5       	brne	.+100    	; 0x2386 <Dio_voidSetPortDirection+0xe0>
	{
		switch (Cpy_u8Port)
    2322:	89 81       	ldd	r24, Y+1	; 0x01
    2324:	28 2f       	mov	r18, r24
    2326:	30 e0       	ldi	r19, 0x00	; 0
    2328:	3c 83       	std	Y+4, r19	; 0x04
    232a:	2b 83       	std	Y+3, r18	; 0x03
    232c:	8b 81       	ldd	r24, Y+3	; 0x03
    232e:	9c 81       	ldd	r25, Y+4	; 0x04
    2330:	81 30       	cpi	r24, 0x01	; 1
    2332:	91 05       	cpc	r25, r1
    2334:	d1 f0       	breq	.+52     	; 0x236a <Dio_voidSetPortDirection+0xc4>
    2336:	2b 81       	ldd	r18, Y+3	; 0x03
    2338:	3c 81       	ldd	r19, Y+4	; 0x04
    233a:	22 30       	cpi	r18, 0x02	; 2
    233c:	31 05       	cpc	r19, r1
    233e:	2c f4       	brge	.+10     	; 0x234a <Dio_voidSetPortDirection+0xa4>
    2340:	8b 81       	ldd	r24, Y+3	; 0x03
    2342:	9c 81       	ldd	r25, Y+4	; 0x04
    2344:	00 97       	sbiw	r24, 0x00	; 0
    2346:	61 f0       	breq	.+24     	; 0x2360 <Dio_voidSetPortDirection+0xba>
    2348:	1e c0       	rjmp	.+60     	; 0x2386 <Dio_voidSetPortDirection+0xe0>
    234a:	2b 81       	ldd	r18, Y+3	; 0x03
    234c:	3c 81       	ldd	r19, Y+4	; 0x04
    234e:	22 30       	cpi	r18, 0x02	; 2
    2350:	31 05       	cpc	r19, r1
    2352:	81 f0       	breq	.+32     	; 0x2374 <Dio_voidSetPortDirection+0xce>
    2354:	8b 81       	ldd	r24, Y+3	; 0x03
    2356:	9c 81       	ldd	r25, Y+4	; 0x04
    2358:	83 30       	cpi	r24, 0x03	; 3
    235a:	91 05       	cpc	r25, r1
    235c:	81 f0       	breq	.+32     	; 0x237e <Dio_voidSetPortDirection+0xd8>
    235e:	13 c0       	rjmp	.+38     	; 0x2386 <Dio_voidSetPortDirection+0xe0>
		{
		 case DIO_PORTA : DDRA = 0XFF ; break;
    2360:	ea e3       	ldi	r30, 0x3A	; 58
    2362:	f0 e0       	ldi	r31, 0x00	; 0
    2364:	8f ef       	ldi	r24, 0xFF	; 255
    2366:	80 83       	st	Z, r24
    2368:	0e c0       	rjmp	.+28     	; 0x2386 <Dio_voidSetPortDirection+0xe0>
		 case DIO_PORTB : DDRB = 0XFF ; break;
    236a:	e7 e3       	ldi	r30, 0x37	; 55
    236c:	f0 e0       	ldi	r31, 0x00	; 0
    236e:	8f ef       	ldi	r24, 0xFF	; 255
    2370:	80 83       	st	Z, r24
    2372:	09 c0       	rjmp	.+18     	; 0x2386 <Dio_voidSetPortDirection+0xe0>
		 case DIO_PORTC : DDRC = 0XFF ; break;
    2374:	e4 e3       	ldi	r30, 0x34	; 52
    2376:	f0 e0       	ldi	r31, 0x00	; 0
    2378:	8f ef       	ldi	r24, 0xFF	; 255
    237a:	80 83       	st	Z, r24
    237c:	04 c0       	rjmp	.+8      	; 0x2386 <Dio_voidSetPortDirection+0xe0>
		 case DIO_PORTD : DDRD = 0XFF ; break;
    237e:	e1 e3       	ldi	r30, 0x31	; 49
    2380:	f0 e0       	ldi	r31, 0x00	; 0
    2382:	8f ef       	ldi	r24, 0xFF	; 255
    2384:	80 83       	st	Z, r24
		}
	}
}
    2386:	26 96       	adiw	r28, 0x06	; 6
    2388:	0f b6       	in	r0, 0x3f	; 63
    238a:	f8 94       	cli
    238c:	de bf       	out	0x3e, r29	; 62
    238e:	0f be       	out	0x3f, r0	; 63
    2390:	cd bf       	out	0x3d, r28	; 61
    2392:	cf 91       	pop	r28
    2394:	df 91       	pop	r29
    2396:	08 95       	ret

00002398 <Dio_voidSetPortValue>:
void Dio_voidSetPortValue (u8 Cpy_u8Port , u8 Cpy_u8Value){
    2398:	df 93       	push	r29
    239a:	cf 93       	push	r28
    239c:	00 d0       	rcall	.+0      	; 0x239e <Dio_voidSetPortValue+0x6>
    239e:	00 d0       	rcall	.+0      	; 0x23a0 <Dio_voidSetPortValue+0x8>
    23a0:	cd b7       	in	r28, 0x3d	; 61
    23a2:	de b7       	in	r29, 0x3e	; 62
    23a4:	89 83       	std	Y+1, r24	; 0x01
    23a6:	6a 83       	std	Y+2, r22	; 0x02
	switch (Cpy_u8Port)
    23a8:	89 81       	ldd	r24, Y+1	; 0x01
    23aa:	28 2f       	mov	r18, r24
    23ac:	30 e0       	ldi	r19, 0x00	; 0
    23ae:	3c 83       	std	Y+4, r19	; 0x04
    23b0:	2b 83       	std	Y+3, r18	; 0x03
    23b2:	8b 81       	ldd	r24, Y+3	; 0x03
    23b4:	9c 81       	ldd	r25, Y+4	; 0x04
    23b6:	81 30       	cpi	r24, 0x01	; 1
    23b8:	91 05       	cpc	r25, r1
    23ba:	d1 f0       	breq	.+52     	; 0x23f0 <Dio_voidSetPortValue+0x58>
    23bc:	2b 81       	ldd	r18, Y+3	; 0x03
    23be:	3c 81       	ldd	r19, Y+4	; 0x04
    23c0:	22 30       	cpi	r18, 0x02	; 2
    23c2:	31 05       	cpc	r19, r1
    23c4:	2c f4       	brge	.+10     	; 0x23d0 <Dio_voidSetPortValue+0x38>
    23c6:	8b 81       	ldd	r24, Y+3	; 0x03
    23c8:	9c 81       	ldd	r25, Y+4	; 0x04
    23ca:	00 97       	sbiw	r24, 0x00	; 0
    23cc:	61 f0       	breq	.+24     	; 0x23e6 <Dio_voidSetPortValue+0x4e>
    23ce:	1e c0       	rjmp	.+60     	; 0x240c <Dio_voidSetPortValue+0x74>
    23d0:	2b 81       	ldd	r18, Y+3	; 0x03
    23d2:	3c 81       	ldd	r19, Y+4	; 0x04
    23d4:	22 30       	cpi	r18, 0x02	; 2
    23d6:	31 05       	cpc	r19, r1
    23d8:	81 f0       	breq	.+32     	; 0x23fa <Dio_voidSetPortValue+0x62>
    23da:	8b 81       	ldd	r24, Y+3	; 0x03
    23dc:	9c 81       	ldd	r25, Y+4	; 0x04
    23de:	83 30       	cpi	r24, 0x03	; 3
    23e0:	91 05       	cpc	r25, r1
    23e2:	81 f0       	breq	.+32     	; 0x2404 <Dio_voidSetPortValue+0x6c>
    23e4:	13 c0       	rjmp	.+38     	; 0x240c <Dio_voidSetPortValue+0x74>
	{
	 case DIO_PORTA : PORTA =  Cpy_u8Value; break;
    23e6:	eb e3       	ldi	r30, 0x3B	; 59
    23e8:	f0 e0       	ldi	r31, 0x00	; 0
    23ea:	8a 81       	ldd	r24, Y+2	; 0x02
    23ec:	80 83       	st	Z, r24
    23ee:	0e c0       	rjmp	.+28     	; 0x240c <Dio_voidSetPortValue+0x74>
	 case DIO_PORTB : PORTB =  Cpy_u8Value; break;
    23f0:	e8 e3       	ldi	r30, 0x38	; 56
    23f2:	f0 e0       	ldi	r31, 0x00	; 0
    23f4:	8a 81       	ldd	r24, Y+2	; 0x02
    23f6:	80 83       	st	Z, r24
    23f8:	09 c0       	rjmp	.+18     	; 0x240c <Dio_voidSetPortValue+0x74>
	 case DIO_PORTC : PORTC =  Cpy_u8Value; break;
    23fa:	e5 e3       	ldi	r30, 0x35	; 53
    23fc:	f0 e0       	ldi	r31, 0x00	; 0
    23fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2400:	80 83       	st	Z, r24
    2402:	04 c0       	rjmp	.+8      	; 0x240c <Dio_voidSetPortValue+0x74>
	 case DIO_PORTD : PORTD =  Cpy_u8Value; break;
    2404:	e2 e3       	ldi	r30, 0x32	; 50
    2406:	f0 e0       	ldi	r31, 0x00	; 0
    2408:	8a 81       	ldd	r24, Y+2	; 0x02
    240a:	80 83       	st	Z, r24
	}

}
    240c:	0f 90       	pop	r0
    240e:	0f 90       	pop	r0
    2410:	0f 90       	pop	r0
    2412:	0f 90       	pop	r0
    2414:	cf 91       	pop	r28
    2416:	df 91       	pop	r29
    2418:	08 95       	ret

0000241a <Dio_u8GetPortValue>:
u8 Dio_u8GetPortValue (u8 Cpy_u8Port){
    241a:	df 93       	push	r29
    241c:	cf 93       	push	r28
    241e:	00 d0       	rcall	.+0      	; 0x2420 <Dio_u8GetPortValue+0x6>
    2420:	00 d0       	rcall	.+0      	; 0x2422 <Dio_u8GetPortValue+0x8>
    2422:	cd b7       	in	r28, 0x3d	; 61
    2424:	de b7       	in	r29, 0x3e	; 62
    2426:	8a 83       	std	Y+2, r24	; 0x02
	u8 local_u8InValue = 0 ;
    2428:	19 82       	std	Y+1, r1	; 0x01
	switch (Cpy_u8Port){
    242a:	8a 81       	ldd	r24, Y+2	; 0x02
    242c:	28 2f       	mov	r18, r24
    242e:	30 e0       	ldi	r19, 0x00	; 0
    2430:	3c 83       	std	Y+4, r19	; 0x04
    2432:	2b 83       	std	Y+3, r18	; 0x03
    2434:	8b 81       	ldd	r24, Y+3	; 0x03
    2436:	9c 81       	ldd	r25, Y+4	; 0x04
    2438:	81 30       	cpi	r24, 0x01	; 1
    243a:	91 05       	cpc	r25, r1
    243c:	d1 f0       	breq	.+52     	; 0x2472 <Dio_u8GetPortValue+0x58>
    243e:	2b 81       	ldd	r18, Y+3	; 0x03
    2440:	3c 81       	ldd	r19, Y+4	; 0x04
    2442:	22 30       	cpi	r18, 0x02	; 2
    2444:	31 05       	cpc	r19, r1
    2446:	2c f4       	brge	.+10     	; 0x2452 <Dio_u8GetPortValue+0x38>
    2448:	8b 81       	ldd	r24, Y+3	; 0x03
    244a:	9c 81       	ldd	r25, Y+4	; 0x04
    244c:	00 97       	sbiw	r24, 0x00	; 0
    244e:	61 f0       	breq	.+24     	; 0x2468 <Dio_u8GetPortValue+0x4e>
    2450:	1e c0       	rjmp	.+60     	; 0x248e <Dio_u8GetPortValue+0x74>
    2452:	2b 81       	ldd	r18, Y+3	; 0x03
    2454:	3c 81       	ldd	r19, Y+4	; 0x04
    2456:	22 30       	cpi	r18, 0x02	; 2
    2458:	31 05       	cpc	r19, r1
    245a:	81 f0       	breq	.+32     	; 0x247c <Dio_u8GetPortValue+0x62>
    245c:	8b 81       	ldd	r24, Y+3	; 0x03
    245e:	9c 81       	ldd	r25, Y+4	; 0x04
    2460:	83 30       	cpi	r24, 0x03	; 3
    2462:	91 05       	cpc	r25, r1
    2464:	81 f0       	breq	.+32     	; 0x2486 <Dio_u8GetPortValue+0x6c>
    2466:	13 c0       	rjmp	.+38     	; 0x248e <Dio_u8GetPortValue+0x74>
	 case DIO_PORTA : local_u8InValue = PINA ; break;
    2468:	e9 e3       	ldi	r30, 0x39	; 57
    246a:	f0 e0       	ldi	r31, 0x00	; 0
    246c:	80 81       	ld	r24, Z
    246e:	89 83       	std	Y+1, r24	; 0x01
    2470:	0e c0       	rjmp	.+28     	; 0x248e <Dio_u8GetPortValue+0x74>
	 case DIO_PORTB : local_u8InValue = PINB ; break;
    2472:	e6 e3       	ldi	r30, 0x36	; 54
    2474:	f0 e0       	ldi	r31, 0x00	; 0
    2476:	80 81       	ld	r24, Z
    2478:	89 83       	std	Y+1, r24	; 0x01
    247a:	09 c0       	rjmp	.+18     	; 0x248e <Dio_u8GetPortValue+0x74>
	 case DIO_PORTC : local_u8InValue = PINC ; break;
    247c:	e3 e3       	ldi	r30, 0x33	; 51
    247e:	f0 e0       	ldi	r31, 0x00	; 0
    2480:	80 81       	ld	r24, Z
    2482:	89 83       	std	Y+1, r24	; 0x01
    2484:	04 c0       	rjmp	.+8      	; 0x248e <Dio_u8GetPortValue+0x74>
	 case DIO_PORTD : local_u8InValue = PIND ; break;
    2486:	e0 e3       	ldi	r30, 0x30	; 48
    2488:	f0 e0       	ldi	r31, 0x00	; 0
    248a:	80 81       	ld	r24, Z
    248c:	89 83       	std	Y+1, r24	; 0x01
	}

	return local_u8InValue ;
    248e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2490:	0f 90       	pop	r0
    2492:	0f 90       	pop	r0
    2494:	0f 90       	pop	r0
    2496:	0f 90       	pop	r0
    2498:	cf 91       	pop	r28
    249a:	df 91       	pop	r29
    249c:	08 95       	ret

0000249e <Adc_voidInit>:

void(*callback)(void);
u8 *adcvalue;


void Adc_voidInit(){
    249e:	df 93       	push	r29
    24a0:	cf 93       	push	r28
    24a2:	cd b7       	in	r28, 0x3d	; 61
    24a4:	de b7       	in	r29, 0x3e	; 62
	//SELECT VCC as max volt
	CLR_BIT(ADMUX,7);
    24a6:	a7 e2       	ldi	r26, 0x27	; 39
    24a8:	b0 e0       	ldi	r27, 0x00	; 0
    24aa:	e7 e2       	ldi	r30, 0x27	; 39
    24ac:	f0 e0       	ldi	r31, 0x00	; 0
    24ae:	80 81       	ld	r24, Z
    24b0:	8f 77       	andi	r24, 0x7F	; 127
    24b2:	8c 93       	st	X, r24
	SET_BIT(ADMUX,6);
    24b4:	a7 e2       	ldi	r26, 0x27	; 39
    24b6:	b0 e0       	ldi	r27, 0x00	; 0
    24b8:	e7 e2       	ldi	r30, 0x27	; 39
    24ba:	f0 e0       	ldi	r31, 0x00	; 0
    24bc:	80 81       	ld	r24, Z
    24be:	80 64       	ori	r24, 0x40	; 64
    24c0:	8c 93       	st	X, r24
	//TO work with 8bit mode
	SET_BIT(ADMUX,5);
    24c2:	a7 e2       	ldi	r26, 0x27	; 39
    24c4:	b0 e0       	ldi	r27, 0x00	; 0
    24c6:	e7 e2       	ldi	r30, 0x27	; 39
    24c8:	f0 e0       	ldi	r31, 0x00	; 0
    24ca:	80 81       	ld	r24, Z
    24cc:	80 62       	ori	r24, 0x20	; 32
    24ce:	8c 93       	st	X, r24

	SET_BIT(ADCSRA,7); //ENABLE ADC
    24d0:	a6 e2       	ldi	r26, 0x26	; 38
    24d2:	b0 e0       	ldi	r27, 0x00	; 0
    24d4:	e6 e2       	ldi	r30, 0x26	; 38
    24d6:	f0 e0       	ldi	r31, 0x00	; 0
    24d8:	80 81       	ld	r24, Z
    24da:	80 68       	ori	r24, 0x80	; 128
    24dc:	8c 93       	st	X, r24
	CLR_BIT(ADCSRA,5); //Disable auto trigger
    24de:	a6 e2       	ldi	r26, 0x26	; 38
    24e0:	b0 e0       	ldi	r27, 0x00	; 0
    24e2:	e6 e2       	ldi	r30, 0x26	; 38
    24e4:	f0 e0       	ldi	r31, 0x00	; 0
    24e6:	80 81       	ld	r24, Z
    24e8:	8f 7d       	andi	r24, 0xDF	; 223
    24ea:	8c 93       	st	X, r24
	CLR_BIT(ADCSRA,3);  //disable interrupt
    24ec:	a6 e2       	ldi	r26, 0x26	; 38
    24ee:	b0 e0       	ldi	r27, 0x00	; 0
    24f0:	e6 e2       	ldi	r30, 0x26	; 38
    24f2:	f0 e0       	ldi	r31, 0x00	; 0
    24f4:	80 81       	ld	r24, Z
    24f6:	87 7f       	andi	r24, 0xF7	; 247
    24f8:	8c 93       	st	X, r24

	/* select prescaller(freq) */
	SET_BIT(ADCSRA,0);
    24fa:	a6 e2       	ldi	r26, 0x26	; 38
    24fc:	b0 e0       	ldi	r27, 0x00	; 0
    24fe:	e6 e2       	ldi	r30, 0x26	; 38
    2500:	f0 e0       	ldi	r31, 0x00	; 0
    2502:	80 81       	ld	r24, Z
    2504:	81 60       	ori	r24, 0x01	; 1
    2506:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,1);
    2508:	a6 e2       	ldi	r26, 0x26	; 38
    250a:	b0 e0       	ldi	r27, 0x00	; 0
    250c:	e6 e2       	ldi	r30, 0x26	; 38
    250e:	f0 e0       	ldi	r31, 0x00	; 0
    2510:	80 81       	ld	r24, Z
    2512:	82 60       	ori	r24, 0x02	; 2
    2514:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,2);
    2516:	a6 e2       	ldi	r26, 0x26	; 38
    2518:	b0 e0       	ldi	r27, 0x00	; 0
    251a:	e6 e2       	ldi	r30, 0x26	; 38
    251c:	f0 e0       	ldi	r31, 0x00	; 0
    251e:	80 81       	ld	r24, Z
    2520:	84 60       	ori	r24, 0x04	; 4
    2522:	8c 93       	st	X, r24


}
    2524:	cf 91       	pop	r28
    2526:	df 91       	pop	r29
    2528:	08 95       	ret

0000252a <ADC_u8readvalueAsynch>:

u8 ADC_u8readvalueAsynch(u8 cpy_u8channel,u8 *adc_read,void(*func)(void))
{
    252a:	df 93       	push	r29
    252c:	cf 93       	push	r28
    252e:	00 d0       	rcall	.+0      	; 0x2530 <ADC_u8readvalueAsynch+0x6>
    2530:	00 d0       	rcall	.+0      	; 0x2532 <ADC_u8readvalueAsynch+0x8>
    2532:	0f 92       	push	r0
    2534:	cd b7       	in	r28, 0x3d	; 61
    2536:	de b7       	in	r29, 0x3e	; 62
    2538:	89 83       	std	Y+1, r24	; 0x01
    253a:	7b 83       	std	Y+3, r23	; 0x03
    253c:	6a 83       	std	Y+2, r22	; 0x02
    253e:	5d 83       	std	Y+5, r21	; 0x05
    2540:	4c 83       	std	Y+4, r20	; 0x04

	/*select channel */
	ADMUX &=0b11100000;  //clear frist 5 bits
    2542:	a7 e2       	ldi	r26, 0x27	; 39
    2544:	b0 e0       	ldi	r27, 0x00	; 0
    2546:	e7 e2       	ldi	r30, 0x27	; 39
    2548:	f0 e0       	ldi	r31, 0x00	; 0
    254a:	80 81       	ld	r24, Z
    254c:	80 7e       	andi	r24, 0xE0	; 224
    254e:	8c 93       	st	X, r24
	ADMUX |=cpy_u8channel;
    2550:	a7 e2       	ldi	r26, 0x27	; 39
    2552:	b0 e0       	ldi	r27, 0x00	; 0
    2554:	e7 e2       	ldi	r30, 0x27	; 39
    2556:	f0 e0       	ldi	r31, 0x00	; 0
    2558:	90 81       	ld	r25, Z
    255a:	89 81       	ldd	r24, Y+1	; 0x01
    255c:	89 2b       	or	r24, r25
    255e:	8c 93       	st	X, r24

	//start channel
	SET_BIT(ADCSRA,6);
    2560:	a6 e2       	ldi	r26, 0x26	; 38
    2562:	b0 e0       	ldi	r27, 0x00	; 0
    2564:	e6 e2       	ldi	r30, 0x26	; 38
    2566:	f0 e0       	ldi	r31, 0x00	; 0
    2568:	80 81       	ld	r24, Z
    256a:	80 64       	ori	r24, 0x40	; 64
    256c:	8c 93       	st	X, r24

	adcvalue=adc_read;
    256e:	8a 81       	ldd	r24, Y+2	; 0x02
    2570:	9b 81       	ldd	r25, Y+3	; 0x03
    2572:	90 93 ea 01 	sts	0x01EA, r25
    2576:	80 93 e9 01 	sts	0x01E9, r24
	callback=func;
    257a:	8c 81       	ldd	r24, Y+4	; 0x04
    257c:	9d 81       	ldd	r25, Y+5	; 0x05
    257e:	90 93 ec 01 	sts	0x01EC, r25
    2582:	80 93 eb 01 	sts	0x01EB, r24

	SET_BIT(SREG,7);
    2586:	af e5       	ldi	r26, 0x5F	; 95
    2588:	b0 e0       	ldi	r27, 0x00	; 0
    258a:	ef e5       	ldi	r30, 0x5F	; 95
    258c:	f0 e0       	ldi	r31, 0x00	; 0
    258e:	80 81       	ld	r24, Z
    2590:	80 68       	ori	r24, 0x80	; 128
    2592:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,3);
    2594:	a6 e2       	ldi	r26, 0x26	; 38
    2596:	b0 e0       	ldi	r27, 0x00	; 0
    2598:	e6 e2       	ldi	r30, 0x26	; 38
    259a:	f0 e0       	ldi	r31, 0x00	; 0
    259c:	80 81       	ld	r24, Z
    259e:	88 60       	ori	r24, 0x08	; 8
    25a0:	8c 93       	st	X, r24

	return adcvalue;
    25a2:	80 91 e9 01 	lds	r24, 0x01E9
    25a6:	90 91 ea 01 	lds	r25, 0x01EA

}
    25aa:	0f 90       	pop	r0
    25ac:	0f 90       	pop	r0
    25ae:	0f 90       	pop	r0
    25b0:	0f 90       	pop	r0
    25b2:	0f 90       	pop	r0
    25b4:	cf 91       	pop	r28
    25b6:	df 91       	pop	r29
    25b8:	08 95       	ret

000025ba <__vector_16>:
void __vector_16 (void) __attribute__((signal));
void __vector_16 (void){
    25ba:	1f 92       	push	r1
    25bc:	0f 92       	push	r0
    25be:	0f b6       	in	r0, 0x3f	; 63
    25c0:	0f 92       	push	r0
    25c2:	11 24       	eor	r1, r1
    25c4:	2f 93       	push	r18
    25c6:	3f 93       	push	r19
    25c8:	4f 93       	push	r20
    25ca:	5f 93       	push	r21
    25cc:	6f 93       	push	r22
    25ce:	7f 93       	push	r23
    25d0:	8f 93       	push	r24
    25d2:	9f 93       	push	r25
    25d4:	af 93       	push	r26
    25d6:	bf 93       	push	r27
    25d8:	ef 93       	push	r30
    25da:	ff 93       	push	r31
    25dc:	df 93       	push	r29
    25de:	cf 93       	push	r28
    25e0:	cd b7       	in	r28, 0x3d	; 61
    25e2:	de b7       	in	r29, 0x3e	; 62
	*adcvalue=ADCH;
    25e4:	a0 91 e9 01 	lds	r26, 0x01E9
    25e8:	b0 91 ea 01 	lds	r27, 0x01EA
    25ec:	e5 e2       	ldi	r30, 0x25	; 37
    25ee:	f0 e0       	ldi	r31, 0x00	; 0
    25f0:	80 81       	ld	r24, Z
    25f2:	8c 93       	st	X, r24
	callback();
    25f4:	e0 91 eb 01 	lds	r30, 0x01EB
    25f8:	f0 91 ec 01 	lds	r31, 0x01EC
    25fc:	09 95       	icall

}
    25fe:	cf 91       	pop	r28
    2600:	df 91       	pop	r29
    2602:	ff 91       	pop	r31
    2604:	ef 91       	pop	r30
    2606:	bf 91       	pop	r27
    2608:	af 91       	pop	r26
    260a:	9f 91       	pop	r25
    260c:	8f 91       	pop	r24
    260e:	7f 91       	pop	r23
    2610:	6f 91       	pop	r22
    2612:	5f 91       	pop	r21
    2614:	4f 91       	pop	r20
    2616:	3f 91       	pop	r19
    2618:	2f 91       	pop	r18
    261a:	0f 90       	pop	r0
    261c:	0f be       	out	0x3f, r0	; 63
    261e:	0f 90       	pop	r0
    2620:	1f 90       	pop	r1
    2622:	18 95       	reti

00002624 <ADC_u8readvalue>:



u8 ADC_u8readvalue(u8 cpy_u8channel)
{
    2624:	df 93       	push	r29
    2626:	cf 93       	push	r28
    2628:	0f 92       	push	r0
    262a:	cd b7       	in	r28, 0x3d	; 61
    262c:	de b7       	in	r29, 0x3e	; 62
    262e:	89 83       	std	Y+1, r24	; 0x01
	/*select channel */
	ADMUX &=0b11100000;  //clear frist 5 bits
    2630:	a7 e2       	ldi	r26, 0x27	; 39
    2632:	b0 e0       	ldi	r27, 0x00	; 0
    2634:	e7 e2       	ldi	r30, 0x27	; 39
    2636:	f0 e0       	ldi	r31, 0x00	; 0
    2638:	80 81       	ld	r24, Z
    263a:	80 7e       	andi	r24, 0xE0	; 224
    263c:	8c 93       	st	X, r24
	ADMUX |=cpy_u8channel;
    263e:	a7 e2       	ldi	r26, 0x27	; 39
    2640:	b0 e0       	ldi	r27, 0x00	; 0
    2642:	e7 e2       	ldi	r30, 0x27	; 39
    2644:	f0 e0       	ldi	r31, 0x00	; 0
    2646:	90 81       	ld	r25, Z
    2648:	89 81       	ldd	r24, Y+1	; 0x01
    264a:	89 2b       	or	r24, r25
    264c:	8c 93       	st	X, r24

	//start channel
	SET_BIT(ADCSRA,6);
    264e:	a6 e2       	ldi	r26, 0x26	; 38
    2650:	b0 e0       	ldi	r27, 0x00	; 0
    2652:	e6 e2       	ldi	r30, 0x26	; 38
    2654:	f0 e0       	ldi	r31, 0x00	; 0
    2656:	80 81       	ld	r24, Z
    2658:	80 64       	ori	r24, 0x40	; 64
    265a:	8c 93       	st	X, r24

	/* wait till finish */
	while(GET_BIT(ADCSRA,4)==0){}
    265c:	e6 e2       	ldi	r30, 0x26	; 38
    265e:	f0 e0       	ldi	r31, 0x00	; 0
    2660:	80 81       	ld	r24, Z
    2662:	82 95       	swap	r24
    2664:	8f 70       	andi	r24, 0x0F	; 15
    2666:	88 2f       	mov	r24, r24
    2668:	90 e0       	ldi	r25, 0x00	; 0
    266a:	81 70       	andi	r24, 0x01	; 1
    266c:	90 70       	andi	r25, 0x00	; 0
    266e:	00 97       	sbiw	r24, 0x00	; 0
    2670:	a9 f3       	breq	.-22     	; 0x265c <ADC_u8readvalue+0x38>

	/*  STOP ,CLEAR FLAG*/
	CLR_BIT(ADCSRA,6);
    2672:	a6 e2       	ldi	r26, 0x26	; 38
    2674:	b0 e0       	ldi	r27, 0x00	; 0
    2676:	e6 e2       	ldi	r30, 0x26	; 38
    2678:	f0 e0       	ldi	r31, 0x00	; 0
    267a:	80 81       	ld	r24, Z
    267c:	8f 7b       	andi	r24, 0xBF	; 191
    267e:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,4);
    2680:	a6 e2       	ldi	r26, 0x26	; 38
    2682:	b0 e0       	ldi	r27, 0x00	; 0
    2684:	e6 e2       	ldi	r30, 0x26	; 38
    2686:	f0 e0       	ldi	r31, 0x00	; 0
    2688:	80 81       	ld	r24, Z
    268a:	80 61       	ori	r24, 0x10	; 16
    268c:	8c 93       	st	X, r24

	return ADCH;
    268e:	e5 e2       	ldi	r30, 0x25	; 37
    2690:	f0 e0       	ldi	r31, 0x00	; 0
    2692:	80 81       	ld	r24, Z
}
    2694:	0f 90       	pop	r0
    2696:	cf 91       	pop	r28
    2698:	df 91       	pop	r29
    269a:	08 95       	ret

0000269c <loginFunc>:
    {"888"},
    {"999"},
    {"000"}};
//**********************************************************
u8 loginFunc()
{
    269c:	0f 93       	push	r16
    269e:	1f 93       	push	r17
    26a0:	df 93       	push	r29
    26a2:	cf 93       	push	r28
    26a4:	cd b7       	in	r28, 0x3d	; 61
    26a6:	de b7       	in	r29, 0x3e	; 62
    26a8:	c6 57       	subi	r28, 0x76	; 118
    26aa:	d0 40       	sbci	r29, 0x00	; 0
    26ac:	0f b6       	in	r0, 0x3f	; 63
    26ae:	f8 94       	cli
    26b0:	de bf       	out	0x3e, r29	; 62
    26b2:	0f be       	out	0x3f, r0	; 63
    26b4:	cd bf       	out	0x3d, r28	; 61
    u8 local_u8_counter; // number of wrong entries
    u8 local_u8_id = 0;   // username index
    26b6:	fe 01       	movw	r30, r28
    26b8:	e9 59       	subi	r30, 0x99	; 153
    26ba:	ff 4f       	sbci	r31, 0xFF	; 255
    26bc:	10 82       	st	Z, r1
    u8 local_u8_userCorrect = FALSE; // username flag
    26be:	fe 01       	movw	r30, r28
    26c0:	ea 59       	subi	r30, 0x9A	; 154
    26c2:	ff 4f       	sbci	r31, 0xFF	; 255
    26c4:	10 82       	st	Z, r1
    u8 local_u8_passwordCorrect = FALSE;// password flag
    26c6:	fe 01       	movw	r30, r28
    26c8:	eb 59       	subi	r30, 0x9B	; 155
    26ca:	ff 4f       	sbci	r31, 0xFF	; 255
    26cc:	10 82       	st	Z, r1
    u8 local_u8_receiveUART[USER_SIZE]; // Initialize array to receive from UART
    LCD_voidsendstring("WELCOME...");
    26ce:	86 e6       	ldi	r24, 0x66	; 102
    26d0:	90 e0       	ldi	r25, 0x00	; 0
    26d2:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <LCD_voidsendstring>
    26d6:	fe 01       	movw	r30, r28
    26d8:	e1 5a       	subi	r30, 0xA1	; 161
    26da:	ff 4f       	sbci	r31, 0xFF	; 255
    26dc:	80 e0       	ldi	r24, 0x00	; 0
    26de:	90 e0       	ldi	r25, 0x00	; 0
    26e0:	aa ef       	ldi	r26, 0xFA	; 250
    26e2:	b3 e4       	ldi	r27, 0x43	; 67
    26e4:	80 83       	st	Z, r24
    26e6:	91 83       	std	Z+1, r25	; 0x01
    26e8:	a2 83       	std	Z+2, r26	; 0x02
    26ea:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26ec:	8e 01       	movw	r16, r28
    26ee:	05 5a       	subi	r16, 0xA5	; 165
    26f0:	1f 4f       	sbci	r17, 0xFF	; 255
    26f2:	fe 01       	movw	r30, r28
    26f4:	e1 5a       	subi	r30, 0xA1	; 161
    26f6:	ff 4f       	sbci	r31, 0xFF	; 255
    26f8:	60 81       	ld	r22, Z
    26fa:	71 81       	ldd	r23, Z+1	; 0x01
    26fc:	82 81       	ldd	r24, Z+2	; 0x02
    26fe:	93 81       	ldd	r25, Z+3	; 0x03
    2700:	20 e0       	ldi	r18, 0x00	; 0
    2702:	30 e0       	ldi	r19, 0x00	; 0
    2704:	4a ef       	ldi	r20, 0xFA	; 250
    2706:	54 e4       	ldi	r21, 0x44	; 68
    2708:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    270c:	dc 01       	movw	r26, r24
    270e:	cb 01       	movw	r24, r22
    2710:	f8 01       	movw	r30, r16
    2712:	80 83       	st	Z, r24
    2714:	91 83       	std	Z+1, r25	; 0x01
    2716:	a2 83       	std	Z+2, r26	; 0x02
    2718:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    271a:	fe 01       	movw	r30, r28
    271c:	e5 5a       	subi	r30, 0xA5	; 165
    271e:	ff 4f       	sbci	r31, 0xFF	; 255
    2720:	60 81       	ld	r22, Z
    2722:	71 81       	ldd	r23, Z+1	; 0x01
    2724:	82 81       	ldd	r24, Z+2	; 0x02
    2726:	93 81       	ldd	r25, Z+3	; 0x03
    2728:	20 e0       	ldi	r18, 0x00	; 0
    272a:	30 e0       	ldi	r19, 0x00	; 0
    272c:	40 e8       	ldi	r20, 0x80	; 128
    272e:	5f e3       	ldi	r21, 0x3F	; 63
    2730:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2734:	88 23       	and	r24, r24
    2736:	44 f4       	brge	.+16     	; 0x2748 <loginFunc+0xac>
		__ticks = 1;
    2738:	fe 01       	movw	r30, r28
    273a:	e7 5a       	subi	r30, 0xA7	; 167
    273c:	ff 4f       	sbci	r31, 0xFF	; 255
    273e:	81 e0       	ldi	r24, 0x01	; 1
    2740:	90 e0       	ldi	r25, 0x00	; 0
    2742:	91 83       	std	Z+1, r25	; 0x01
    2744:	80 83       	st	Z, r24
    2746:	64 c0       	rjmp	.+200    	; 0x2810 <loginFunc+0x174>
	else if (__tmp > 65535)
    2748:	fe 01       	movw	r30, r28
    274a:	e5 5a       	subi	r30, 0xA5	; 165
    274c:	ff 4f       	sbci	r31, 0xFF	; 255
    274e:	60 81       	ld	r22, Z
    2750:	71 81       	ldd	r23, Z+1	; 0x01
    2752:	82 81       	ldd	r24, Z+2	; 0x02
    2754:	93 81       	ldd	r25, Z+3	; 0x03
    2756:	20 e0       	ldi	r18, 0x00	; 0
    2758:	3f ef       	ldi	r19, 0xFF	; 255
    275a:	4f e7       	ldi	r20, 0x7F	; 127
    275c:	57 e4       	ldi	r21, 0x47	; 71
    275e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2762:	18 16       	cp	r1, r24
    2764:	0c f0       	brlt	.+2      	; 0x2768 <loginFunc+0xcc>
    2766:	43 c0       	rjmp	.+134    	; 0x27ee <loginFunc+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2768:	fe 01       	movw	r30, r28
    276a:	e1 5a       	subi	r30, 0xA1	; 161
    276c:	ff 4f       	sbci	r31, 0xFF	; 255
    276e:	60 81       	ld	r22, Z
    2770:	71 81       	ldd	r23, Z+1	; 0x01
    2772:	82 81       	ldd	r24, Z+2	; 0x02
    2774:	93 81       	ldd	r25, Z+3	; 0x03
    2776:	20 e0       	ldi	r18, 0x00	; 0
    2778:	30 e0       	ldi	r19, 0x00	; 0
    277a:	40 e2       	ldi	r20, 0x20	; 32
    277c:	51 e4       	ldi	r21, 0x41	; 65
    277e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2782:	dc 01       	movw	r26, r24
    2784:	cb 01       	movw	r24, r22
    2786:	8e 01       	movw	r16, r28
    2788:	07 5a       	subi	r16, 0xA7	; 167
    278a:	1f 4f       	sbci	r17, 0xFF	; 255
    278c:	bc 01       	movw	r22, r24
    278e:	cd 01       	movw	r24, r26
    2790:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2794:	dc 01       	movw	r26, r24
    2796:	cb 01       	movw	r24, r22
    2798:	f8 01       	movw	r30, r16
    279a:	91 83       	std	Z+1, r25	; 0x01
    279c:	80 83       	st	Z, r24
    279e:	1f c0       	rjmp	.+62     	; 0x27de <loginFunc+0x142>
    27a0:	fe 01       	movw	r30, r28
    27a2:	e9 5a       	subi	r30, 0xA9	; 169
    27a4:	ff 4f       	sbci	r31, 0xFF	; 255
    27a6:	88 ec       	ldi	r24, 0xC8	; 200
    27a8:	90 e0       	ldi	r25, 0x00	; 0
    27aa:	91 83       	std	Z+1, r25	; 0x01
    27ac:	80 83       	st	Z, r24
    27ae:	fe 01       	movw	r30, r28
    27b0:	e9 5a       	subi	r30, 0xA9	; 169
    27b2:	ff 4f       	sbci	r31, 0xFF	; 255
    27b4:	80 81       	ld	r24, Z
    27b6:	91 81       	ldd	r25, Z+1	; 0x01
    27b8:	01 97       	sbiw	r24, 0x01	; 1
    27ba:	f1 f7       	brne	.-4      	; 0x27b8 <loginFunc+0x11c>
    27bc:	fe 01       	movw	r30, r28
    27be:	e9 5a       	subi	r30, 0xA9	; 169
    27c0:	ff 4f       	sbci	r31, 0xFF	; 255
    27c2:	91 83       	std	Z+1, r25	; 0x01
    27c4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27c6:	de 01       	movw	r26, r28
    27c8:	a7 5a       	subi	r26, 0xA7	; 167
    27ca:	bf 4f       	sbci	r27, 0xFF	; 255
    27cc:	fe 01       	movw	r30, r28
    27ce:	e7 5a       	subi	r30, 0xA7	; 167
    27d0:	ff 4f       	sbci	r31, 0xFF	; 255
    27d2:	80 81       	ld	r24, Z
    27d4:	91 81       	ldd	r25, Z+1	; 0x01
    27d6:	01 97       	sbiw	r24, 0x01	; 1
    27d8:	11 96       	adiw	r26, 0x01	; 1
    27da:	9c 93       	st	X, r25
    27dc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27de:	fe 01       	movw	r30, r28
    27e0:	e7 5a       	subi	r30, 0xA7	; 167
    27e2:	ff 4f       	sbci	r31, 0xFF	; 255
    27e4:	80 81       	ld	r24, Z
    27e6:	91 81       	ldd	r25, Z+1	; 0x01
    27e8:	00 97       	sbiw	r24, 0x00	; 0
    27ea:	d1 f6       	brne	.-76     	; 0x27a0 <loginFunc+0x104>
    27ec:	28 c0       	rjmp	.+80     	; 0x283e <loginFunc+0x1a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27ee:	8e 01       	movw	r16, r28
    27f0:	07 5a       	subi	r16, 0xA7	; 167
    27f2:	1f 4f       	sbci	r17, 0xFF	; 255
    27f4:	fe 01       	movw	r30, r28
    27f6:	e5 5a       	subi	r30, 0xA5	; 165
    27f8:	ff 4f       	sbci	r31, 0xFF	; 255
    27fa:	60 81       	ld	r22, Z
    27fc:	71 81       	ldd	r23, Z+1	; 0x01
    27fe:	82 81       	ldd	r24, Z+2	; 0x02
    2800:	93 81       	ldd	r25, Z+3	; 0x03
    2802:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2806:	dc 01       	movw	r26, r24
    2808:	cb 01       	movw	r24, r22
    280a:	f8 01       	movw	r30, r16
    280c:	91 83       	std	Z+1, r25	; 0x01
    280e:	80 83       	st	Z, r24
    2810:	de 01       	movw	r26, r28
    2812:	ab 5a       	subi	r26, 0xAB	; 171
    2814:	bf 4f       	sbci	r27, 0xFF	; 255
    2816:	fe 01       	movw	r30, r28
    2818:	e7 5a       	subi	r30, 0xA7	; 167
    281a:	ff 4f       	sbci	r31, 0xFF	; 255
    281c:	80 81       	ld	r24, Z
    281e:	91 81       	ldd	r25, Z+1	; 0x01
    2820:	11 96       	adiw	r26, 0x01	; 1
    2822:	9c 93       	st	X, r25
    2824:	8e 93       	st	-X, r24
    2826:	fe 01       	movw	r30, r28
    2828:	eb 5a       	subi	r30, 0xAB	; 171
    282a:	ff 4f       	sbci	r31, 0xFF	; 255
    282c:	80 81       	ld	r24, Z
    282e:	91 81       	ldd	r25, Z+1	; 0x01
    2830:	01 97       	sbiw	r24, 0x01	; 1
    2832:	f1 f7       	brne	.-4      	; 0x2830 <loginFunc+0x194>
    2834:	fe 01       	movw	r30, r28
    2836:	eb 5a       	subi	r30, 0xAB	; 171
    2838:	ff 4f       	sbci	r31, 0xFF	; 255
    283a:	91 83       	std	Z+1, r25	; 0x01
    283c:	80 83       	st	Z, r24
    _delay_ms(500);

    /**************************************************************/
    // The number of errors in the entry
   for (local_u8_counter = 1; local_u8_counter < 4; local_u8_counter++)
    283e:	fe 01       	movw	r30, r28
    2840:	e8 59       	subi	r30, 0x98	; 152
    2842:	ff 4f       	sbci	r31, 0xFF	; 255
    2844:	81 e0       	ldi	r24, 0x01	; 1
    2846:	80 83       	st	Z, r24
    2848:	78 c2       	rjmp	.+1264   	; 0x2d3a <loginFunc+0x69e>
    {
        LCD_voidclearscrean();
    284a:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <LCD_voidclearscrean>
        LCD_voidsendstring("Enter username: ");
    284e:	81 e7       	ldi	r24, 0x71	; 113
    2850:	90 e0       	ldi	r25, 0x00	; 0
    2852:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <LCD_voidsendstring>
        UART_ReceiveString(local_u8_receiveUART);
    2856:	ce 01       	movw	r24, r28
    2858:	87 59       	subi	r24, 0x97	; 151
    285a:	9f 4f       	sbci	r25, 0xFF	; 255
    285c:	0e 94 12 06 	call	0xc24	; 0xc24 <UART_ReceiveString>
        local_u8_userCorrect = FALSE;		 // Reset user correctness flag
    2860:	fe 01       	movw	r30, r28
    2862:	ea 59       	subi	r30, 0x9A	; 154
    2864:	ff 4f       	sbci	r31, 0xFF	; 255
    2866:	10 82       	st	Z, r1
        for (local_u8_id = 0; local_u8_id < Number_Of_Users; local_u8_id++)
    2868:	fe 01       	movw	r30, r28
    286a:	e9 59       	subi	r30, 0x99	; 153
    286c:	ff 4f       	sbci	r31, 0xFF	; 255
    286e:	10 82       	st	Z, r1
    2870:	e2 c0       	rjmp	.+452    	; 0x2a36 <loginFunc+0x39a>
        {
            if (strcmp(local_u8_receiveUART, loginUsers[local_u8_id]) == 0)
    2872:	46 e6       	ldi	r20, 0x66	; 102
    2874:	51 e0       	ldi	r21, 0x01	; 1
    2876:	fe 01       	movw	r30, r28
    2878:	e9 59       	subi	r30, 0x99	; 153
    287a:	ff 4f       	sbci	r31, 0xFF	; 255
    287c:	80 81       	ld	r24, Z
    287e:	28 2f       	mov	r18, r24
    2880:	30 e0       	ldi	r19, 0x00	; 0
    2882:	c9 01       	movw	r24, r18
    2884:	88 0f       	add	r24, r24
    2886:	99 1f       	adc	r25, r25
    2888:	88 0f       	add	r24, r24
    288a:	99 1f       	adc	r25, r25
    288c:	88 0f       	add	r24, r24
    288e:	99 1f       	adc	r25, r25
    2890:	82 1b       	sub	r24, r18
    2892:	93 0b       	sbc	r25, r19
    2894:	9a 01       	movw	r18, r20
    2896:	28 0f       	add	r18, r24
    2898:	39 1f       	adc	r19, r25
    289a:	ce 01       	movw	r24, r28
    289c:	87 59       	subi	r24, 0x97	; 151
    289e:	9f 4f       	sbci	r25, 0xFF	; 255
    28a0:	b9 01       	movw	r22, r18
    28a2:	0e 94 8b 22 	call	0x4516	; 0x4516 <strcmp>
    28a6:	00 97       	sbiw	r24, 0x00	; 0
    28a8:	09 f0       	breq	.+2      	; 0x28ac <loginFunc+0x210>
    28aa:	bc c0       	rjmp	.+376    	; 0x2a24 <loginFunc+0x388>
            {
                LCD_voidclearscrean();
    28ac:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <LCD_voidclearscrean>
                local_u8_userCorrect = TRUE;
    28b0:	fe 01       	movw	r30, r28
    28b2:	ea 59       	subi	r30, 0x9A	; 154
    28b4:	ff 4f       	sbci	r31, 0xFF	; 255
    28b6:	81 e0       	ldi	r24, 0x01	; 1
    28b8:	80 83       	st	Z, r24
    28ba:	fe 01       	movw	r30, r28
    28bc:	ef 5a       	subi	r30, 0xAF	; 175
    28be:	ff 4f       	sbci	r31, 0xFF	; 255
    28c0:	80 e0       	ldi	r24, 0x00	; 0
    28c2:	90 e0       	ldi	r25, 0x00	; 0
    28c4:	aa e7       	ldi	r26, 0x7A	; 122
    28c6:	b4 e4       	ldi	r27, 0x44	; 68
    28c8:	80 83       	st	Z, r24
    28ca:	91 83       	std	Z+1, r25	; 0x01
    28cc:	a2 83       	std	Z+2, r26	; 0x02
    28ce:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28d0:	8e 01       	movw	r16, r28
    28d2:	03 5b       	subi	r16, 0xB3	; 179
    28d4:	1f 4f       	sbci	r17, 0xFF	; 255
    28d6:	fe 01       	movw	r30, r28
    28d8:	ef 5a       	subi	r30, 0xAF	; 175
    28da:	ff 4f       	sbci	r31, 0xFF	; 255
    28dc:	60 81       	ld	r22, Z
    28de:	71 81       	ldd	r23, Z+1	; 0x01
    28e0:	82 81       	ldd	r24, Z+2	; 0x02
    28e2:	93 81       	ldd	r25, Z+3	; 0x03
    28e4:	20 e0       	ldi	r18, 0x00	; 0
    28e6:	30 e0       	ldi	r19, 0x00	; 0
    28e8:	4a ef       	ldi	r20, 0xFA	; 250
    28ea:	54 e4       	ldi	r21, 0x44	; 68
    28ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28f0:	dc 01       	movw	r26, r24
    28f2:	cb 01       	movw	r24, r22
    28f4:	f8 01       	movw	r30, r16
    28f6:	80 83       	st	Z, r24
    28f8:	91 83       	std	Z+1, r25	; 0x01
    28fa:	a2 83       	std	Z+2, r26	; 0x02
    28fc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    28fe:	fe 01       	movw	r30, r28
    2900:	e3 5b       	subi	r30, 0xB3	; 179
    2902:	ff 4f       	sbci	r31, 0xFF	; 255
    2904:	60 81       	ld	r22, Z
    2906:	71 81       	ldd	r23, Z+1	; 0x01
    2908:	82 81       	ldd	r24, Z+2	; 0x02
    290a:	93 81       	ldd	r25, Z+3	; 0x03
    290c:	20 e0       	ldi	r18, 0x00	; 0
    290e:	30 e0       	ldi	r19, 0x00	; 0
    2910:	40 e8       	ldi	r20, 0x80	; 128
    2912:	5f e3       	ldi	r21, 0x3F	; 63
    2914:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2918:	88 23       	and	r24, r24
    291a:	44 f4       	brge	.+16     	; 0x292c <loginFunc+0x290>
		__ticks = 1;
    291c:	fe 01       	movw	r30, r28
    291e:	e5 5b       	subi	r30, 0xB5	; 181
    2920:	ff 4f       	sbci	r31, 0xFF	; 255
    2922:	81 e0       	ldi	r24, 0x01	; 1
    2924:	90 e0       	ldi	r25, 0x00	; 0
    2926:	91 83       	std	Z+1, r25	; 0x01
    2928:	80 83       	st	Z, r24
    292a:	64 c0       	rjmp	.+200    	; 0x29f4 <loginFunc+0x358>
	else if (__tmp > 65535)
    292c:	fe 01       	movw	r30, r28
    292e:	e3 5b       	subi	r30, 0xB3	; 179
    2930:	ff 4f       	sbci	r31, 0xFF	; 255
    2932:	60 81       	ld	r22, Z
    2934:	71 81       	ldd	r23, Z+1	; 0x01
    2936:	82 81       	ldd	r24, Z+2	; 0x02
    2938:	93 81       	ldd	r25, Z+3	; 0x03
    293a:	20 e0       	ldi	r18, 0x00	; 0
    293c:	3f ef       	ldi	r19, 0xFF	; 255
    293e:	4f e7       	ldi	r20, 0x7F	; 127
    2940:	57 e4       	ldi	r21, 0x47	; 71
    2942:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2946:	18 16       	cp	r1, r24
    2948:	0c f0       	brlt	.+2      	; 0x294c <loginFunc+0x2b0>
    294a:	43 c0       	rjmp	.+134    	; 0x29d2 <loginFunc+0x336>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    294c:	fe 01       	movw	r30, r28
    294e:	ef 5a       	subi	r30, 0xAF	; 175
    2950:	ff 4f       	sbci	r31, 0xFF	; 255
    2952:	60 81       	ld	r22, Z
    2954:	71 81       	ldd	r23, Z+1	; 0x01
    2956:	82 81       	ldd	r24, Z+2	; 0x02
    2958:	93 81       	ldd	r25, Z+3	; 0x03
    295a:	20 e0       	ldi	r18, 0x00	; 0
    295c:	30 e0       	ldi	r19, 0x00	; 0
    295e:	40 e2       	ldi	r20, 0x20	; 32
    2960:	51 e4       	ldi	r21, 0x41	; 65
    2962:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2966:	dc 01       	movw	r26, r24
    2968:	cb 01       	movw	r24, r22
    296a:	8e 01       	movw	r16, r28
    296c:	05 5b       	subi	r16, 0xB5	; 181
    296e:	1f 4f       	sbci	r17, 0xFF	; 255
    2970:	bc 01       	movw	r22, r24
    2972:	cd 01       	movw	r24, r26
    2974:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2978:	dc 01       	movw	r26, r24
    297a:	cb 01       	movw	r24, r22
    297c:	f8 01       	movw	r30, r16
    297e:	91 83       	std	Z+1, r25	; 0x01
    2980:	80 83       	st	Z, r24
    2982:	1f c0       	rjmp	.+62     	; 0x29c2 <loginFunc+0x326>
    2984:	fe 01       	movw	r30, r28
    2986:	e7 5b       	subi	r30, 0xB7	; 183
    2988:	ff 4f       	sbci	r31, 0xFF	; 255
    298a:	88 ec       	ldi	r24, 0xC8	; 200
    298c:	90 e0       	ldi	r25, 0x00	; 0
    298e:	91 83       	std	Z+1, r25	; 0x01
    2990:	80 83       	st	Z, r24
    2992:	fe 01       	movw	r30, r28
    2994:	e7 5b       	subi	r30, 0xB7	; 183
    2996:	ff 4f       	sbci	r31, 0xFF	; 255
    2998:	80 81       	ld	r24, Z
    299a:	91 81       	ldd	r25, Z+1	; 0x01
    299c:	01 97       	sbiw	r24, 0x01	; 1
    299e:	f1 f7       	brne	.-4      	; 0x299c <loginFunc+0x300>
    29a0:	fe 01       	movw	r30, r28
    29a2:	e7 5b       	subi	r30, 0xB7	; 183
    29a4:	ff 4f       	sbci	r31, 0xFF	; 255
    29a6:	91 83       	std	Z+1, r25	; 0x01
    29a8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29aa:	de 01       	movw	r26, r28
    29ac:	a5 5b       	subi	r26, 0xB5	; 181
    29ae:	bf 4f       	sbci	r27, 0xFF	; 255
    29b0:	fe 01       	movw	r30, r28
    29b2:	e5 5b       	subi	r30, 0xB5	; 181
    29b4:	ff 4f       	sbci	r31, 0xFF	; 255
    29b6:	80 81       	ld	r24, Z
    29b8:	91 81       	ldd	r25, Z+1	; 0x01
    29ba:	01 97       	sbiw	r24, 0x01	; 1
    29bc:	11 96       	adiw	r26, 0x01	; 1
    29be:	9c 93       	st	X, r25
    29c0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29c2:	fe 01       	movw	r30, r28
    29c4:	e5 5b       	subi	r30, 0xB5	; 181
    29c6:	ff 4f       	sbci	r31, 0xFF	; 255
    29c8:	80 81       	ld	r24, Z
    29ca:	91 81       	ldd	r25, Z+1	; 0x01
    29cc:	00 97       	sbiw	r24, 0x00	; 0
    29ce:	d1 f6       	brne	.-76     	; 0x2984 <loginFunc+0x2e8>
    29d0:	39 c0       	rjmp	.+114    	; 0x2a44 <loginFunc+0x3a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29d2:	8e 01       	movw	r16, r28
    29d4:	05 5b       	subi	r16, 0xB5	; 181
    29d6:	1f 4f       	sbci	r17, 0xFF	; 255
    29d8:	fe 01       	movw	r30, r28
    29da:	e3 5b       	subi	r30, 0xB3	; 179
    29dc:	ff 4f       	sbci	r31, 0xFF	; 255
    29de:	60 81       	ld	r22, Z
    29e0:	71 81       	ldd	r23, Z+1	; 0x01
    29e2:	82 81       	ldd	r24, Z+2	; 0x02
    29e4:	93 81       	ldd	r25, Z+3	; 0x03
    29e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29ea:	dc 01       	movw	r26, r24
    29ec:	cb 01       	movw	r24, r22
    29ee:	f8 01       	movw	r30, r16
    29f0:	91 83       	std	Z+1, r25	; 0x01
    29f2:	80 83       	st	Z, r24
    29f4:	de 01       	movw	r26, r28
    29f6:	a9 5b       	subi	r26, 0xB9	; 185
    29f8:	bf 4f       	sbci	r27, 0xFF	; 255
    29fa:	fe 01       	movw	r30, r28
    29fc:	e5 5b       	subi	r30, 0xB5	; 181
    29fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2a00:	80 81       	ld	r24, Z
    2a02:	91 81       	ldd	r25, Z+1	; 0x01
    2a04:	11 96       	adiw	r26, 0x01	; 1
    2a06:	9c 93       	st	X, r25
    2a08:	8e 93       	st	-X, r24
    2a0a:	fe 01       	movw	r30, r28
    2a0c:	e9 5b       	subi	r30, 0xB9	; 185
    2a0e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a10:	80 81       	ld	r24, Z
    2a12:	91 81       	ldd	r25, Z+1	; 0x01
    2a14:	01 97       	sbiw	r24, 0x01	; 1
    2a16:	f1 f7       	brne	.-4      	; 0x2a14 <loginFunc+0x378>
    2a18:	fe 01       	movw	r30, r28
    2a1a:	e9 5b       	subi	r30, 0xB9	; 185
    2a1c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a1e:	91 83       	std	Z+1, r25	; 0x01
    2a20:	80 83       	st	Z, r24
    2a22:	10 c0       	rjmp	.+32     	; 0x2a44 <loginFunc+0x3a8>
    {
        LCD_voidclearscrean();
        LCD_voidsendstring("Enter username: ");
        UART_ReceiveString(local_u8_receiveUART);
        local_u8_userCorrect = FALSE;		 // Reset user correctness flag
        for (local_u8_id = 0; local_u8_id < Number_Of_Users; local_u8_id++)
    2a24:	de 01       	movw	r26, r28
    2a26:	a9 59       	subi	r26, 0x99	; 153
    2a28:	bf 4f       	sbci	r27, 0xFF	; 255
    2a2a:	fe 01       	movw	r30, r28
    2a2c:	e9 59       	subi	r30, 0x99	; 153
    2a2e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a30:	80 81       	ld	r24, Z
    2a32:	8f 5f       	subi	r24, 0xFF	; 255
    2a34:	8c 93       	st	X, r24
    2a36:	fe 01       	movw	r30, r28
    2a38:	e9 59       	subi	r30, 0x99	; 153
    2a3a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a3c:	80 81       	ld	r24, Z
    2a3e:	8a 30       	cpi	r24, 0x0A	; 10
    2a40:	08 f4       	brcc	.+2      	; 0x2a44 <loginFunc+0x3a8>
    2a42:	17 cf       	rjmp	.-466    	; 0x2872 <loginFunc+0x1d6>
                break;
            }
        }


        if (local_u8_userCorrect)
    2a44:	fe 01       	movw	r30, r28
    2a46:	ea 59       	subi	r30, 0x9A	; 154
    2a48:	ff 4f       	sbci	r31, 0xFF	; 255
    2a4a:	80 81       	ld	r24, Z
    2a4c:	88 23       	and	r24, r24
    2a4e:	09 f0       	breq	.+2      	; 0x2a52 <loginFunc+0x3b6>
    2a50:	7b c1       	rjmp	.+758    	; 0x2d48 <loginFunc+0x6ac>
        {
            break; // Exit the loop if the username is correct
        }
        else if (local_u8_counter < 3)
    2a52:	fe 01       	movw	r30, r28
    2a54:	e8 59       	subi	r30, 0x98	; 152
    2a56:	ff 4f       	sbci	r31, 0xFF	; 255
    2a58:	80 81       	ld	r24, Z
    2a5a:	83 30       	cpi	r24, 0x03	; 3
    2a5c:	08 f0       	brcs	.+2      	; 0x2a60 <loginFunc+0x3c4>
    2a5e:	d2 c0       	rjmp	.+420    	; 0x2c04 <loginFunc+0x568>
        {
            LCD_voidclearscrean();
    2a60:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <LCD_voidclearscrean>
            LCD_voidsendstring("WRONG USER NAME");
    2a64:	82 e8       	ldi	r24, 0x82	; 130
    2a66:	90 e0       	ldi	r25, 0x00	; 0
    2a68:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <LCD_voidsendstring>
    		Buzzer(1);
    2a6c:	81 e0       	ldi	r24, 0x01	; 1
    2a6e:	0e 94 34 19 	call	0x3268	; 0x3268 <Buzzer>

            LCD_gotoxy(1, 0);
    2a72:	81 e0       	ldi	r24, 0x01	; 1
    2a74:	60 e0       	ldi	r22, 0x00	; 0
    2a76:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <LCD_gotoxy>
            LCD_voidsendstring("Still have");
    2a7a:	82 e9       	ldi	r24, 0x92	; 146
    2a7c:	90 e0       	ldi	r25, 0x00	; 0
    2a7e:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <LCD_voidsendstring>
            LCD_gotoxy(1, 11);
    2a82:	81 e0       	ldi	r24, 0x01	; 1
    2a84:	6b e0       	ldi	r22, 0x0B	; 11
    2a86:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <LCD_gotoxy>
            LCD_voidWriteNumber((3 - local_u8_counter));
    2a8a:	fe 01       	movw	r30, r28
    2a8c:	e8 59       	subi	r30, 0x98	; 152
    2a8e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a90:	80 81       	ld	r24, Z
    2a92:	28 2f       	mov	r18, r24
    2a94:	30 e0       	ldi	r19, 0x00	; 0
    2a96:	83 e0       	ldi	r24, 0x03	; 3
    2a98:	90 e0       	ldi	r25, 0x00	; 0
    2a9a:	82 1b       	sub	r24, r18
    2a9c:	93 0b       	sbc	r25, r19
    2a9e:	aa 27       	eor	r26, r26
    2aa0:	97 fd       	sbrc	r25, 7
    2aa2:	a0 95       	com	r26
    2aa4:	ba 2f       	mov	r27, r26
    2aa6:	bc 01       	movw	r22, r24
    2aa8:	cd 01       	movw	r24, r26
    2aaa:	0e 94 05 0e 	call	0x1c0a	; 0x1c0a <LCD_voidWriteNumber>
            LCD_voidsendstring("tries");
    2aae:	8d e9       	ldi	r24, 0x9D	; 157
    2ab0:	90 e0       	ldi	r25, 0x00	; 0
    2ab2:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <LCD_voidsendstring>
    2ab6:	fe 01       	movw	r30, r28
    2ab8:	ed 5b       	subi	r30, 0xBD	; 189
    2aba:	ff 4f       	sbci	r31, 0xFF	; 255
    2abc:	80 e0       	ldi	r24, 0x00	; 0
    2abe:	90 e0       	ldi	r25, 0x00	; 0
    2ac0:	aa e7       	ldi	r26, 0x7A	; 122
    2ac2:	b4 e4       	ldi	r27, 0x44	; 68
    2ac4:	80 83       	st	Z, r24
    2ac6:	91 83       	std	Z+1, r25	; 0x01
    2ac8:	a2 83       	std	Z+2, r26	; 0x02
    2aca:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2acc:	8e 01       	movw	r16, r28
    2ace:	01 5c       	subi	r16, 0xC1	; 193
    2ad0:	1f 4f       	sbci	r17, 0xFF	; 255
    2ad2:	fe 01       	movw	r30, r28
    2ad4:	ed 5b       	subi	r30, 0xBD	; 189
    2ad6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ad8:	60 81       	ld	r22, Z
    2ada:	71 81       	ldd	r23, Z+1	; 0x01
    2adc:	82 81       	ldd	r24, Z+2	; 0x02
    2ade:	93 81       	ldd	r25, Z+3	; 0x03
    2ae0:	20 e0       	ldi	r18, 0x00	; 0
    2ae2:	30 e0       	ldi	r19, 0x00	; 0
    2ae4:	4a ef       	ldi	r20, 0xFA	; 250
    2ae6:	54 e4       	ldi	r21, 0x44	; 68
    2ae8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2aec:	dc 01       	movw	r26, r24
    2aee:	cb 01       	movw	r24, r22
    2af0:	f8 01       	movw	r30, r16
    2af2:	80 83       	st	Z, r24
    2af4:	91 83       	std	Z+1, r25	; 0x01
    2af6:	a2 83       	std	Z+2, r26	; 0x02
    2af8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2afa:	fe 01       	movw	r30, r28
    2afc:	ff 96       	adiw	r30, 0x3f	; 63
    2afe:	60 81       	ld	r22, Z
    2b00:	71 81       	ldd	r23, Z+1	; 0x01
    2b02:	82 81       	ldd	r24, Z+2	; 0x02
    2b04:	93 81       	ldd	r25, Z+3	; 0x03
    2b06:	20 e0       	ldi	r18, 0x00	; 0
    2b08:	30 e0       	ldi	r19, 0x00	; 0
    2b0a:	40 e8       	ldi	r20, 0x80	; 128
    2b0c:	5f e3       	ldi	r21, 0x3F	; 63
    2b0e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b12:	88 23       	and	r24, r24
    2b14:	2c f4       	brge	.+10     	; 0x2b20 <loginFunc+0x484>
		__ticks = 1;
    2b16:	81 e0       	ldi	r24, 0x01	; 1
    2b18:	90 e0       	ldi	r25, 0x00	; 0
    2b1a:	9e af       	std	Y+62, r25	; 0x3e
    2b1c:	8d af       	std	Y+61, r24	; 0x3d
    2b1e:	46 c0       	rjmp	.+140    	; 0x2bac <loginFunc+0x510>
	else if (__tmp > 65535)
    2b20:	fe 01       	movw	r30, r28
    2b22:	ff 96       	adiw	r30, 0x3f	; 63
    2b24:	60 81       	ld	r22, Z
    2b26:	71 81       	ldd	r23, Z+1	; 0x01
    2b28:	82 81       	ldd	r24, Z+2	; 0x02
    2b2a:	93 81       	ldd	r25, Z+3	; 0x03
    2b2c:	20 e0       	ldi	r18, 0x00	; 0
    2b2e:	3f ef       	ldi	r19, 0xFF	; 255
    2b30:	4f e7       	ldi	r20, 0x7F	; 127
    2b32:	57 e4       	ldi	r21, 0x47	; 71
    2b34:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b38:	18 16       	cp	r1, r24
    2b3a:	64 f5       	brge	.+88     	; 0x2b94 <loginFunc+0x4f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b3c:	fe 01       	movw	r30, r28
    2b3e:	ed 5b       	subi	r30, 0xBD	; 189
    2b40:	ff 4f       	sbci	r31, 0xFF	; 255
    2b42:	60 81       	ld	r22, Z
    2b44:	71 81       	ldd	r23, Z+1	; 0x01
    2b46:	82 81       	ldd	r24, Z+2	; 0x02
    2b48:	93 81       	ldd	r25, Z+3	; 0x03
    2b4a:	20 e0       	ldi	r18, 0x00	; 0
    2b4c:	30 e0       	ldi	r19, 0x00	; 0
    2b4e:	40 e2       	ldi	r20, 0x20	; 32
    2b50:	51 e4       	ldi	r21, 0x41	; 65
    2b52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b56:	dc 01       	movw	r26, r24
    2b58:	cb 01       	movw	r24, r22
    2b5a:	bc 01       	movw	r22, r24
    2b5c:	cd 01       	movw	r24, r26
    2b5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b62:	dc 01       	movw	r26, r24
    2b64:	cb 01       	movw	r24, r22
    2b66:	9e af       	std	Y+62, r25	; 0x3e
    2b68:	8d af       	std	Y+61, r24	; 0x3d
    2b6a:	0f c0       	rjmp	.+30     	; 0x2b8a <loginFunc+0x4ee>
    2b6c:	88 ec       	ldi	r24, 0xC8	; 200
    2b6e:	90 e0       	ldi	r25, 0x00	; 0
    2b70:	9c af       	std	Y+60, r25	; 0x3c
    2b72:	8b af       	std	Y+59, r24	; 0x3b
    2b74:	8b ad       	ldd	r24, Y+59	; 0x3b
    2b76:	9c ad       	ldd	r25, Y+60	; 0x3c
    2b78:	01 97       	sbiw	r24, 0x01	; 1
    2b7a:	f1 f7       	brne	.-4      	; 0x2b78 <loginFunc+0x4dc>
    2b7c:	9c af       	std	Y+60, r25	; 0x3c
    2b7e:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b80:	8d ad       	ldd	r24, Y+61	; 0x3d
    2b82:	9e ad       	ldd	r25, Y+62	; 0x3e
    2b84:	01 97       	sbiw	r24, 0x01	; 1
    2b86:	9e af       	std	Y+62, r25	; 0x3e
    2b88:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b8a:	8d ad       	ldd	r24, Y+61	; 0x3d
    2b8c:	9e ad       	ldd	r25, Y+62	; 0x3e
    2b8e:	00 97       	sbiw	r24, 0x00	; 0
    2b90:	69 f7       	brne	.-38     	; 0x2b6c <loginFunc+0x4d0>
    2b92:	16 c0       	rjmp	.+44     	; 0x2bc0 <loginFunc+0x524>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b94:	fe 01       	movw	r30, r28
    2b96:	ff 96       	adiw	r30, 0x3f	; 63
    2b98:	60 81       	ld	r22, Z
    2b9a:	71 81       	ldd	r23, Z+1	; 0x01
    2b9c:	82 81       	ldd	r24, Z+2	; 0x02
    2b9e:	93 81       	ldd	r25, Z+3	; 0x03
    2ba0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ba4:	dc 01       	movw	r26, r24
    2ba6:	cb 01       	movw	r24, r22
    2ba8:	9e af       	std	Y+62, r25	; 0x3e
    2baa:	8d af       	std	Y+61, r24	; 0x3d
    2bac:	8d ad       	ldd	r24, Y+61	; 0x3d
    2bae:	9e ad       	ldd	r25, Y+62	; 0x3e
    2bb0:	9a af       	std	Y+58, r25	; 0x3a
    2bb2:	89 af       	std	Y+57, r24	; 0x39
    2bb4:	89 ad       	ldd	r24, Y+57	; 0x39
    2bb6:	9a ad       	ldd	r25, Y+58	; 0x3a
    2bb8:	01 97       	sbiw	r24, 0x01	; 1
    2bba:	f1 f7       	brne	.-4      	; 0x2bb8 <loginFunc+0x51c>
    2bbc:	9a af       	std	Y+58, r25	; 0x3a
    2bbe:	89 af       	std	Y+57, r24	; 0x39
            _delay_ms(1000);
            // Make receive UART array NULL for the username
            for (u8 i = 0; i < USER_SIZE; i++)
    2bc0:	fe 01       	movw	r30, r28
    2bc2:	ec 59       	subi	r30, 0x9C	; 156
    2bc4:	ff 4f       	sbci	r31, 0xFF	; 255
    2bc6:	10 82       	st	Z, r1
    2bc8:	16 c0       	rjmp	.+44     	; 0x2bf6 <loginFunc+0x55a>
            {
                local_u8_receiveUART[i] = NULL;
    2bca:	fe 01       	movw	r30, r28
    2bcc:	ec 59       	subi	r30, 0x9C	; 156
    2bce:	ff 4f       	sbci	r31, 0xFF	; 255
    2bd0:	80 81       	ld	r24, Z
    2bd2:	28 2f       	mov	r18, r24
    2bd4:	30 e0       	ldi	r19, 0x00	; 0
    2bd6:	ce 01       	movw	r24, r28
    2bd8:	87 59       	subi	r24, 0x97	; 151
    2bda:	9f 4f       	sbci	r25, 0xFF	; 255
    2bdc:	fc 01       	movw	r30, r24
    2bde:	e2 0f       	add	r30, r18
    2be0:	f3 1f       	adc	r31, r19
    2be2:	10 82       	st	Z, r1
            LCD_gotoxy(1, 11);
            LCD_voidWriteNumber((3 - local_u8_counter));
            LCD_voidsendstring("tries");
            _delay_ms(1000);
            // Make receive UART array NULL for the username
            for (u8 i = 0; i < USER_SIZE; i++)
    2be4:	de 01       	movw	r26, r28
    2be6:	ac 59       	subi	r26, 0x9C	; 156
    2be8:	bf 4f       	sbci	r27, 0xFF	; 255
    2bea:	fe 01       	movw	r30, r28
    2bec:	ec 59       	subi	r30, 0x9C	; 156
    2bee:	ff 4f       	sbci	r31, 0xFF	; 255
    2bf0:	80 81       	ld	r24, Z
    2bf2:	8f 5f       	subi	r24, 0xFF	; 255
    2bf4:	8c 93       	st	X, r24
    2bf6:	fe 01       	movw	r30, r28
    2bf8:	ec 59       	subi	r30, 0x9C	; 156
    2bfa:	ff 4f       	sbci	r31, 0xFF	; 255
    2bfc:	80 81       	ld	r24, Z
    2bfe:	87 30       	cpi	r24, 0x07	; 7
    2c00:	20 f3       	brcs	.-56     	; 0x2bca <loginFunc+0x52e>
    2c02:	92 c0       	rjmp	.+292    	; 0x2d28 <loginFunc+0x68c>
            {
                local_u8_receiveUART[i] = NULL;
            }
        }
        else if (local_u8_counter == 3 && local_u8_userCorrect == FALSE)
    2c04:	fe 01       	movw	r30, r28
    2c06:	e8 59       	subi	r30, 0x98	; 152
    2c08:	ff 4f       	sbci	r31, 0xFF	; 255
    2c0a:	80 81       	ld	r24, Z
    2c0c:	83 30       	cpi	r24, 0x03	; 3
    2c0e:	09 f0       	breq	.+2      	; 0x2c12 <loginFunc+0x576>
    2c10:	8b c0       	rjmp	.+278    	; 0x2d28 <loginFunc+0x68c>
    2c12:	fe 01       	movw	r30, r28
    2c14:	ea 59       	subi	r30, 0x9A	; 154
    2c16:	ff 4f       	sbci	r31, 0xFF	; 255
    2c18:	80 81       	ld	r24, Z
    2c1a:	88 23       	and	r24, r24
    2c1c:	09 f0       	breq	.+2      	; 0x2c20 <loginFunc+0x584>
    2c1e:	84 c0       	rjmp	.+264    	; 0x2d28 <loginFunc+0x68c>
        {
            LCD_voidclearscrean();
    2c20:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <LCD_voidclearscrean>
            LCD_voidsendstring("NO TRIES LEFT");
    2c24:	83 ea       	ldi	r24, 0xA3	; 163
    2c26:	90 e0       	ldi	r25, 0x00	; 0
    2c28:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <LCD_voidsendstring>
            LCD_gotoxy(1, 0);
    2c2c:	81 e0       	ldi	r24, 0x01	; 1
    2c2e:	60 e0       	ldi	r22, 0x00	; 0
    2c30:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <LCD_gotoxy>
            LCD_voidsendstring("SHUTDOWN SYSTEM");
    2c34:	81 eb       	ldi	r24, 0xB1	; 177
    2c36:	90 e0       	ldi	r25, 0x00	; 0
    2c38:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <LCD_voidsendstring>
    		Buzzer(3);
    2c3c:	83 e0       	ldi	r24, 0x03	; 3
    2c3e:	0e 94 34 19 	call	0x3268	; 0x3268 <Buzzer>
    2c42:	80 e0       	ldi	r24, 0x00	; 0
    2c44:	90 e0       	ldi	r25, 0x00	; 0
    2c46:	aa e7       	ldi	r26, 0x7A	; 122
    2c48:	b4 e4       	ldi	r27, 0x44	; 68
    2c4a:	8d ab       	std	Y+53, r24	; 0x35
    2c4c:	9e ab       	std	Y+54, r25	; 0x36
    2c4e:	af ab       	std	Y+55, r26	; 0x37
    2c50:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c52:	6d a9       	ldd	r22, Y+53	; 0x35
    2c54:	7e a9       	ldd	r23, Y+54	; 0x36
    2c56:	8f a9       	ldd	r24, Y+55	; 0x37
    2c58:	98 ad       	ldd	r25, Y+56	; 0x38
    2c5a:	20 e0       	ldi	r18, 0x00	; 0
    2c5c:	30 e0       	ldi	r19, 0x00	; 0
    2c5e:	4a ef       	ldi	r20, 0xFA	; 250
    2c60:	54 e4       	ldi	r21, 0x44	; 68
    2c62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c66:	dc 01       	movw	r26, r24
    2c68:	cb 01       	movw	r24, r22
    2c6a:	89 ab       	std	Y+49, r24	; 0x31
    2c6c:	9a ab       	std	Y+50, r25	; 0x32
    2c6e:	ab ab       	std	Y+51, r26	; 0x33
    2c70:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2c72:	69 a9       	ldd	r22, Y+49	; 0x31
    2c74:	7a a9       	ldd	r23, Y+50	; 0x32
    2c76:	8b a9       	ldd	r24, Y+51	; 0x33
    2c78:	9c a9       	ldd	r25, Y+52	; 0x34
    2c7a:	20 e0       	ldi	r18, 0x00	; 0
    2c7c:	30 e0       	ldi	r19, 0x00	; 0
    2c7e:	40 e8       	ldi	r20, 0x80	; 128
    2c80:	5f e3       	ldi	r21, 0x3F	; 63
    2c82:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c86:	88 23       	and	r24, r24
    2c88:	2c f4       	brge	.+10     	; 0x2c94 <loginFunc+0x5f8>
		__ticks = 1;
    2c8a:	81 e0       	ldi	r24, 0x01	; 1
    2c8c:	90 e0       	ldi	r25, 0x00	; 0
    2c8e:	98 ab       	std	Y+48, r25	; 0x30
    2c90:	8f a7       	std	Y+47, r24	; 0x2f
    2c92:	3f c0       	rjmp	.+126    	; 0x2d12 <loginFunc+0x676>
	else if (__tmp > 65535)
    2c94:	69 a9       	ldd	r22, Y+49	; 0x31
    2c96:	7a a9       	ldd	r23, Y+50	; 0x32
    2c98:	8b a9       	ldd	r24, Y+51	; 0x33
    2c9a:	9c a9       	ldd	r25, Y+52	; 0x34
    2c9c:	20 e0       	ldi	r18, 0x00	; 0
    2c9e:	3f ef       	ldi	r19, 0xFF	; 255
    2ca0:	4f e7       	ldi	r20, 0x7F	; 127
    2ca2:	57 e4       	ldi	r21, 0x47	; 71
    2ca4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ca8:	18 16       	cp	r1, r24
    2caa:	4c f5       	brge	.+82     	; 0x2cfe <loginFunc+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cac:	6d a9       	ldd	r22, Y+53	; 0x35
    2cae:	7e a9       	ldd	r23, Y+54	; 0x36
    2cb0:	8f a9       	ldd	r24, Y+55	; 0x37
    2cb2:	98 ad       	ldd	r25, Y+56	; 0x38
    2cb4:	20 e0       	ldi	r18, 0x00	; 0
    2cb6:	30 e0       	ldi	r19, 0x00	; 0
    2cb8:	40 e2       	ldi	r20, 0x20	; 32
    2cba:	51 e4       	ldi	r21, 0x41	; 65
    2cbc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cc0:	dc 01       	movw	r26, r24
    2cc2:	cb 01       	movw	r24, r22
    2cc4:	bc 01       	movw	r22, r24
    2cc6:	cd 01       	movw	r24, r26
    2cc8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ccc:	dc 01       	movw	r26, r24
    2cce:	cb 01       	movw	r24, r22
    2cd0:	98 ab       	std	Y+48, r25	; 0x30
    2cd2:	8f a7       	std	Y+47, r24	; 0x2f
    2cd4:	0f c0       	rjmp	.+30     	; 0x2cf4 <loginFunc+0x658>
    2cd6:	88 ec       	ldi	r24, 0xC8	; 200
    2cd8:	90 e0       	ldi	r25, 0x00	; 0
    2cda:	9e a7       	std	Y+46, r25	; 0x2e
    2cdc:	8d a7       	std	Y+45, r24	; 0x2d
    2cde:	8d a5       	ldd	r24, Y+45	; 0x2d
    2ce0:	9e a5       	ldd	r25, Y+46	; 0x2e
    2ce2:	01 97       	sbiw	r24, 0x01	; 1
    2ce4:	f1 f7       	brne	.-4      	; 0x2ce2 <loginFunc+0x646>
    2ce6:	9e a7       	std	Y+46, r25	; 0x2e
    2ce8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cea:	8f a5       	ldd	r24, Y+47	; 0x2f
    2cec:	98 a9       	ldd	r25, Y+48	; 0x30
    2cee:	01 97       	sbiw	r24, 0x01	; 1
    2cf0:	98 ab       	std	Y+48, r25	; 0x30
    2cf2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cf4:	8f a5       	ldd	r24, Y+47	; 0x2f
    2cf6:	98 a9       	ldd	r25, Y+48	; 0x30
    2cf8:	00 97       	sbiw	r24, 0x00	; 0
    2cfa:	69 f7       	brne	.-38     	; 0x2cd6 <loginFunc+0x63a>
    2cfc:	25 c0       	rjmp	.+74     	; 0x2d48 <loginFunc+0x6ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cfe:	69 a9       	ldd	r22, Y+49	; 0x31
    2d00:	7a a9       	ldd	r23, Y+50	; 0x32
    2d02:	8b a9       	ldd	r24, Y+51	; 0x33
    2d04:	9c a9       	ldd	r25, Y+52	; 0x34
    2d06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d0a:	dc 01       	movw	r26, r24
    2d0c:	cb 01       	movw	r24, r22
    2d0e:	98 ab       	std	Y+48, r25	; 0x30
    2d10:	8f a7       	std	Y+47, r24	; 0x2f
    2d12:	8f a5       	ldd	r24, Y+47	; 0x2f
    2d14:	98 a9       	ldd	r25, Y+48	; 0x30
    2d16:	9c a7       	std	Y+44, r25	; 0x2c
    2d18:	8b a7       	std	Y+43, r24	; 0x2b
    2d1a:	8b a5       	ldd	r24, Y+43	; 0x2b
    2d1c:	9c a5       	ldd	r25, Y+44	; 0x2c
    2d1e:	01 97       	sbiw	r24, 0x01	; 1
    2d20:	f1 f7       	brne	.-4      	; 0x2d1e <loginFunc+0x682>
    2d22:	9c a7       	std	Y+44, r25	; 0x2c
    2d24:	8b a7       	std	Y+43, r24	; 0x2b
    2d26:	10 c0       	rjmp	.+32     	; 0x2d48 <loginFunc+0x6ac>
    LCD_voidsendstring("WELCOME...");
    _delay_ms(500);

    /**************************************************************/
    // The number of errors in the entry
   for (local_u8_counter = 1; local_u8_counter < 4; local_u8_counter++)
    2d28:	de 01       	movw	r26, r28
    2d2a:	a8 59       	subi	r26, 0x98	; 152
    2d2c:	bf 4f       	sbci	r27, 0xFF	; 255
    2d2e:	fe 01       	movw	r30, r28
    2d30:	e8 59       	subi	r30, 0x98	; 152
    2d32:	ff 4f       	sbci	r31, 0xFF	; 255
    2d34:	80 81       	ld	r24, Z
    2d36:	8f 5f       	subi	r24, 0xFF	; 255
    2d38:	8c 93       	st	X, r24
    2d3a:	fe 01       	movw	r30, r28
    2d3c:	e8 59       	subi	r30, 0x98	; 152
    2d3e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d40:	80 81       	ld	r24, Z
    2d42:	84 30       	cpi	r24, 0x04	; 4
    2d44:	08 f4       	brcc	.+2      	; 0x2d48 <loginFunc+0x6ac>
    2d46:	81 cd       	rjmp	.-1278   	; 0x284a <loginFunc+0x1ae>
            _delay_ms(1000);
            break;
        }
    }
    // ******************************************************************************
    if (local_u8_userCorrect)
    2d48:	fe 01       	movw	r30, r28
    2d4a:	ea 59       	subi	r30, 0x9A	; 154
    2d4c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d4e:	80 81       	ld	r24, Z
    2d50:	88 23       	and	r24, r24
    2d52:	09 f4       	brne	.+2      	; 0x2d56 <loginFunc+0x6ba>
    2d54:	3c c2       	rjmp	.+1144   	; 0x31ce <loginFunc+0xb32>
    {
        for (local_u8_counter = 1; local_u8_counter < 4; local_u8_counter++)
    2d56:	fe 01       	movw	r30, r28
    2d58:	e8 59       	subi	r30, 0x98	; 152
    2d5a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d5c:	81 e0       	ldi	r24, 0x01	; 1
    2d5e:	80 83       	st	Z, r24
    2d60:	2f c2       	rjmp	.+1118   	; 0x31c0 <loginFunc+0xb24>
        {
            u8 local_u8_receiveUARTpass[PASS_SIZE];
            LCD_voidclearscrean();
    2d62:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <LCD_voidclearscrean>
            LCD_voidsendstring("Enter password : ");
    2d66:	81 ec       	ldi	r24, 0xC1	; 193
    2d68:	90 e0       	ldi	r25, 0x00	; 0
    2d6a:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <LCD_voidsendstring>
            UART_ReceiveString(local_u8_receiveUARTpass);
    2d6e:	ce 01       	movw	r24, r28
    2d70:	80 59       	subi	r24, 0x90	; 144
    2d72:	9f 4f       	sbci	r25, 0xFF	; 255
    2d74:	0e 94 12 06 	call	0xc24	; 0xc24 <UART_ReceiveString>
    2d78:	80 e0       	ldi	r24, 0x00	; 0
    2d7a:	90 e0       	ldi	r25, 0x00	; 0
    2d7c:	aa e7       	ldi	r26, 0x7A	; 122
    2d7e:	b4 e4       	ldi	r27, 0x44	; 68
    2d80:	8f a3       	std	Y+39, r24	; 0x27
    2d82:	98 a7       	std	Y+40, r25	; 0x28
    2d84:	a9 a7       	std	Y+41, r26	; 0x29
    2d86:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d88:	6f a1       	ldd	r22, Y+39	; 0x27
    2d8a:	78 a5       	ldd	r23, Y+40	; 0x28
    2d8c:	89 a5       	ldd	r24, Y+41	; 0x29
    2d8e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2d90:	20 e0       	ldi	r18, 0x00	; 0
    2d92:	30 e0       	ldi	r19, 0x00	; 0
    2d94:	4a ef       	ldi	r20, 0xFA	; 250
    2d96:	54 e4       	ldi	r21, 0x44	; 68
    2d98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d9c:	dc 01       	movw	r26, r24
    2d9e:	cb 01       	movw	r24, r22
    2da0:	8b a3       	std	Y+35, r24	; 0x23
    2da2:	9c a3       	std	Y+36, r25	; 0x24
    2da4:	ad a3       	std	Y+37, r26	; 0x25
    2da6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2da8:	6b a1       	ldd	r22, Y+35	; 0x23
    2daa:	7c a1       	ldd	r23, Y+36	; 0x24
    2dac:	8d a1       	ldd	r24, Y+37	; 0x25
    2dae:	9e a1       	ldd	r25, Y+38	; 0x26
    2db0:	20 e0       	ldi	r18, 0x00	; 0
    2db2:	30 e0       	ldi	r19, 0x00	; 0
    2db4:	40 e8       	ldi	r20, 0x80	; 128
    2db6:	5f e3       	ldi	r21, 0x3F	; 63
    2db8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2dbc:	88 23       	and	r24, r24
    2dbe:	2c f4       	brge	.+10     	; 0x2dca <loginFunc+0x72e>
		__ticks = 1;
    2dc0:	81 e0       	ldi	r24, 0x01	; 1
    2dc2:	90 e0       	ldi	r25, 0x00	; 0
    2dc4:	9a a3       	std	Y+34, r25	; 0x22
    2dc6:	89 a3       	std	Y+33, r24	; 0x21
    2dc8:	3f c0       	rjmp	.+126    	; 0x2e48 <loginFunc+0x7ac>
	else if (__tmp > 65535)
    2dca:	6b a1       	ldd	r22, Y+35	; 0x23
    2dcc:	7c a1       	ldd	r23, Y+36	; 0x24
    2dce:	8d a1       	ldd	r24, Y+37	; 0x25
    2dd0:	9e a1       	ldd	r25, Y+38	; 0x26
    2dd2:	20 e0       	ldi	r18, 0x00	; 0
    2dd4:	3f ef       	ldi	r19, 0xFF	; 255
    2dd6:	4f e7       	ldi	r20, 0x7F	; 127
    2dd8:	57 e4       	ldi	r21, 0x47	; 71
    2dda:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2dde:	18 16       	cp	r1, r24
    2de0:	4c f5       	brge	.+82     	; 0x2e34 <loginFunc+0x798>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2de2:	6f a1       	ldd	r22, Y+39	; 0x27
    2de4:	78 a5       	ldd	r23, Y+40	; 0x28
    2de6:	89 a5       	ldd	r24, Y+41	; 0x29
    2de8:	9a a5       	ldd	r25, Y+42	; 0x2a
    2dea:	20 e0       	ldi	r18, 0x00	; 0
    2dec:	30 e0       	ldi	r19, 0x00	; 0
    2dee:	40 e2       	ldi	r20, 0x20	; 32
    2df0:	51 e4       	ldi	r21, 0x41	; 65
    2df2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2df6:	dc 01       	movw	r26, r24
    2df8:	cb 01       	movw	r24, r22
    2dfa:	bc 01       	movw	r22, r24
    2dfc:	cd 01       	movw	r24, r26
    2dfe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e02:	dc 01       	movw	r26, r24
    2e04:	cb 01       	movw	r24, r22
    2e06:	9a a3       	std	Y+34, r25	; 0x22
    2e08:	89 a3       	std	Y+33, r24	; 0x21
    2e0a:	0f c0       	rjmp	.+30     	; 0x2e2a <loginFunc+0x78e>
    2e0c:	88 ec       	ldi	r24, 0xC8	; 200
    2e0e:	90 e0       	ldi	r25, 0x00	; 0
    2e10:	98 a3       	std	Y+32, r25	; 0x20
    2e12:	8f 8f       	std	Y+31, r24	; 0x1f
    2e14:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2e16:	98 a1       	ldd	r25, Y+32	; 0x20
    2e18:	01 97       	sbiw	r24, 0x01	; 1
    2e1a:	f1 f7       	brne	.-4      	; 0x2e18 <loginFunc+0x77c>
    2e1c:	98 a3       	std	Y+32, r25	; 0x20
    2e1e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e20:	89 a1       	ldd	r24, Y+33	; 0x21
    2e22:	9a a1       	ldd	r25, Y+34	; 0x22
    2e24:	01 97       	sbiw	r24, 0x01	; 1
    2e26:	9a a3       	std	Y+34, r25	; 0x22
    2e28:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e2a:	89 a1       	ldd	r24, Y+33	; 0x21
    2e2c:	9a a1       	ldd	r25, Y+34	; 0x22
    2e2e:	00 97       	sbiw	r24, 0x00	; 0
    2e30:	69 f7       	brne	.-38     	; 0x2e0c <loginFunc+0x770>
    2e32:	14 c0       	rjmp	.+40     	; 0x2e5c <loginFunc+0x7c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e34:	6b a1       	ldd	r22, Y+35	; 0x23
    2e36:	7c a1       	ldd	r23, Y+36	; 0x24
    2e38:	8d a1       	ldd	r24, Y+37	; 0x25
    2e3a:	9e a1       	ldd	r25, Y+38	; 0x26
    2e3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e40:	dc 01       	movw	r26, r24
    2e42:	cb 01       	movw	r24, r22
    2e44:	9a a3       	std	Y+34, r25	; 0x22
    2e46:	89 a3       	std	Y+33, r24	; 0x21
    2e48:	89 a1       	ldd	r24, Y+33	; 0x21
    2e4a:	9a a1       	ldd	r25, Y+34	; 0x22
    2e4c:	9e 8f       	std	Y+30, r25	; 0x1e
    2e4e:	8d 8f       	std	Y+29, r24	; 0x1d
    2e50:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2e52:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2e54:	01 97       	sbiw	r24, 0x01	; 1
    2e56:	f1 f7       	brne	.-4      	; 0x2e54 <loginFunc+0x7b8>
    2e58:	9e 8f       	std	Y+30, r25	; 0x1e
    2e5a:	8d 8f       	std	Y+29, r24	; 0x1d
            _delay_ms(1000);
            local_u8_passwordCorrect = FALSE; // Reset password correctness flag
    2e5c:	fe 01       	movw	r30, r28
    2e5e:	eb 59       	subi	r30, 0x9B	; 155
    2e60:	ff 4f       	sbci	r31, 0xFF	; 255
    2e62:	10 82       	st	Z, r1

            for (local_u8_id = 0; local_u8_id < Number_Of_Users; local_u8_id++)
    2e64:	fe 01       	movw	r30, r28
    2e66:	e9 59       	subi	r30, 0x99	; 153
    2e68:	ff 4f       	sbci	r31, 0xFF	; 255
    2e6a:	10 82       	st	Z, r1
    2e6c:	2b c0       	rjmp	.+86     	; 0x2ec4 <loginFunc+0x828>
            {
                if (strcmp(local_u8_receiveUARTpass, loginPass[local_u8_id]) == 0)
    2e6e:	4c ea       	ldi	r20, 0xAC	; 172
    2e70:	51 e0       	ldi	r21, 0x01	; 1
    2e72:	fe 01       	movw	r30, r28
    2e74:	e9 59       	subi	r30, 0x99	; 153
    2e76:	ff 4f       	sbci	r31, 0xFF	; 255
    2e78:	80 81       	ld	r24, Z
    2e7a:	28 2f       	mov	r18, r24
    2e7c:	30 e0       	ldi	r19, 0x00	; 0
    2e7e:	c9 01       	movw	r24, r18
    2e80:	88 0f       	add	r24, r24
    2e82:	99 1f       	adc	r25, r25
    2e84:	88 0f       	add	r24, r24
    2e86:	99 1f       	adc	r25, r25
    2e88:	82 0f       	add	r24, r18
    2e8a:	93 1f       	adc	r25, r19
    2e8c:	9a 01       	movw	r18, r20
    2e8e:	28 0f       	add	r18, r24
    2e90:	39 1f       	adc	r19, r25
    2e92:	ce 01       	movw	r24, r28
    2e94:	80 59       	subi	r24, 0x90	; 144
    2e96:	9f 4f       	sbci	r25, 0xFF	; 255
    2e98:	b9 01       	movw	r22, r18
    2e9a:	0e 94 8b 22 	call	0x4516	; 0x4516 <strcmp>
    2e9e:	00 97       	sbiw	r24, 0x00	; 0
    2ea0:	41 f4       	brne	.+16     	; 0x2eb2 <loginFunc+0x816>
                {
                    LCD_voidclearscrean();
    2ea2:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <LCD_voidclearscrean>
                    local_u8_passwordCorrect = TRUE;
    2ea6:	fe 01       	movw	r30, r28
    2ea8:	eb 59       	subi	r30, 0x9B	; 155
    2eaa:	ff 4f       	sbci	r31, 0xFF	; 255
    2eac:	81 e0       	ldi	r24, 0x01	; 1
    2eae:	80 83       	st	Z, r24
    2eb0:	0f c0       	rjmp	.+30     	; 0x2ed0 <loginFunc+0x834>
            LCD_voidsendstring("Enter password : ");
            UART_ReceiveString(local_u8_receiveUARTpass);
            _delay_ms(1000);
            local_u8_passwordCorrect = FALSE; // Reset password correctness flag

            for (local_u8_id = 0; local_u8_id < Number_Of_Users; local_u8_id++)
    2eb2:	de 01       	movw	r26, r28
    2eb4:	a9 59       	subi	r26, 0x99	; 153
    2eb6:	bf 4f       	sbci	r27, 0xFF	; 255
    2eb8:	fe 01       	movw	r30, r28
    2eba:	e9 59       	subi	r30, 0x99	; 153
    2ebc:	ff 4f       	sbci	r31, 0xFF	; 255
    2ebe:	80 81       	ld	r24, Z
    2ec0:	8f 5f       	subi	r24, 0xFF	; 255
    2ec2:	8c 93       	st	X, r24
    2ec4:	fe 01       	movw	r30, r28
    2ec6:	e9 59       	subi	r30, 0x99	; 153
    2ec8:	ff 4f       	sbci	r31, 0xFF	; 255
    2eca:	80 81       	ld	r24, Z
    2ecc:	8a 30       	cpi	r24, 0x0A	; 10
    2ece:	78 f2       	brcs	.-98     	; 0x2e6e <loginFunc+0x7d2>
                    local_u8_passwordCorrect = TRUE;
                    break;
                }
            }

            if (local_u8_passwordCorrect)
    2ed0:	fe 01       	movw	r30, r28
    2ed2:	eb 59       	subi	r30, 0x9B	; 155
    2ed4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ed6:	80 81       	ld	r24, Z
    2ed8:	88 23       	and	r24, r24
    2eda:	51 f0       	breq	.+20     	; 0x2ef0 <loginFunc+0x854>
            {
                LCD_voidclearscrean();
    2edc:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <LCD_voidclearscrean>
                LCD_voidsendstring("WELCOME HOME ....");
    2ee0:	83 ed       	ldi	r24, 0xD3	; 211
    2ee2:	90 e0       	ldi	r25, 0x00	; 0
    2ee4:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <LCD_voidsendstring>
        		Buzzer(2);
    2ee8:	82 e0       	ldi	r24, 0x02	; 2
    2eea:	0e 94 34 19 	call	0x3268	; 0x3268 <Buzzer>
    2eee:	6f c1       	rjmp	.+734    	; 0x31ce <loginFunc+0xb32>
                break;
            }
            else if (local_u8_counter < 3 && local_u8_passwordCorrect == FALSE)
    2ef0:	fe 01       	movw	r30, r28
    2ef2:	e8 59       	subi	r30, 0x98	; 152
    2ef4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ef6:	80 81       	ld	r24, Z
    2ef8:	83 30       	cpi	r24, 0x03	; 3
    2efa:	08 f0       	brcs	.+2      	; 0x2efe <loginFunc+0x862>
    2efc:	c6 c0       	rjmp	.+396    	; 0x308a <loginFunc+0x9ee>
    2efe:	fe 01       	movw	r30, r28
    2f00:	eb 59       	subi	r30, 0x9B	; 155
    2f02:	ff 4f       	sbci	r31, 0xFF	; 255
    2f04:	80 81       	ld	r24, Z
    2f06:	88 23       	and	r24, r24
    2f08:	09 f0       	breq	.+2      	; 0x2f0c <loginFunc+0x870>
    2f0a:	bf c0       	rjmp	.+382    	; 0x308a <loginFunc+0x9ee>
            {
                LCD_voidclearscrean();
    2f0c:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <LCD_voidclearscrean>
                LCD_voidsendstring("WRONG PASSWORD");
    2f10:	85 ee       	ldi	r24, 0xE5	; 229
    2f12:	90 e0       	ldi	r25, 0x00	; 0
    2f14:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <LCD_voidsendstring>
        		Buzzer(1);
    2f18:	81 e0       	ldi	r24, 0x01	; 1
    2f1a:	0e 94 34 19 	call	0x3268	; 0x3268 <Buzzer>

                LCD_gotoxy(1, 0);
    2f1e:	81 e0       	ldi	r24, 0x01	; 1
    2f20:	60 e0       	ldi	r22, 0x00	; 0
    2f22:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <LCD_gotoxy>
                LCD_voidsendstring("Still have");
    2f26:	82 e9       	ldi	r24, 0x92	; 146
    2f28:	90 e0       	ldi	r25, 0x00	; 0
    2f2a:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <LCD_voidsendstring>
                LCD_gotoxy(1, 10);
    2f2e:	81 e0       	ldi	r24, 0x01	; 1
    2f30:	6a e0       	ldi	r22, 0x0A	; 10
    2f32:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <LCD_gotoxy>
                LCD_voidWriteNumber((3 - local_u8_counter));
    2f36:	fe 01       	movw	r30, r28
    2f38:	e8 59       	subi	r30, 0x98	; 152
    2f3a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f3c:	80 81       	ld	r24, Z
    2f3e:	28 2f       	mov	r18, r24
    2f40:	30 e0       	ldi	r19, 0x00	; 0
    2f42:	83 e0       	ldi	r24, 0x03	; 3
    2f44:	90 e0       	ldi	r25, 0x00	; 0
    2f46:	82 1b       	sub	r24, r18
    2f48:	93 0b       	sbc	r25, r19
    2f4a:	aa 27       	eor	r26, r26
    2f4c:	97 fd       	sbrc	r25, 7
    2f4e:	a0 95       	com	r26
    2f50:	ba 2f       	mov	r27, r26
    2f52:	bc 01       	movw	r22, r24
    2f54:	cd 01       	movw	r24, r26
    2f56:	0e 94 05 0e 	call	0x1c0a	; 0x1c0a <LCD_voidWriteNumber>
                LCD_voidsendstring("tries");
    2f5a:	8d e9       	ldi	r24, 0x9D	; 157
    2f5c:	90 e0       	ldi	r25, 0x00	; 0
    2f5e:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <LCD_voidsendstring>
    2f62:	80 e0       	ldi	r24, 0x00	; 0
    2f64:	90 e0       	ldi	r25, 0x00	; 0
    2f66:	aa e7       	ldi	r26, 0x7A	; 122
    2f68:	b4 e4       	ldi	r27, 0x44	; 68
    2f6a:	89 8f       	std	Y+25, r24	; 0x19
    2f6c:	9a 8f       	std	Y+26, r25	; 0x1a
    2f6e:	ab 8f       	std	Y+27, r26	; 0x1b
    2f70:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f72:	69 8d       	ldd	r22, Y+25	; 0x19
    2f74:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2f76:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2f78:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2f7a:	20 e0       	ldi	r18, 0x00	; 0
    2f7c:	30 e0       	ldi	r19, 0x00	; 0
    2f7e:	4a ef       	ldi	r20, 0xFA	; 250
    2f80:	54 e4       	ldi	r21, 0x44	; 68
    2f82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f86:	dc 01       	movw	r26, r24
    2f88:	cb 01       	movw	r24, r22
    2f8a:	8d 8b       	std	Y+21, r24	; 0x15
    2f8c:	9e 8b       	std	Y+22, r25	; 0x16
    2f8e:	af 8b       	std	Y+23, r26	; 0x17
    2f90:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2f92:	6d 89       	ldd	r22, Y+21	; 0x15
    2f94:	7e 89       	ldd	r23, Y+22	; 0x16
    2f96:	8f 89       	ldd	r24, Y+23	; 0x17
    2f98:	98 8d       	ldd	r25, Y+24	; 0x18
    2f9a:	20 e0       	ldi	r18, 0x00	; 0
    2f9c:	30 e0       	ldi	r19, 0x00	; 0
    2f9e:	40 e8       	ldi	r20, 0x80	; 128
    2fa0:	5f e3       	ldi	r21, 0x3F	; 63
    2fa2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2fa6:	88 23       	and	r24, r24
    2fa8:	2c f4       	brge	.+10     	; 0x2fb4 <loginFunc+0x918>
		__ticks = 1;
    2faa:	81 e0       	ldi	r24, 0x01	; 1
    2fac:	90 e0       	ldi	r25, 0x00	; 0
    2fae:	9c 8b       	std	Y+20, r25	; 0x14
    2fb0:	8b 8b       	std	Y+19, r24	; 0x13
    2fb2:	3f c0       	rjmp	.+126    	; 0x3032 <loginFunc+0x996>
	else if (__tmp > 65535)
    2fb4:	6d 89       	ldd	r22, Y+21	; 0x15
    2fb6:	7e 89       	ldd	r23, Y+22	; 0x16
    2fb8:	8f 89       	ldd	r24, Y+23	; 0x17
    2fba:	98 8d       	ldd	r25, Y+24	; 0x18
    2fbc:	20 e0       	ldi	r18, 0x00	; 0
    2fbe:	3f ef       	ldi	r19, 0xFF	; 255
    2fc0:	4f e7       	ldi	r20, 0x7F	; 127
    2fc2:	57 e4       	ldi	r21, 0x47	; 71
    2fc4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2fc8:	18 16       	cp	r1, r24
    2fca:	4c f5       	brge	.+82     	; 0x301e <loginFunc+0x982>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fcc:	69 8d       	ldd	r22, Y+25	; 0x19
    2fce:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2fd0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2fd2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2fd4:	20 e0       	ldi	r18, 0x00	; 0
    2fd6:	30 e0       	ldi	r19, 0x00	; 0
    2fd8:	40 e2       	ldi	r20, 0x20	; 32
    2fda:	51 e4       	ldi	r21, 0x41	; 65
    2fdc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fe0:	dc 01       	movw	r26, r24
    2fe2:	cb 01       	movw	r24, r22
    2fe4:	bc 01       	movw	r22, r24
    2fe6:	cd 01       	movw	r24, r26
    2fe8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fec:	dc 01       	movw	r26, r24
    2fee:	cb 01       	movw	r24, r22
    2ff0:	9c 8b       	std	Y+20, r25	; 0x14
    2ff2:	8b 8b       	std	Y+19, r24	; 0x13
    2ff4:	0f c0       	rjmp	.+30     	; 0x3014 <loginFunc+0x978>
    2ff6:	88 ec       	ldi	r24, 0xC8	; 200
    2ff8:	90 e0       	ldi	r25, 0x00	; 0
    2ffa:	9a 8b       	std	Y+18, r25	; 0x12
    2ffc:	89 8b       	std	Y+17, r24	; 0x11
    2ffe:	89 89       	ldd	r24, Y+17	; 0x11
    3000:	9a 89       	ldd	r25, Y+18	; 0x12
    3002:	01 97       	sbiw	r24, 0x01	; 1
    3004:	f1 f7       	brne	.-4      	; 0x3002 <loginFunc+0x966>
    3006:	9a 8b       	std	Y+18, r25	; 0x12
    3008:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    300a:	8b 89       	ldd	r24, Y+19	; 0x13
    300c:	9c 89       	ldd	r25, Y+20	; 0x14
    300e:	01 97       	sbiw	r24, 0x01	; 1
    3010:	9c 8b       	std	Y+20, r25	; 0x14
    3012:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3014:	8b 89       	ldd	r24, Y+19	; 0x13
    3016:	9c 89       	ldd	r25, Y+20	; 0x14
    3018:	00 97       	sbiw	r24, 0x00	; 0
    301a:	69 f7       	brne	.-38     	; 0x2ff6 <loginFunc+0x95a>
    301c:	14 c0       	rjmp	.+40     	; 0x3046 <loginFunc+0x9aa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    301e:	6d 89       	ldd	r22, Y+21	; 0x15
    3020:	7e 89       	ldd	r23, Y+22	; 0x16
    3022:	8f 89       	ldd	r24, Y+23	; 0x17
    3024:	98 8d       	ldd	r25, Y+24	; 0x18
    3026:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    302a:	dc 01       	movw	r26, r24
    302c:	cb 01       	movw	r24, r22
    302e:	9c 8b       	std	Y+20, r25	; 0x14
    3030:	8b 8b       	std	Y+19, r24	; 0x13
    3032:	8b 89       	ldd	r24, Y+19	; 0x13
    3034:	9c 89       	ldd	r25, Y+20	; 0x14
    3036:	98 8b       	std	Y+16, r25	; 0x10
    3038:	8f 87       	std	Y+15, r24	; 0x0f
    303a:	8f 85       	ldd	r24, Y+15	; 0x0f
    303c:	98 89       	ldd	r25, Y+16	; 0x10
    303e:	01 97       	sbiw	r24, 0x01	; 1
    3040:	f1 f7       	brne	.-4      	; 0x303e <loginFunc+0x9a2>
    3042:	98 8b       	std	Y+16, r25	; 0x10
    3044:	8f 87       	std	Y+15, r24	; 0x0f
                _delay_ms(1000);

                // Make receive UART array NULL for the password
                for (u8 i = 0; i < PASS_SIZE; i++)
    3046:	fe 01       	movw	r30, r28
    3048:	ed 59       	subi	r30, 0x9D	; 157
    304a:	ff 4f       	sbci	r31, 0xFF	; 255
    304c:	10 82       	st	Z, r1
    304e:	16 c0       	rjmp	.+44     	; 0x307c <loginFunc+0x9e0>
                {
                    local_u8_receiveUARTpass[i] = NULL;
    3050:	fe 01       	movw	r30, r28
    3052:	ed 59       	subi	r30, 0x9D	; 157
    3054:	ff 4f       	sbci	r31, 0xFF	; 255
    3056:	80 81       	ld	r24, Z
    3058:	28 2f       	mov	r18, r24
    305a:	30 e0       	ldi	r19, 0x00	; 0
    305c:	ce 01       	movw	r24, r28
    305e:	80 59       	subi	r24, 0x90	; 144
    3060:	9f 4f       	sbci	r25, 0xFF	; 255
    3062:	fc 01       	movw	r30, r24
    3064:	e2 0f       	add	r30, r18
    3066:	f3 1f       	adc	r31, r19
    3068:	10 82       	st	Z, r1
                LCD_voidWriteNumber((3 - local_u8_counter));
                LCD_voidsendstring("tries");
                _delay_ms(1000);

                // Make receive UART array NULL for the password
                for (u8 i = 0; i < PASS_SIZE; i++)
    306a:	de 01       	movw	r26, r28
    306c:	ad 59       	subi	r26, 0x9D	; 157
    306e:	bf 4f       	sbci	r27, 0xFF	; 255
    3070:	fe 01       	movw	r30, r28
    3072:	ed 59       	subi	r30, 0x9D	; 157
    3074:	ff 4f       	sbci	r31, 0xFF	; 255
    3076:	80 81       	ld	r24, Z
    3078:	8f 5f       	subi	r24, 0xFF	; 255
    307a:	8c 93       	st	X, r24
    307c:	fe 01       	movw	r30, r28
    307e:	ed 59       	subi	r30, 0x9D	; 157
    3080:	ff 4f       	sbci	r31, 0xFF	; 255
    3082:	80 81       	ld	r24, Z
    3084:	85 30       	cpi	r24, 0x05	; 5
    3086:	20 f3       	brcs	.-56     	; 0x3050 <loginFunc+0x9b4>
    3088:	92 c0       	rjmp	.+292    	; 0x31ae <loginFunc+0xb12>
                {
                    local_u8_receiveUARTpass[i] = NULL;
                }
            }
            else if (local_u8_counter == 3 && local_u8_passwordCorrect == 0)
    308a:	fe 01       	movw	r30, r28
    308c:	e8 59       	subi	r30, 0x98	; 152
    308e:	ff 4f       	sbci	r31, 0xFF	; 255
    3090:	80 81       	ld	r24, Z
    3092:	83 30       	cpi	r24, 0x03	; 3
    3094:	09 f0       	breq	.+2      	; 0x3098 <loginFunc+0x9fc>
    3096:	8b c0       	rjmp	.+278    	; 0x31ae <loginFunc+0xb12>
    3098:	fe 01       	movw	r30, r28
    309a:	eb 59       	subi	r30, 0x9B	; 155
    309c:	ff 4f       	sbci	r31, 0xFF	; 255
    309e:	80 81       	ld	r24, Z
    30a0:	88 23       	and	r24, r24
    30a2:	09 f0       	breq	.+2      	; 0x30a6 <loginFunc+0xa0a>
    30a4:	84 c0       	rjmp	.+264    	; 0x31ae <loginFunc+0xb12>
            {
                LCD_voidclearscrean();
    30a6:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <LCD_voidclearscrean>
                LCD_voidsendstring("NO TRIES LEFT");
    30aa:	83 ea       	ldi	r24, 0xA3	; 163
    30ac:	90 e0       	ldi	r25, 0x00	; 0
    30ae:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <LCD_voidsendstring>
                LCD_gotoxy(1, 0);
    30b2:	81 e0       	ldi	r24, 0x01	; 1
    30b4:	60 e0       	ldi	r22, 0x00	; 0
    30b6:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <LCD_gotoxy>
                LCD_voidsendstring("SHUTDOWN SYSTEM");
    30ba:	81 eb       	ldi	r24, 0xB1	; 177
    30bc:	90 e0       	ldi	r25, 0x00	; 0
    30be:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <LCD_voidsendstring>
    30c2:	80 e0       	ldi	r24, 0x00	; 0
    30c4:	90 e0       	ldi	r25, 0x00	; 0
    30c6:	aa e7       	ldi	r26, 0x7A	; 122
    30c8:	b4 e4       	ldi	r27, 0x44	; 68
    30ca:	8b 87       	std	Y+11, r24	; 0x0b
    30cc:	9c 87       	std	Y+12, r25	; 0x0c
    30ce:	ad 87       	std	Y+13, r26	; 0x0d
    30d0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30d2:	6b 85       	ldd	r22, Y+11	; 0x0b
    30d4:	7c 85       	ldd	r23, Y+12	; 0x0c
    30d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    30d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    30da:	20 e0       	ldi	r18, 0x00	; 0
    30dc:	30 e0       	ldi	r19, 0x00	; 0
    30de:	4a ef       	ldi	r20, 0xFA	; 250
    30e0:	54 e4       	ldi	r21, 0x44	; 68
    30e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30e6:	dc 01       	movw	r26, r24
    30e8:	cb 01       	movw	r24, r22
    30ea:	8f 83       	std	Y+7, r24	; 0x07
    30ec:	98 87       	std	Y+8, r25	; 0x08
    30ee:	a9 87       	std	Y+9, r26	; 0x09
    30f0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    30f2:	6f 81       	ldd	r22, Y+7	; 0x07
    30f4:	78 85       	ldd	r23, Y+8	; 0x08
    30f6:	89 85       	ldd	r24, Y+9	; 0x09
    30f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    30fa:	20 e0       	ldi	r18, 0x00	; 0
    30fc:	30 e0       	ldi	r19, 0x00	; 0
    30fe:	40 e8       	ldi	r20, 0x80	; 128
    3100:	5f e3       	ldi	r21, 0x3F	; 63
    3102:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3106:	88 23       	and	r24, r24
    3108:	2c f4       	brge	.+10     	; 0x3114 <loginFunc+0xa78>
		__ticks = 1;
    310a:	81 e0       	ldi	r24, 0x01	; 1
    310c:	90 e0       	ldi	r25, 0x00	; 0
    310e:	9e 83       	std	Y+6, r25	; 0x06
    3110:	8d 83       	std	Y+5, r24	; 0x05
    3112:	3f c0       	rjmp	.+126    	; 0x3192 <loginFunc+0xaf6>
	else if (__tmp > 65535)
    3114:	6f 81       	ldd	r22, Y+7	; 0x07
    3116:	78 85       	ldd	r23, Y+8	; 0x08
    3118:	89 85       	ldd	r24, Y+9	; 0x09
    311a:	9a 85       	ldd	r25, Y+10	; 0x0a
    311c:	20 e0       	ldi	r18, 0x00	; 0
    311e:	3f ef       	ldi	r19, 0xFF	; 255
    3120:	4f e7       	ldi	r20, 0x7F	; 127
    3122:	57 e4       	ldi	r21, 0x47	; 71
    3124:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3128:	18 16       	cp	r1, r24
    312a:	4c f5       	brge	.+82     	; 0x317e <loginFunc+0xae2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    312c:	6b 85       	ldd	r22, Y+11	; 0x0b
    312e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3130:	8d 85       	ldd	r24, Y+13	; 0x0d
    3132:	9e 85       	ldd	r25, Y+14	; 0x0e
    3134:	20 e0       	ldi	r18, 0x00	; 0
    3136:	30 e0       	ldi	r19, 0x00	; 0
    3138:	40 e2       	ldi	r20, 0x20	; 32
    313a:	51 e4       	ldi	r21, 0x41	; 65
    313c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3140:	dc 01       	movw	r26, r24
    3142:	cb 01       	movw	r24, r22
    3144:	bc 01       	movw	r22, r24
    3146:	cd 01       	movw	r24, r26
    3148:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    314c:	dc 01       	movw	r26, r24
    314e:	cb 01       	movw	r24, r22
    3150:	9e 83       	std	Y+6, r25	; 0x06
    3152:	8d 83       	std	Y+5, r24	; 0x05
    3154:	0f c0       	rjmp	.+30     	; 0x3174 <loginFunc+0xad8>
    3156:	88 ec       	ldi	r24, 0xC8	; 200
    3158:	90 e0       	ldi	r25, 0x00	; 0
    315a:	9c 83       	std	Y+4, r25	; 0x04
    315c:	8b 83       	std	Y+3, r24	; 0x03
    315e:	8b 81       	ldd	r24, Y+3	; 0x03
    3160:	9c 81       	ldd	r25, Y+4	; 0x04
    3162:	01 97       	sbiw	r24, 0x01	; 1
    3164:	f1 f7       	brne	.-4      	; 0x3162 <loginFunc+0xac6>
    3166:	9c 83       	std	Y+4, r25	; 0x04
    3168:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    316a:	8d 81       	ldd	r24, Y+5	; 0x05
    316c:	9e 81       	ldd	r25, Y+6	; 0x06
    316e:	01 97       	sbiw	r24, 0x01	; 1
    3170:	9e 83       	std	Y+6, r25	; 0x06
    3172:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3174:	8d 81       	ldd	r24, Y+5	; 0x05
    3176:	9e 81       	ldd	r25, Y+6	; 0x06
    3178:	00 97       	sbiw	r24, 0x00	; 0
    317a:	69 f7       	brne	.-38     	; 0x3156 <loginFunc+0xaba>
    317c:	14 c0       	rjmp	.+40     	; 0x31a6 <loginFunc+0xb0a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    317e:	6f 81       	ldd	r22, Y+7	; 0x07
    3180:	78 85       	ldd	r23, Y+8	; 0x08
    3182:	89 85       	ldd	r24, Y+9	; 0x09
    3184:	9a 85       	ldd	r25, Y+10	; 0x0a
    3186:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    318a:	dc 01       	movw	r26, r24
    318c:	cb 01       	movw	r24, r22
    318e:	9e 83       	std	Y+6, r25	; 0x06
    3190:	8d 83       	std	Y+5, r24	; 0x05
    3192:	8d 81       	ldd	r24, Y+5	; 0x05
    3194:	9e 81       	ldd	r25, Y+6	; 0x06
    3196:	9a 83       	std	Y+2, r25	; 0x02
    3198:	89 83       	std	Y+1, r24	; 0x01
    319a:	89 81       	ldd	r24, Y+1	; 0x01
    319c:	9a 81       	ldd	r25, Y+2	; 0x02
    319e:	01 97       	sbiw	r24, 0x01	; 1
    31a0:	f1 f7       	brne	.-4      	; 0x319e <loginFunc+0xb02>
    31a2:	9a 83       	std	Y+2, r25	; 0x02
    31a4:	89 83       	std	Y+1, r24	; 0x01
                _delay_ms(1000);
        		Buzzer(3);
    31a6:	83 e0       	ldi	r24, 0x03	; 3
    31a8:	0e 94 34 19 	call	0x3268	; 0x3268 <Buzzer>
    31ac:	10 c0       	rjmp	.+32     	; 0x31ce <loginFunc+0xb32>
        }
    }
    // ******************************************************************************
    if (local_u8_userCorrect)
    {
        for (local_u8_counter = 1; local_u8_counter < 4; local_u8_counter++)
    31ae:	de 01       	movw	r26, r28
    31b0:	a8 59       	subi	r26, 0x98	; 152
    31b2:	bf 4f       	sbci	r27, 0xFF	; 255
    31b4:	fe 01       	movw	r30, r28
    31b6:	e8 59       	subi	r30, 0x98	; 152
    31b8:	ff 4f       	sbci	r31, 0xFF	; 255
    31ba:	80 81       	ld	r24, Z
    31bc:	8f 5f       	subi	r24, 0xFF	; 255
    31be:	8c 93       	st	X, r24
    31c0:	fe 01       	movw	r30, r28
    31c2:	e8 59       	subi	r30, 0x98	; 152
    31c4:	ff 4f       	sbci	r31, 0xFF	; 255
    31c6:	80 81       	ld	r24, Z
    31c8:	84 30       	cpi	r24, 0x04	; 4
    31ca:	08 f4       	brcc	.+2      	; 0x31ce <loginFunc+0xb32>
    31cc:	ca cd       	rjmp	.-1132   	; 0x2d62 <loginFunc+0x6c6>
                break;
            }
        }
    }

    return (local_u8_passwordCorrect && local_u8_userCorrect);
    31ce:	fe 01       	movw	r30, r28
    31d0:	eb 59       	subi	r30, 0x9B	; 155
    31d2:	ff 4f       	sbci	r31, 0xFF	; 255
    31d4:	80 81       	ld	r24, Z
    31d6:	88 23       	and	r24, r24
    31d8:	69 f0       	breq	.+26     	; 0x31f4 <loginFunc+0xb58>
    31da:	fe 01       	movw	r30, r28
    31dc:	ea 59       	subi	r30, 0x9A	; 154
    31de:	ff 4f       	sbci	r31, 0xFF	; 255
    31e0:	80 81       	ld	r24, Z
    31e2:	88 23       	and	r24, r24
    31e4:	39 f0       	breq	.+14     	; 0x31f4 <loginFunc+0xb58>
    31e6:	81 e0       	ldi	r24, 0x01	; 1
    31e8:	90 e0       	ldi	r25, 0x00	; 0
    31ea:	e7 96       	adiw	r28, 0x37	; 55
    31ec:	9f af       	std	Y+63, r25	; 0x3f
    31ee:	8e af       	std	Y+62, r24	; 0x3e
    31f0:	e7 97       	sbiw	r28, 0x37	; 55
    31f2:	04 c0       	rjmp	.+8      	; 0x31fc <loginFunc+0xb60>
    31f4:	e7 96       	adiw	r28, 0x37	; 55
    31f6:	1f ae       	std	Y+63, r1	; 0x3f
    31f8:	1e ae       	std	Y+62, r1	; 0x3e
    31fa:	e7 97       	sbiw	r28, 0x37	; 55
    31fc:	e6 96       	adiw	r28, 0x36	; 54
    31fe:	8f ad       	ldd	r24, Y+63	; 0x3f
    3200:	e6 97       	sbiw	r28, 0x36	; 54
}
    3202:	ca 58       	subi	r28, 0x8A	; 138
    3204:	df 4f       	sbci	r29, 0xFF	; 255
    3206:	0f b6       	in	r0, 0x3f	; 63
    3208:	f8 94       	cli
    320a:	de bf       	out	0x3e, r29	; 62
    320c:	0f be       	out	0x3f, r0	; 63
    320e:	cd bf       	out	0x3d, r28	; 61
    3210:	cf 91       	pop	r28
    3212:	df 91       	pop	r29
    3214:	1f 91       	pop	r17
    3216:	0f 91       	pop	r16
    3218:	08 95       	ret

0000321a <Setup_Pins>:

void Setup_Pins()
{
    321a:	df 93       	push	r29
    321c:	cf 93       	push	r28
    321e:	cd b7       	in	r28, 0x3d	; 61
    3220:	de b7       	in	r29, 0x3e	; 62
    /*RX pin*/
    Dio_voidSetPinDirection(RX_TX_PORT, RX_PIN, DIO_INPUT);
    3222:	83 e0       	ldi	r24, 0x03	; 3
    3224:	60 e0       	ldi	r22, 0x00	; 0
    3226:	40 e0       	ldi	r20, 0x00	; 0
    3228:	0e 94 d9 0e 	call	0x1db2	; 0x1db2 <Dio_voidSetPinDirection>
    /*TX pin*/
    Dio_voidSetPinDirection(RX_TX_PORT, TX_PIN, DIO_OUTPUT);
    322c:	83 e0       	ldi	r24, 0x03	; 3
    322e:	61 e0       	ldi	r22, 0x01	; 1
    3230:	41 e0       	ldi	r20, 0x01	; 1
    3232:	0e 94 d9 0e 	call	0x1db2	; 0x1db2 <Dio_voidSetPinDirection>
    /*Buzzer*/
    Dio_voidSetPinDirection(BUZZER_PORT, BUZZER_PIN, DIO_OUTPUT);
    3236:	80 e0       	ldi	r24, 0x00	; 0
    3238:	61 e0       	ldi	r22, 0x01	; 1
    323a:	41 e0       	ldi	r20, 0x01	; 1
    323c:	0e 94 d9 0e 	call	0x1db2	; 0x1db2 <Dio_voidSetPinDirection>
    /*Servo Motor*/
	Dio_voidSetPinDirection( SERVO_PORT , SERVO_PIN, DIO_OUTPUT);
    3240:	83 e0       	ldi	r24, 0x03	; 3
    3242:	65 e0       	ldi	r22, 0x05	; 5
    3244:	41 e0       	ldi	r20, 0x01	; 1
    3246:	0e 94 d9 0e 	call	0x1db2	; 0x1db2 <Dio_voidSetPinDirection>
	/*DC Motor*/
    Dio_voidSetPinDirection(DC_MOTOR_PORT, DC_MOTOR_PIN, DIO_OUTPUT);
    324a:	80 e0       	ldi	r24, 0x00	; 0
    324c:	62 e0       	ldi	r22, 0x02	; 2
    324e:	41 e0       	ldi	r20, 0x01	; 1
    3250:	0e 94 d9 0e 	call	0x1db2	; 0x1db2 <Dio_voidSetPinDirection>
    /*LM35*/
    Dio_voidSetPinDirection(LM35_PORT, LM35_PIN, DIO_INPUT);
    3254:	80 e0       	ldi	r24, 0x00	; 0
    3256:	60 e0       	ldi	r22, 0x00	; 0
    3258:	40 e0       	ldi	r20, 0x00	; 0
    325a:	0e 94 d9 0e 	call	0x1db2	; 0x1db2 <Dio_voidSetPinDirection>
    /*initialize led pins direction*/
    LED_init();
    325e:	0e 94 f0 1f 	call	0x3fe0	; 0x3fe0 <LED_init>
}
    3262:	cf 91       	pop	r28
    3264:	df 91       	pop	r29
    3266:	08 95       	ret

00003268 <Buzzer>:

void Buzzer(u8 buz_mode)
{
    3268:	0f 93       	push	r16
    326a:	1f 93       	push	r17
    326c:	df 93       	push	r29
    326e:	cf 93       	push	r28
    3270:	cd b7       	in	r28, 0x3d	; 61
    3272:	de b7       	in	r29, 0x3e	; 62
    3274:	c5 56       	subi	r28, 0x65	; 101
    3276:	d0 40       	sbci	r29, 0x00	; 0
    3278:	0f b6       	in	r0, 0x3f	; 63
    327a:	f8 94       	cli
    327c:	de bf       	out	0x3e, r29	; 62
    327e:	0f be       	out	0x3f, r0	; 63
    3280:	cd bf       	out	0x3d, r28	; 61
    3282:	fe 01       	movw	r30, r28
    3284:	ed 59       	subi	r30, 0x9D	; 157
    3286:	ff 4f       	sbci	r31, 0xFF	; 255
    3288:	80 83       	st	Z, r24
	switch(buz_mode)
    328a:	fe 01       	movw	r30, r28
    328c:	ed 59       	subi	r30, 0x9D	; 157
    328e:	ff 4f       	sbci	r31, 0xFF	; 255
    3290:	80 81       	ld	r24, Z
    3292:	28 2f       	mov	r18, r24
    3294:	30 e0       	ldi	r19, 0x00	; 0
    3296:	a6 96       	adiw	r28, 0x26	; 38
    3298:	3f af       	std	Y+63, r19	; 0x3f
    329a:	2e af       	std	Y+62, r18	; 0x3e
    329c:	a6 97       	sbiw	r28, 0x26	; 38
    329e:	a6 96       	adiw	r28, 0x26	; 38
    32a0:	8e ad       	ldd	r24, Y+62	; 0x3e
    32a2:	9f ad       	ldd	r25, Y+63	; 0x3f
    32a4:	a6 97       	sbiw	r28, 0x26	; 38
    32a6:	82 30       	cpi	r24, 0x02	; 2
    32a8:	91 05       	cpc	r25, r1
    32aa:	09 f4       	brne	.+2      	; 0x32ae <Buzzer+0x46>
    32ac:	82 c1       	rjmp	.+772    	; 0x35b2 <Buzzer+0x34a>
    32ae:	a6 96       	adiw	r28, 0x26	; 38
    32b0:	ee ad       	ldd	r30, Y+62	; 0x3e
    32b2:	ff ad       	ldd	r31, Y+63	; 0x3f
    32b4:	a6 97       	sbiw	r28, 0x26	; 38
    32b6:	e3 30       	cpi	r30, 0x03	; 3
    32b8:	f1 05       	cpc	r31, r1
    32ba:	09 f4       	brne	.+2      	; 0x32be <Buzzer+0x56>
    32bc:	6a c3       	rjmp	.+1748   	; 0x3992 <Buzzer+0x72a>
    32be:	a6 96       	adiw	r28, 0x26	; 38
    32c0:	2e ad       	ldd	r18, Y+62	; 0x3e
    32c2:	3f ad       	ldd	r19, Y+63	; 0x3f
    32c4:	a6 97       	sbiw	r28, 0x26	; 38
    32c6:	21 30       	cpi	r18, 0x01	; 1
    32c8:	31 05       	cpc	r19, r1
    32ca:	09 f0       	breq	.+2      	; 0x32ce <Buzzer+0x66>
    32cc:	d9 c3       	rjmp	.+1970   	; 0x3a80 <Buzzer+0x818>
	{
		case 1:
    		Dio_voidSetPinValue(BUZZER_PORT, BUZZER_PIN, DIO_HIGH);
    32ce:	80 e0       	ldi	r24, 0x00	; 0
    32d0:	61 e0       	ldi	r22, 0x01	; 1
    32d2:	41 e0       	ldi	r20, 0x01	; 1
    32d4:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <Dio_voidSetPinValue>
    32d8:	fe 01       	movw	r30, r28
    32da:	e1 5a       	subi	r30, 0xA1	; 161
    32dc:	ff 4f       	sbci	r31, 0xFF	; 255
    32de:	80 e0       	ldi	r24, 0x00	; 0
    32e0:	90 e0       	ldi	r25, 0x00	; 0
    32e2:	aa e7       	ldi	r26, 0x7A	; 122
    32e4:	b4 e4       	ldi	r27, 0x44	; 68
    32e6:	80 83       	st	Z, r24
    32e8:	91 83       	std	Z+1, r25	; 0x01
    32ea:	a2 83       	std	Z+2, r26	; 0x02
    32ec:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32ee:	8e 01       	movw	r16, r28
    32f0:	05 5a       	subi	r16, 0xA5	; 165
    32f2:	1f 4f       	sbci	r17, 0xFF	; 255
    32f4:	fe 01       	movw	r30, r28
    32f6:	e1 5a       	subi	r30, 0xA1	; 161
    32f8:	ff 4f       	sbci	r31, 0xFF	; 255
    32fa:	60 81       	ld	r22, Z
    32fc:	71 81       	ldd	r23, Z+1	; 0x01
    32fe:	82 81       	ldd	r24, Z+2	; 0x02
    3300:	93 81       	ldd	r25, Z+3	; 0x03
    3302:	20 e0       	ldi	r18, 0x00	; 0
    3304:	30 e0       	ldi	r19, 0x00	; 0
    3306:	4a ef       	ldi	r20, 0xFA	; 250
    3308:	54 e4       	ldi	r21, 0x44	; 68
    330a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    330e:	dc 01       	movw	r26, r24
    3310:	cb 01       	movw	r24, r22
    3312:	f8 01       	movw	r30, r16
    3314:	80 83       	st	Z, r24
    3316:	91 83       	std	Z+1, r25	; 0x01
    3318:	a2 83       	std	Z+2, r26	; 0x02
    331a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    331c:	fe 01       	movw	r30, r28
    331e:	e5 5a       	subi	r30, 0xA5	; 165
    3320:	ff 4f       	sbci	r31, 0xFF	; 255
    3322:	60 81       	ld	r22, Z
    3324:	71 81       	ldd	r23, Z+1	; 0x01
    3326:	82 81       	ldd	r24, Z+2	; 0x02
    3328:	93 81       	ldd	r25, Z+3	; 0x03
    332a:	20 e0       	ldi	r18, 0x00	; 0
    332c:	30 e0       	ldi	r19, 0x00	; 0
    332e:	40 e8       	ldi	r20, 0x80	; 128
    3330:	5f e3       	ldi	r21, 0x3F	; 63
    3332:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3336:	88 23       	and	r24, r24
    3338:	44 f4       	brge	.+16     	; 0x334a <Buzzer+0xe2>
		__ticks = 1;
    333a:	fe 01       	movw	r30, r28
    333c:	e7 5a       	subi	r30, 0xA7	; 167
    333e:	ff 4f       	sbci	r31, 0xFF	; 255
    3340:	81 e0       	ldi	r24, 0x01	; 1
    3342:	90 e0       	ldi	r25, 0x00	; 0
    3344:	91 83       	std	Z+1, r25	; 0x01
    3346:	80 83       	st	Z, r24
    3348:	64 c0       	rjmp	.+200    	; 0x3412 <Buzzer+0x1aa>
	else if (__tmp > 65535)
    334a:	fe 01       	movw	r30, r28
    334c:	e5 5a       	subi	r30, 0xA5	; 165
    334e:	ff 4f       	sbci	r31, 0xFF	; 255
    3350:	60 81       	ld	r22, Z
    3352:	71 81       	ldd	r23, Z+1	; 0x01
    3354:	82 81       	ldd	r24, Z+2	; 0x02
    3356:	93 81       	ldd	r25, Z+3	; 0x03
    3358:	20 e0       	ldi	r18, 0x00	; 0
    335a:	3f ef       	ldi	r19, 0xFF	; 255
    335c:	4f e7       	ldi	r20, 0x7F	; 127
    335e:	57 e4       	ldi	r21, 0x47	; 71
    3360:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3364:	18 16       	cp	r1, r24
    3366:	0c f0       	brlt	.+2      	; 0x336a <Buzzer+0x102>
    3368:	43 c0       	rjmp	.+134    	; 0x33f0 <Buzzer+0x188>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    336a:	fe 01       	movw	r30, r28
    336c:	e1 5a       	subi	r30, 0xA1	; 161
    336e:	ff 4f       	sbci	r31, 0xFF	; 255
    3370:	60 81       	ld	r22, Z
    3372:	71 81       	ldd	r23, Z+1	; 0x01
    3374:	82 81       	ldd	r24, Z+2	; 0x02
    3376:	93 81       	ldd	r25, Z+3	; 0x03
    3378:	20 e0       	ldi	r18, 0x00	; 0
    337a:	30 e0       	ldi	r19, 0x00	; 0
    337c:	40 e2       	ldi	r20, 0x20	; 32
    337e:	51 e4       	ldi	r21, 0x41	; 65
    3380:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3384:	dc 01       	movw	r26, r24
    3386:	cb 01       	movw	r24, r22
    3388:	8e 01       	movw	r16, r28
    338a:	07 5a       	subi	r16, 0xA7	; 167
    338c:	1f 4f       	sbci	r17, 0xFF	; 255
    338e:	bc 01       	movw	r22, r24
    3390:	cd 01       	movw	r24, r26
    3392:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3396:	dc 01       	movw	r26, r24
    3398:	cb 01       	movw	r24, r22
    339a:	f8 01       	movw	r30, r16
    339c:	91 83       	std	Z+1, r25	; 0x01
    339e:	80 83       	st	Z, r24
    33a0:	1f c0       	rjmp	.+62     	; 0x33e0 <Buzzer+0x178>
    33a2:	fe 01       	movw	r30, r28
    33a4:	e9 5a       	subi	r30, 0xA9	; 169
    33a6:	ff 4f       	sbci	r31, 0xFF	; 255
    33a8:	88 ec       	ldi	r24, 0xC8	; 200
    33aa:	90 e0       	ldi	r25, 0x00	; 0
    33ac:	91 83       	std	Z+1, r25	; 0x01
    33ae:	80 83       	st	Z, r24
    33b0:	fe 01       	movw	r30, r28
    33b2:	e9 5a       	subi	r30, 0xA9	; 169
    33b4:	ff 4f       	sbci	r31, 0xFF	; 255
    33b6:	80 81       	ld	r24, Z
    33b8:	91 81       	ldd	r25, Z+1	; 0x01
    33ba:	01 97       	sbiw	r24, 0x01	; 1
    33bc:	f1 f7       	brne	.-4      	; 0x33ba <Buzzer+0x152>
    33be:	fe 01       	movw	r30, r28
    33c0:	e9 5a       	subi	r30, 0xA9	; 169
    33c2:	ff 4f       	sbci	r31, 0xFF	; 255
    33c4:	91 83       	std	Z+1, r25	; 0x01
    33c6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33c8:	de 01       	movw	r26, r28
    33ca:	a7 5a       	subi	r26, 0xA7	; 167
    33cc:	bf 4f       	sbci	r27, 0xFF	; 255
    33ce:	fe 01       	movw	r30, r28
    33d0:	e7 5a       	subi	r30, 0xA7	; 167
    33d2:	ff 4f       	sbci	r31, 0xFF	; 255
    33d4:	80 81       	ld	r24, Z
    33d6:	91 81       	ldd	r25, Z+1	; 0x01
    33d8:	01 97       	sbiw	r24, 0x01	; 1
    33da:	11 96       	adiw	r26, 0x01	; 1
    33dc:	9c 93       	st	X, r25
    33de:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33e0:	fe 01       	movw	r30, r28
    33e2:	e7 5a       	subi	r30, 0xA7	; 167
    33e4:	ff 4f       	sbci	r31, 0xFF	; 255
    33e6:	80 81       	ld	r24, Z
    33e8:	91 81       	ldd	r25, Z+1	; 0x01
    33ea:	00 97       	sbiw	r24, 0x00	; 0
    33ec:	d1 f6       	brne	.-76     	; 0x33a2 <Buzzer+0x13a>
    33ee:	27 c0       	rjmp	.+78     	; 0x343e <Buzzer+0x1d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33f0:	8e 01       	movw	r16, r28
    33f2:	07 5a       	subi	r16, 0xA7	; 167
    33f4:	1f 4f       	sbci	r17, 0xFF	; 255
    33f6:	fe 01       	movw	r30, r28
    33f8:	e5 5a       	subi	r30, 0xA5	; 165
    33fa:	ff 4f       	sbci	r31, 0xFF	; 255
    33fc:	60 81       	ld	r22, Z
    33fe:	71 81       	ldd	r23, Z+1	; 0x01
    3400:	82 81       	ldd	r24, Z+2	; 0x02
    3402:	93 81       	ldd	r25, Z+3	; 0x03
    3404:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3408:	dc 01       	movw	r26, r24
    340a:	cb 01       	movw	r24, r22
    340c:	f8 01       	movw	r30, r16
    340e:	91 83       	std	Z+1, r25	; 0x01
    3410:	80 83       	st	Z, r24
    3412:	de 01       	movw	r26, r28
    3414:	ab 5a       	subi	r26, 0xAB	; 171
    3416:	bf 4f       	sbci	r27, 0xFF	; 255
    3418:	fe 01       	movw	r30, r28
    341a:	e7 5a       	subi	r30, 0xA7	; 167
    341c:	ff 4f       	sbci	r31, 0xFF	; 255
    341e:	80 81       	ld	r24, Z
    3420:	91 81       	ldd	r25, Z+1	; 0x01
    3422:	8d 93       	st	X+, r24
    3424:	9c 93       	st	X, r25
    3426:	fe 01       	movw	r30, r28
    3428:	eb 5a       	subi	r30, 0xAB	; 171
    342a:	ff 4f       	sbci	r31, 0xFF	; 255
    342c:	80 81       	ld	r24, Z
    342e:	91 81       	ldd	r25, Z+1	; 0x01
    3430:	01 97       	sbiw	r24, 0x01	; 1
    3432:	f1 f7       	brne	.-4      	; 0x3430 <Buzzer+0x1c8>
    3434:	fe 01       	movw	r30, r28
    3436:	eb 5a       	subi	r30, 0xAB	; 171
    3438:	ff 4f       	sbci	r31, 0xFF	; 255
    343a:	91 83       	std	Z+1, r25	; 0x01
    343c:	80 83       	st	Z, r24
    		_delay_ms(1000);
    		Dio_voidSetPinValue(BUZZER_PORT, BUZZER_PIN, DIO_LOW);
    343e:	80 e0       	ldi	r24, 0x00	; 0
    3440:	61 e0       	ldi	r22, 0x01	; 1
    3442:	40 e0       	ldi	r20, 0x00	; 0
    3444:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <Dio_voidSetPinValue>
    3448:	fe 01       	movw	r30, r28
    344a:	ef 5a       	subi	r30, 0xAF	; 175
    344c:	ff 4f       	sbci	r31, 0xFF	; 255
    344e:	80 e0       	ldi	r24, 0x00	; 0
    3450:	90 e0       	ldi	r25, 0x00	; 0
    3452:	a8 ec       	ldi	r26, 0xC8	; 200
    3454:	b2 e4       	ldi	r27, 0x42	; 66
    3456:	80 83       	st	Z, r24
    3458:	91 83       	std	Z+1, r25	; 0x01
    345a:	a2 83       	std	Z+2, r26	; 0x02
    345c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    345e:	8e 01       	movw	r16, r28
    3460:	03 5b       	subi	r16, 0xB3	; 179
    3462:	1f 4f       	sbci	r17, 0xFF	; 255
    3464:	fe 01       	movw	r30, r28
    3466:	ef 5a       	subi	r30, 0xAF	; 175
    3468:	ff 4f       	sbci	r31, 0xFF	; 255
    346a:	60 81       	ld	r22, Z
    346c:	71 81       	ldd	r23, Z+1	; 0x01
    346e:	82 81       	ldd	r24, Z+2	; 0x02
    3470:	93 81       	ldd	r25, Z+3	; 0x03
    3472:	20 e0       	ldi	r18, 0x00	; 0
    3474:	30 e0       	ldi	r19, 0x00	; 0
    3476:	4a ef       	ldi	r20, 0xFA	; 250
    3478:	54 e4       	ldi	r21, 0x44	; 68
    347a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    347e:	dc 01       	movw	r26, r24
    3480:	cb 01       	movw	r24, r22
    3482:	f8 01       	movw	r30, r16
    3484:	80 83       	st	Z, r24
    3486:	91 83       	std	Z+1, r25	; 0x01
    3488:	a2 83       	std	Z+2, r26	; 0x02
    348a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    348c:	fe 01       	movw	r30, r28
    348e:	e3 5b       	subi	r30, 0xB3	; 179
    3490:	ff 4f       	sbci	r31, 0xFF	; 255
    3492:	60 81       	ld	r22, Z
    3494:	71 81       	ldd	r23, Z+1	; 0x01
    3496:	82 81       	ldd	r24, Z+2	; 0x02
    3498:	93 81       	ldd	r25, Z+3	; 0x03
    349a:	20 e0       	ldi	r18, 0x00	; 0
    349c:	30 e0       	ldi	r19, 0x00	; 0
    349e:	40 e8       	ldi	r20, 0x80	; 128
    34a0:	5f e3       	ldi	r21, 0x3F	; 63
    34a2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    34a6:	88 23       	and	r24, r24
    34a8:	44 f4       	brge	.+16     	; 0x34ba <Buzzer+0x252>
		__ticks = 1;
    34aa:	fe 01       	movw	r30, r28
    34ac:	e5 5b       	subi	r30, 0xB5	; 181
    34ae:	ff 4f       	sbci	r31, 0xFF	; 255
    34b0:	81 e0       	ldi	r24, 0x01	; 1
    34b2:	90 e0       	ldi	r25, 0x00	; 0
    34b4:	91 83       	std	Z+1, r25	; 0x01
    34b6:	80 83       	st	Z, r24
    34b8:	64 c0       	rjmp	.+200    	; 0x3582 <Buzzer+0x31a>
	else if (__tmp > 65535)
    34ba:	fe 01       	movw	r30, r28
    34bc:	e3 5b       	subi	r30, 0xB3	; 179
    34be:	ff 4f       	sbci	r31, 0xFF	; 255
    34c0:	60 81       	ld	r22, Z
    34c2:	71 81       	ldd	r23, Z+1	; 0x01
    34c4:	82 81       	ldd	r24, Z+2	; 0x02
    34c6:	93 81       	ldd	r25, Z+3	; 0x03
    34c8:	20 e0       	ldi	r18, 0x00	; 0
    34ca:	3f ef       	ldi	r19, 0xFF	; 255
    34cc:	4f e7       	ldi	r20, 0x7F	; 127
    34ce:	57 e4       	ldi	r21, 0x47	; 71
    34d0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    34d4:	18 16       	cp	r1, r24
    34d6:	0c f0       	brlt	.+2      	; 0x34da <Buzzer+0x272>
    34d8:	43 c0       	rjmp	.+134    	; 0x3560 <Buzzer+0x2f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34da:	fe 01       	movw	r30, r28
    34dc:	ef 5a       	subi	r30, 0xAF	; 175
    34de:	ff 4f       	sbci	r31, 0xFF	; 255
    34e0:	60 81       	ld	r22, Z
    34e2:	71 81       	ldd	r23, Z+1	; 0x01
    34e4:	82 81       	ldd	r24, Z+2	; 0x02
    34e6:	93 81       	ldd	r25, Z+3	; 0x03
    34e8:	20 e0       	ldi	r18, 0x00	; 0
    34ea:	30 e0       	ldi	r19, 0x00	; 0
    34ec:	40 e2       	ldi	r20, 0x20	; 32
    34ee:	51 e4       	ldi	r21, 0x41	; 65
    34f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34f4:	dc 01       	movw	r26, r24
    34f6:	cb 01       	movw	r24, r22
    34f8:	8e 01       	movw	r16, r28
    34fa:	05 5b       	subi	r16, 0xB5	; 181
    34fc:	1f 4f       	sbci	r17, 0xFF	; 255
    34fe:	bc 01       	movw	r22, r24
    3500:	cd 01       	movw	r24, r26
    3502:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3506:	dc 01       	movw	r26, r24
    3508:	cb 01       	movw	r24, r22
    350a:	f8 01       	movw	r30, r16
    350c:	91 83       	std	Z+1, r25	; 0x01
    350e:	80 83       	st	Z, r24
    3510:	1f c0       	rjmp	.+62     	; 0x3550 <Buzzer+0x2e8>
    3512:	fe 01       	movw	r30, r28
    3514:	e7 5b       	subi	r30, 0xB7	; 183
    3516:	ff 4f       	sbci	r31, 0xFF	; 255
    3518:	88 ec       	ldi	r24, 0xC8	; 200
    351a:	90 e0       	ldi	r25, 0x00	; 0
    351c:	91 83       	std	Z+1, r25	; 0x01
    351e:	80 83       	st	Z, r24
    3520:	fe 01       	movw	r30, r28
    3522:	e7 5b       	subi	r30, 0xB7	; 183
    3524:	ff 4f       	sbci	r31, 0xFF	; 255
    3526:	80 81       	ld	r24, Z
    3528:	91 81       	ldd	r25, Z+1	; 0x01
    352a:	01 97       	sbiw	r24, 0x01	; 1
    352c:	f1 f7       	brne	.-4      	; 0x352a <Buzzer+0x2c2>
    352e:	fe 01       	movw	r30, r28
    3530:	e7 5b       	subi	r30, 0xB7	; 183
    3532:	ff 4f       	sbci	r31, 0xFF	; 255
    3534:	91 83       	std	Z+1, r25	; 0x01
    3536:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3538:	de 01       	movw	r26, r28
    353a:	a5 5b       	subi	r26, 0xB5	; 181
    353c:	bf 4f       	sbci	r27, 0xFF	; 255
    353e:	fe 01       	movw	r30, r28
    3540:	e5 5b       	subi	r30, 0xB5	; 181
    3542:	ff 4f       	sbci	r31, 0xFF	; 255
    3544:	80 81       	ld	r24, Z
    3546:	91 81       	ldd	r25, Z+1	; 0x01
    3548:	01 97       	sbiw	r24, 0x01	; 1
    354a:	11 96       	adiw	r26, 0x01	; 1
    354c:	9c 93       	st	X, r25
    354e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3550:	fe 01       	movw	r30, r28
    3552:	e5 5b       	subi	r30, 0xB5	; 181
    3554:	ff 4f       	sbci	r31, 0xFF	; 255
    3556:	80 81       	ld	r24, Z
    3558:	91 81       	ldd	r25, Z+1	; 0x01
    355a:	00 97       	sbiw	r24, 0x00	; 0
    355c:	d1 f6       	brne	.-76     	; 0x3512 <Buzzer+0x2aa>
    355e:	90 c2       	rjmp	.+1312   	; 0x3a80 <Buzzer+0x818>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3560:	8e 01       	movw	r16, r28
    3562:	05 5b       	subi	r16, 0xB5	; 181
    3564:	1f 4f       	sbci	r17, 0xFF	; 255
    3566:	fe 01       	movw	r30, r28
    3568:	e3 5b       	subi	r30, 0xB3	; 179
    356a:	ff 4f       	sbci	r31, 0xFF	; 255
    356c:	60 81       	ld	r22, Z
    356e:	71 81       	ldd	r23, Z+1	; 0x01
    3570:	82 81       	ldd	r24, Z+2	; 0x02
    3572:	93 81       	ldd	r25, Z+3	; 0x03
    3574:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3578:	dc 01       	movw	r26, r24
    357a:	cb 01       	movw	r24, r22
    357c:	f8 01       	movw	r30, r16
    357e:	91 83       	std	Z+1, r25	; 0x01
    3580:	80 83       	st	Z, r24
    3582:	de 01       	movw	r26, r28
    3584:	a9 5b       	subi	r26, 0xB9	; 185
    3586:	bf 4f       	sbci	r27, 0xFF	; 255
    3588:	fe 01       	movw	r30, r28
    358a:	e5 5b       	subi	r30, 0xB5	; 181
    358c:	ff 4f       	sbci	r31, 0xFF	; 255
    358e:	80 81       	ld	r24, Z
    3590:	91 81       	ldd	r25, Z+1	; 0x01
    3592:	11 96       	adiw	r26, 0x01	; 1
    3594:	9c 93       	st	X, r25
    3596:	8e 93       	st	-X, r24
    3598:	fe 01       	movw	r30, r28
    359a:	e9 5b       	subi	r30, 0xB9	; 185
    359c:	ff 4f       	sbci	r31, 0xFF	; 255
    359e:	80 81       	ld	r24, Z
    35a0:	91 81       	ldd	r25, Z+1	; 0x01
    35a2:	01 97       	sbiw	r24, 0x01	; 1
    35a4:	f1 f7       	brne	.-4      	; 0x35a2 <Buzzer+0x33a>
    35a6:	fe 01       	movw	r30, r28
    35a8:	e9 5b       	subi	r30, 0xB9	; 185
    35aa:	ff 4f       	sbci	r31, 0xFF	; 255
    35ac:	91 83       	std	Z+1, r25	; 0x01
    35ae:	80 83       	st	Z, r24
    35b0:	67 c2       	rjmp	.+1230   	; 0x3a80 <Buzzer+0x818>
    		_delay_ms(100);
    		break;

		case 2:
    		Dio_voidSetPinValue(BUZZER_PORT, BUZZER_PIN, DIO_HIGH);
    35b2:	80 e0       	ldi	r24, 0x00	; 0
    35b4:	61 e0       	ldi	r22, 0x01	; 1
    35b6:	41 e0       	ldi	r20, 0x01	; 1
    35b8:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <Dio_voidSetPinValue>
    35bc:	fe 01       	movw	r30, r28
    35be:	ed 5b       	subi	r30, 0xBD	; 189
    35c0:	ff 4f       	sbci	r31, 0xFF	; 255
    35c2:	80 e0       	ldi	r24, 0x00	; 0
    35c4:	90 e0       	ldi	r25, 0x00	; 0
    35c6:	a8 ec       	ldi	r26, 0xC8	; 200
    35c8:	b2 e4       	ldi	r27, 0x42	; 66
    35ca:	80 83       	st	Z, r24
    35cc:	91 83       	std	Z+1, r25	; 0x01
    35ce:	a2 83       	std	Z+2, r26	; 0x02
    35d0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35d2:	8e 01       	movw	r16, r28
    35d4:	01 5c       	subi	r16, 0xC1	; 193
    35d6:	1f 4f       	sbci	r17, 0xFF	; 255
    35d8:	fe 01       	movw	r30, r28
    35da:	ed 5b       	subi	r30, 0xBD	; 189
    35dc:	ff 4f       	sbci	r31, 0xFF	; 255
    35de:	60 81       	ld	r22, Z
    35e0:	71 81       	ldd	r23, Z+1	; 0x01
    35e2:	82 81       	ldd	r24, Z+2	; 0x02
    35e4:	93 81       	ldd	r25, Z+3	; 0x03
    35e6:	20 e0       	ldi	r18, 0x00	; 0
    35e8:	30 e0       	ldi	r19, 0x00	; 0
    35ea:	4a ef       	ldi	r20, 0xFA	; 250
    35ec:	54 e4       	ldi	r21, 0x44	; 68
    35ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35f2:	dc 01       	movw	r26, r24
    35f4:	cb 01       	movw	r24, r22
    35f6:	f8 01       	movw	r30, r16
    35f8:	80 83       	st	Z, r24
    35fa:	91 83       	std	Z+1, r25	; 0x01
    35fc:	a2 83       	std	Z+2, r26	; 0x02
    35fe:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3600:	fe 01       	movw	r30, r28
    3602:	ff 96       	adiw	r30, 0x3f	; 63
    3604:	60 81       	ld	r22, Z
    3606:	71 81       	ldd	r23, Z+1	; 0x01
    3608:	82 81       	ldd	r24, Z+2	; 0x02
    360a:	93 81       	ldd	r25, Z+3	; 0x03
    360c:	20 e0       	ldi	r18, 0x00	; 0
    360e:	30 e0       	ldi	r19, 0x00	; 0
    3610:	40 e8       	ldi	r20, 0x80	; 128
    3612:	5f e3       	ldi	r21, 0x3F	; 63
    3614:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3618:	88 23       	and	r24, r24
    361a:	2c f4       	brge	.+10     	; 0x3626 <Buzzer+0x3be>
		__ticks = 1;
    361c:	81 e0       	ldi	r24, 0x01	; 1
    361e:	90 e0       	ldi	r25, 0x00	; 0
    3620:	9e af       	std	Y+62, r25	; 0x3e
    3622:	8d af       	std	Y+61, r24	; 0x3d
    3624:	46 c0       	rjmp	.+140    	; 0x36b2 <Buzzer+0x44a>
	else if (__tmp > 65535)
    3626:	fe 01       	movw	r30, r28
    3628:	ff 96       	adiw	r30, 0x3f	; 63
    362a:	60 81       	ld	r22, Z
    362c:	71 81       	ldd	r23, Z+1	; 0x01
    362e:	82 81       	ldd	r24, Z+2	; 0x02
    3630:	93 81       	ldd	r25, Z+3	; 0x03
    3632:	20 e0       	ldi	r18, 0x00	; 0
    3634:	3f ef       	ldi	r19, 0xFF	; 255
    3636:	4f e7       	ldi	r20, 0x7F	; 127
    3638:	57 e4       	ldi	r21, 0x47	; 71
    363a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    363e:	18 16       	cp	r1, r24
    3640:	64 f5       	brge	.+88     	; 0x369a <Buzzer+0x432>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3642:	fe 01       	movw	r30, r28
    3644:	ed 5b       	subi	r30, 0xBD	; 189
    3646:	ff 4f       	sbci	r31, 0xFF	; 255
    3648:	60 81       	ld	r22, Z
    364a:	71 81       	ldd	r23, Z+1	; 0x01
    364c:	82 81       	ldd	r24, Z+2	; 0x02
    364e:	93 81       	ldd	r25, Z+3	; 0x03
    3650:	20 e0       	ldi	r18, 0x00	; 0
    3652:	30 e0       	ldi	r19, 0x00	; 0
    3654:	40 e2       	ldi	r20, 0x20	; 32
    3656:	51 e4       	ldi	r21, 0x41	; 65
    3658:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    365c:	dc 01       	movw	r26, r24
    365e:	cb 01       	movw	r24, r22
    3660:	bc 01       	movw	r22, r24
    3662:	cd 01       	movw	r24, r26
    3664:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3668:	dc 01       	movw	r26, r24
    366a:	cb 01       	movw	r24, r22
    366c:	9e af       	std	Y+62, r25	; 0x3e
    366e:	8d af       	std	Y+61, r24	; 0x3d
    3670:	0f c0       	rjmp	.+30     	; 0x3690 <Buzzer+0x428>
    3672:	88 ec       	ldi	r24, 0xC8	; 200
    3674:	90 e0       	ldi	r25, 0x00	; 0
    3676:	9c af       	std	Y+60, r25	; 0x3c
    3678:	8b af       	std	Y+59, r24	; 0x3b
    367a:	8b ad       	ldd	r24, Y+59	; 0x3b
    367c:	9c ad       	ldd	r25, Y+60	; 0x3c
    367e:	01 97       	sbiw	r24, 0x01	; 1
    3680:	f1 f7       	brne	.-4      	; 0x367e <Buzzer+0x416>
    3682:	9c af       	std	Y+60, r25	; 0x3c
    3684:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3686:	8d ad       	ldd	r24, Y+61	; 0x3d
    3688:	9e ad       	ldd	r25, Y+62	; 0x3e
    368a:	01 97       	sbiw	r24, 0x01	; 1
    368c:	9e af       	std	Y+62, r25	; 0x3e
    368e:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3690:	8d ad       	ldd	r24, Y+61	; 0x3d
    3692:	9e ad       	ldd	r25, Y+62	; 0x3e
    3694:	00 97       	sbiw	r24, 0x00	; 0
    3696:	69 f7       	brne	.-38     	; 0x3672 <Buzzer+0x40a>
    3698:	16 c0       	rjmp	.+44     	; 0x36c6 <Buzzer+0x45e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    369a:	fe 01       	movw	r30, r28
    369c:	ff 96       	adiw	r30, 0x3f	; 63
    369e:	60 81       	ld	r22, Z
    36a0:	71 81       	ldd	r23, Z+1	; 0x01
    36a2:	82 81       	ldd	r24, Z+2	; 0x02
    36a4:	93 81       	ldd	r25, Z+3	; 0x03
    36a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36aa:	dc 01       	movw	r26, r24
    36ac:	cb 01       	movw	r24, r22
    36ae:	9e af       	std	Y+62, r25	; 0x3e
    36b0:	8d af       	std	Y+61, r24	; 0x3d
    36b2:	8d ad       	ldd	r24, Y+61	; 0x3d
    36b4:	9e ad       	ldd	r25, Y+62	; 0x3e
    36b6:	9a af       	std	Y+58, r25	; 0x3a
    36b8:	89 af       	std	Y+57, r24	; 0x39
    36ba:	89 ad       	ldd	r24, Y+57	; 0x39
    36bc:	9a ad       	ldd	r25, Y+58	; 0x3a
    36be:	01 97       	sbiw	r24, 0x01	; 1
    36c0:	f1 f7       	brne	.-4      	; 0x36be <Buzzer+0x456>
    36c2:	9a af       	std	Y+58, r25	; 0x3a
    36c4:	89 af       	std	Y+57, r24	; 0x39
    		_delay_ms(100);
    		Dio_voidSetPinValue(BUZZER_PORT, BUZZER_PIN, DIO_LOW);
    36c6:	80 e0       	ldi	r24, 0x00	; 0
    36c8:	61 e0       	ldi	r22, 0x01	; 1
    36ca:	40 e0       	ldi	r20, 0x00	; 0
    36cc:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <Dio_voidSetPinValue>
    36d0:	80 e0       	ldi	r24, 0x00	; 0
    36d2:	90 e0       	ldi	r25, 0x00	; 0
    36d4:	a8 ec       	ldi	r26, 0xC8	; 200
    36d6:	b2 e4       	ldi	r27, 0x42	; 66
    36d8:	8d ab       	std	Y+53, r24	; 0x35
    36da:	9e ab       	std	Y+54, r25	; 0x36
    36dc:	af ab       	std	Y+55, r26	; 0x37
    36de:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36e0:	6d a9       	ldd	r22, Y+53	; 0x35
    36e2:	7e a9       	ldd	r23, Y+54	; 0x36
    36e4:	8f a9       	ldd	r24, Y+55	; 0x37
    36e6:	98 ad       	ldd	r25, Y+56	; 0x38
    36e8:	20 e0       	ldi	r18, 0x00	; 0
    36ea:	30 e0       	ldi	r19, 0x00	; 0
    36ec:	4a ef       	ldi	r20, 0xFA	; 250
    36ee:	54 e4       	ldi	r21, 0x44	; 68
    36f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36f4:	dc 01       	movw	r26, r24
    36f6:	cb 01       	movw	r24, r22
    36f8:	89 ab       	std	Y+49, r24	; 0x31
    36fa:	9a ab       	std	Y+50, r25	; 0x32
    36fc:	ab ab       	std	Y+51, r26	; 0x33
    36fe:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3700:	69 a9       	ldd	r22, Y+49	; 0x31
    3702:	7a a9       	ldd	r23, Y+50	; 0x32
    3704:	8b a9       	ldd	r24, Y+51	; 0x33
    3706:	9c a9       	ldd	r25, Y+52	; 0x34
    3708:	20 e0       	ldi	r18, 0x00	; 0
    370a:	30 e0       	ldi	r19, 0x00	; 0
    370c:	40 e8       	ldi	r20, 0x80	; 128
    370e:	5f e3       	ldi	r21, 0x3F	; 63
    3710:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3714:	88 23       	and	r24, r24
    3716:	2c f4       	brge	.+10     	; 0x3722 <Buzzer+0x4ba>
		__ticks = 1;
    3718:	81 e0       	ldi	r24, 0x01	; 1
    371a:	90 e0       	ldi	r25, 0x00	; 0
    371c:	98 ab       	std	Y+48, r25	; 0x30
    371e:	8f a7       	std	Y+47, r24	; 0x2f
    3720:	3f c0       	rjmp	.+126    	; 0x37a0 <Buzzer+0x538>
	else if (__tmp > 65535)
    3722:	69 a9       	ldd	r22, Y+49	; 0x31
    3724:	7a a9       	ldd	r23, Y+50	; 0x32
    3726:	8b a9       	ldd	r24, Y+51	; 0x33
    3728:	9c a9       	ldd	r25, Y+52	; 0x34
    372a:	20 e0       	ldi	r18, 0x00	; 0
    372c:	3f ef       	ldi	r19, 0xFF	; 255
    372e:	4f e7       	ldi	r20, 0x7F	; 127
    3730:	57 e4       	ldi	r21, 0x47	; 71
    3732:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3736:	18 16       	cp	r1, r24
    3738:	4c f5       	brge	.+82     	; 0x378c <Buzzer+0x524>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    373a:	6d a9       	ldd	r22, Y+53	; 0x35
    373c:	7e a9       	ldd	r23, Y+54	; 0x36
    373e:	8f a9       	ldd	r24, Y+55	; 0x37
    3740:	98 ad       	ldd	r25, Y+56	; 0x38
    3742:	20 e0       	ldi	r18, 0x00	; 0
    3744:	30 e0       	ldi	r19, 0x00	; 0
    3746:	40 e2       	ldi	r20, 0x20	; 32
    3748:	51 e4       	ldi	r21, 0x41	; 65
    374a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    374e:	dc 01       	movw	r26, r24
    3750:	cb 01       	movw	r24, r22
    3752:	bc 01       	movw	r22, r24
    3754:	cd 01       	movw	r24, r26
    3756:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    375a:	dc 01       	movw	r26, r24
    375c:	cb 01       	movw	r24, r22
    375e:	98 ab       	std	Y+48, r25	; 0x30
    3760:	8f a7       	std	Y+47, r24	; 0x2f
    3762:	0f c0       	rjmp	.+30     	; 0x3782 <Buzzer+0x51a>
    3764:	88 ec       	ldi	r24, 0xC8	; 200
    3766:	90 e0       	ldi	r25, 0x00	; 0
    3768:	9e a7       	std	Y+46, r25	; 0x2e
    376a:	8d a7       	std	Y+45, r24	; 0x2d
    376c:	8d a5       	ldd	r24, Y+45	; 0x2d
    376e:	9e a5       	ldd	r25, Y+46	; 0x2e
    3770:	01 97       	sbiw	r24, 0x01	; 1
    3772:	f1 f7       	brne	.-4      	; 0x3770 <Buzzer+0x508>
    3774:	9e a7       	std	Y+46, r25	; 0x2e
    3776:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3778:	8f a5       	ldd	r24, Y+47	; 0x2f
    377a:	98 a9       	ldd	r25, Y+48	; 0x30
    377c:	01 97       	sbiw	r24, 0x01	; 1
    377e:	98 ab       	std	Y+48, r25	; 0x30
    3780:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3782:	8f a5       	ldd	r24, Y+47	; 0x2f
    3784:	98 a9       	ldd	r25, Y+48	; 0x30
    3786:	00 97       	sbiw	r24, 0x00	; 0
    3788:	69 f7       	brne	.-38     	; 0x3764 <Buzzer+0x4fc>
    378a:	14 c0       	rjmp	.+40     	; 0x37b4 <Buzzer+0x54c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    378c:	69 a9       	ldd	r22, Y+49	; 0x31
    378e:	7a a9       	ldd	r23, Y+50	; 0x32
    3790:	8b a9       	ldd	r24, Y+51	; 0x33
    3792:	9c a9       	ldd	r25, Y+52	; 0x34
    3794:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3798:	dc 01       	movw	r26, r24
    379a:	cb 01       	movw	r24, r22
    379c:	98 ab       	std	Y+48, r25	; 0x30
    379e:	8f a7       	std	Y+47, r24	; 0x2f
    37a0:	8f a5       	ldd	r24, Y+47	; 0x2f
    37a2:	98 a9       	ldd	r25, Y+48	; 0x30
    37a4:	9c a7       	std	Y+44, r25	; 0x2c
    37a6:	8b a7       	std	Y+43, r24	; 0x2b
    37a8:	8b a5       	ldd	r24, Y+43	; 0x2b
    37aa:	9c a5       	ldd	r25, Y+44	; 0x2c
    37ac:	01 97       	sbiw	r24, 0x01	; 1
    37ae:	f1 f7       	brne	.-4      	; 0x37ac <Buzzer+0x544>
    37b0:	9c a7       	std	Y+44, r25	; 0x2c
    37b2:	8b a7       	std	Y+43, r24	; 0x2b
    		_delay_ms(100);
    		Dio_voidSetPinValue(BUZZER_PORT, BUZZER_PIN, DIO_HIGH);
    37b4:	80 e0       	ldi	r24, 0x00	; 0
    37b6:	61 e0       	ldi	r22, 0x01	; 1
    37b8:	41 e0       	ldi	r20, 0x01	; 1
    37ba:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <Dio_voidSetPinValue>
    37be:	80 e0       	ldi	r24, 0x00	; 0
    37c0:	90 e0       	ldi	r25, 0x00	; 0
    37c2:	a8 ec       	ldi	r26, 0xC8	; 200
    37c4:	b2 e4       	ldi	r27, 0x42	; 66
    37c6:	8f a3       	std	Y+39, r24	; 0x27
    37c8:	98 a7       	std	Y+40, r25	; 0x28
    37ca:	a9 a7       	std	Y+41, r26	; 0x29
    37cc:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    37ce:	6f a1       	ldd	r22, Y+39	; 0x27
    37d0:	78 a5       	ldd	r23, Y+40	; 0x28
    37d2:	89 a5       	ldd	r24, Y+41	; 0x29
    37d4:	9a a5       	ldd	r25, Y+42	; 0x2a
    37d6:	20 e0       	ldi	r18, 0x00	; 0
    37d8:	30 e0       	ldi	r19, 0x00	; 0
    37da:	4a ef       	ldi	r20, 0xFA	; 250
    37dc:	54 e4       	ldi	r21, 0x44	; 68
    37de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37e2:	dc 01       	movw	r26, r24
    37e4:	cb 01       	movw	r24, r22
    37e6:	8b a3       	std	Y+35, r24	; 0x23
    37e8:	9c a3       	std	Y+36, r25	; 0x24
    37ea:	ad a3       	std	Y+37, r26	; 0x25
    37ec:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    37ee:	6b a1       	ldd	r22, Y+35	; 0x23
    37f0:	7c a1       	ldd	r23, Y+36	; 0x24
    37f2:	8d a1       	ldd	r24, Y+37	; 0x25
    37f4:	9e a1       	ldd	r25, Y+38	; 0x26
    37f6:	20 e0       	ldi	r18, 0x00	; 0
    37f8:	30 e0       	ldi	r19, 0x00	; 0
    37fa:	40 e8       	ldi	r20, 0x80	; 128
    37fc:	5f e3       	ldi	r21, 0x3F	; 63
    37fe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3802:	88 23       	and	r24, r24
    3804:	2c f4       	brge	.+10     	; 0x3810 <Buzzer+0x5a8>
		__ticks = 1;
    3806:	81 e0       	ldi	r24, 0x01	; 1
    3808:	90 e0       	ldi	r25, 0x00	; 0
    380a:	9a a3       	std	Y+34, r25	; 0x22
    380c:	89 a3       	std	Y+33, r24	; 0x21
    380e:	3f c0       	rjmp	.+126    	; 0x388e <Buzzer+0x626>
	else if (__tmp > 65535)
    3810:	6b a1       	ldd	r22, Y+35	; 0x23
    3812:	7c a1       	ldd	r23, Y+36	; 0x24
    3814:	8d a1       	ldd	r24, Y+37	; 0x25
    3816:	9e a1       	ldd	r25, Y+38	; 0x26
    3818:	20 e0       	ldi	r18, 0x00	; 0
    381a:	3f ef       	ldi	r19, 0xFF	; 255
    381c:	4f e7       	ldi	r20, 0x7F	; 127
    381e:	57 e4       	ldi	r21, 0x47	; 71
    3820:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3824:	18 16       	cp	r1, r24
    3826:	4c f5       	brge	.+82     	; 0x387a <Buzzer+0x612>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3828:	6f a1       	ldd	r22, Y+39	; 0x27
    382a:	78 a5       	ldd	r23, Y+40	; 0x28
    382c:	89 a5       	ldd	r24, Y+41	; 0x29
    382e:	9a a5       	ldd	r25, Y+42	; 0x2a
    3830:	20 e0       	ldi	r18, 0x00	; 0
    3832:	30 e0       	ldi	r19, 0x00	; 0
    3834:	40 e2       	ldi	r20, 0x20	; 32
    3836:	51 e4       	ldi	r21, 0x41	; 65
    3838:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    383c:	dc 01       	movw	r26, r24
    383e:	cb 01       	movw	r24, r22
    3840:	bc 01       	movw	r22, r24
    3842:	cd 01       	movw	r24, r26
    3844:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3848:	dc 01       	movw	r26, r24
    384a:	cb 01       	movw	r24, r22
    384c:	9a a3       	std	Y+34, r25	; 0x22
    384e:	89 a3       	std	Y+33, r24	; 0x21
    3850:	0f c0       	rjmp	.+30     	; 0x3870 <Buzzer+0x608>
    3852:	88 ec       	ldi	r24, 0xC8	; 200
    3854:	90 e0       	ldi	r25, 0x00	; 0
    3856:	98 a3       	std	Y+32, r25	; 0x20
    3858:	8f 8f       	std	Y+31, r24	; 0x1f
    385a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    385c:	98 a1       	ldd	r25, Y+32	; 0x20
    385e:	01 97       	sbiw	r24, 0x01	; 1
    3860:	f1 f7       	brne	.-4      	; 0x385e <Buzzer+0x5f6>
    3862:	98 a3       	std	Y+32, r25	; 0x20
    3864:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3866:	89 a1       	ldd	r24, Y+33	; 0x21
    3868:	9a a1       	ldd	r25, Y+34	; 0x22
    386a:	01 97       	sbiw	r24, 0x01	; 1
    386c:	9a a3       	std	Y+34, r25	; 0x22
    386e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3870:	89 a1       	ldd	r24, Y+33	; 0x21
    3872:	9a a1       	ldd	r25, Y+34	; 0x22
    3874:	00 97       	sbiw	r24, 0x00	; 0
    3876:	69 f7       	brne	.-38     	; 0x3852 <Buzzer+0x5ea>
    3878:	14 c0       	rjmp	.+40     	; 0x38a2 <Buzzer+0x63a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    387a:	6b a1       	ldd	r22, Y+35	; 0x23
    387c:	7c a1       	ldd	r23, Y+36	; 0x24
    387e:	8d a1       	ldd	r24, Y+37	; 0x25
    3880:	9e a1       	ldd	r25, Y+38	; 0x26
    3882:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3886:	dc 01       	movw	r26, r24
    3888:	cb 01       	movw	r24, r22
    388a:	9a a3       	std	Y+34, r25	; 0x22
    388c:	89 a3       	std	Y+33, r24	; 0x21
    388e:	89 a1       	ldd	r24, Y+33	; 0x21
    3890:	9a a1       	ldd	r25, Y+34	; 0x22
    3892:	9e 8f       	std	Y+30, r25	; 0x1e
    3894:	8d 8f       	std	Y+29, r24	; 0x1d
    3896:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3898:	9e 8d       	ldd	r25, Y+30	; 0x1e
    389a:	01 97       	sbiw	r24, 0x01	; 1
    389c:	f1 f7       	brne	.-4      	; 0x389a <Buzzer+0x632>
    389e:	9e 8f       	std	Y+30, r25	; 0x1e
    38a0:	8d 8f       	std	Y+29, r24	; 0x1d
    		_delay_ms(100);
    		Dio_voidSetPinValue(BUZZER_PORT, BUZZER_PIN, DIO_LOW);
    38a2:	80 e0       	ldi	r24, 0x00	; 0
    38a4:	61 e0       	ldi	r22, 0x01	; 1
    38a6:	40 e0       	ldi	r20, 0x00	; 0
    38a8:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <Dio_voidSetPinValue>
    38ac:	80 e0       	ldi	r24, 0x00	; 0
    38ae:	90 e0       	ldi	r25, 0x00	; 0
    38b0:	a8 ec       	ldi	r26, 0xC8	; 200
    38b2:	b2 e4       	ldi	r27, 0x42	; 66
    38b4:	89 8f       	std	Y+25, r24	; 0x19
    38b6:	9a 8f       	std	Y+26, r25	; 0x1a
    38b8:	ab 8f       	std	Y+27, r26	; 0x1b
    38ba:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    38bc:	69 8d       	ldd	r22, Y+25	; 0x19
    38be:	7a 8d       	ldd	r23, Y+26	; 0x1a
    38c0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    38c2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    38c4:	20 e0       	ldi	r18, 0x00	; 0
    38c6:	30 e0       	ldi	r19, 0x00	; 0
    38c8:	4a ef       	ldi	r20, 0xFA	; 250
    38ca:	54 e4       	ldi	r21, 0x44	; 68
    38cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38d0:	dc 01       	movw	r26, r24
    38d2:	cb 01       	movw	r24, r22
    38d4:	8d 8b       	std	Y+21, r24	; 0x15
    38d6:	9e 8b       	std	Y+22, r25	; 0x16
    38d8:	af 8b       	std	Y+23, r26	; 0x17
    38da:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    38dc:	6d 89       	ldd	r22, Y+21	; 0x15
    38de:	7e 89       	ldd	r23, Y+22	; 0x16
    38e0:	8f 89       	ldd	r24, Y+23	; 0x17
    38e2:	98 8d       	ldd	r25, Y+24	; 0x18
    38e4:	20 e0       	ldi	r18, 0x00	; 0
    38e6:	30 e0       	ldi	r19, 0x00	; 0
    38e8:	40 e8       	ldi	r20, 0x80	; 128
    38ea:	5f e3       	ldi	r21, 0x3F	; 63
    38ec:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    38f0:	88 23       	and	r24, r24
    38f2:	2c f4       	brge	.+10     	; 0x38fe <Buzzer+0x696>
		__ticks = 1;
    38f4:	81 e0       	ldi	r24, 0x01	; 1
    38f6:	90 e0       	ldi	r25, 0x00	; 0
    38f8:	9c 8b       	std	Y+20, r25	; 0x14
    38fa:	8b 8b       	std	Y+19, r24	; 0x13
    38fc:	3f c0       	rjmp	.+126    	; 0x397c <Buzzer+0x714>
	else if (__tmp > 65535)
    38fe:	6d 89       	ldd	r22, Y+21	; 0x15
    3900:	7e 89       	ldd	r23, Y+22	; 0x16
    3902:	8f 89       	ldd	r24, Y+23	; 0x17
    3904:	98 8d       	ldd	r25, Y+24	; 0x18
    3906:	20 e0       	ldi	r18, 0x00	; 0
    3908:	3f ef       	ldi	r19, 0xFF	; 255
    390a:	4f e7       	ldi	r20, 0x7F	; 127
    390c:	57 e4       	ldi	r21, 0x47	; 71
    390e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3912:	18 16       	cp	r1, r24
    3914:	4c f5       	brge	.+82     	; 0x3968 <Buzzer+0x700>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3916:	69 8d       	ldd	r22, Y+25	; 0x19
    3918:	7a 8d       	ldd	r23, Y+26	; 0x1a
    391a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    391c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    391e:	20 e0       	ldi	r18, 0x00	; 0
    3920:	30 e0       	ldi	r19, 0x00	; 0
    3922:	40 e2       	ldi	r20, 0x20	; 32
    3924:	51 e4       	ldi	r21, 0x41	; 65
    3926:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    392a:	dc 01       	movw	r26, r24
    392c:	cb 01       	movw	r24, r22
    392e:	bc 01       	movw	r22, r24
    3930:	cd 01       	movw	r24, r26
    3932:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3936:	dc 01       	movw	r26, r24
    3938:	cb 01       	movw	r24, r22
    393a:	9c 8b       	std	Y+20, r25	; 0x14
    393c:	8b 8b       	std	Y+19, r24	; 0x13
    393e:	0f c0       	rjmp	.+30     	; 0x395e <Buzzer+0x6f6>
    3940:	88 ec       	ldi	r24, 0xC8	; 200
    3942:	90 e0       	ldi	r25, 0x00	; 0
    3944:	9a 8b       	std	Y+18, r25	; 0x12
    3946:	89 8b       	std	Y+17, r24	; 0x11
    3948:	89 89       	ldd	r24, Y+17	; 0x11
    394a:	9a 89       	ldd	r25, Y+18	; 0x12
    394c:	01 97       	sbiw	r24, 0x01	; 1
    394e:	f1 f7       	brne	.-4      	; 0x394c <Buzzer+0x6e4>
    3950:	9a 8b       	std	Y+18, r25	; 0x12
    3952:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3954:	8b 89       	ldd	r24, Y+19	; 0x13
    3956:	9c 89       	ldd	r25, Y+20	; 0x14
    3958:	01 97       	sbiw	r24, 0x01	; 1
    395a:	9c 8b       	std	Y+20, r25	; 0x14
    395c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    395e:	8b 89       	ldd	r24, Y+19	; 0x13
    3960:	9c 89       	ldd	r25, Y+20	; 0x14
    3962:	00 97       	sbiw	r24, 0x00	; 0
    3964:	69 f7       	brne	.-38     	; 0x3940 <Buzzer+0x6d8>
    3966:	8c c0       	rjmp	.+280    	; 0x3a80 <Buzzer+0x818>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3968:	6d 89       	ldd	r22, Y+21	; 0x15
    396a:	7e 89       	ldd	r23, Y+22	; 0x16
    396c:	8f 89       	ldd	r24, Y+23	; 0x17
    396e:	98 8d       	ldd	r25, Y+24	; 0x18
    3970:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3974:	dc 01       	movw	r26, r24
    3976:	cb 01       	movw	r24, r22
    3978:	9c 8b       	std	Y+20, r25	; 0x14
    397a:	8b 8b       	std	Y+19, r24	; 0x13
    397c:	8b 89       	ldd	r24, Y+19	; 0x13
    397e:	9c 89       	ldd	r25, Y+20	; 0x14
    3980:	98 8b       	std	Y+16, r25	; 0x10
    3982:	8f 87       	std	Y+15, r24	; 0x0f
    3984:	8f 85       	ldd	r24, Y+15	; 0x0f
    3986:	98 89       	ldd	r25, Y+16	; 0x10
    3988:	01 97       	sbiw	r24, 0x01	; 1
    398a:	f1 f7       	brne	.-4      	; 0x3988 <Buzzer+0x720>
    398c:	98 8b       	std	Y+16, r25	; 0x10
    398e:	8f 87       	std	Y+15, r24	; 0x0f
    3990:	77 c0       	rjmp	.+238    	; 0x3a80 <Buzzer+0x818>
    		_delay_ms(100);
    		break;

		case 3:
    		Dio_voidSetPinValue(BUZZER_PORT, BUZZER_PIN, DIO_HIGH);
    3992:	80 e0       	ldi	r24, 0x00	; 0
    3994:	61 e0       	ldi	r22, 0x01	; 1
    3996:	41 e0       	ldi	r20, 0x01	; 1
    3998:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <Dio_voidSetPinValue>
    399c:	80 e0       	ldi	r24, 0x00	; 0
    399e:	90 e0       	ldi	r25, 0x00	; 0
    39a0:	a8 ec       	ldi	r26, 0xC8	; 200
    39a2:	b2 e4       	ldi	r27, 0x42	; 66
    39a4:	8b 87       	std	Y+11, r24	; 0x0b
    39a6:	9c 87       	std	Y+12, r25	; 0x0c
    39a8:	ad 87       	std	Y+13, r26	; 0x0d
    39aa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    39ac:	6b 85       	ldd	r22, Y+11	; 0x0b
    39ae:	7c 85       	ldd	r23, Y+12	; 0x0c
    39b0:	8d 85       	ldd	r24, Y+13	; 0x0d
    39b2:	9e 85       	ldd	r25, Y+14	; 0x0e
    39b4:	20 e0       	ldi	r18, 0x00	; 0
    39b6:	30 e0       	ldi	r19, 0x00	; 0
    39b8:	4a ef       	ldi	r20, 0xFA	; 250
    39ba:	54 e4       	ldi	r21, 0x44	; 68
    39bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39c0:	dc 01       	movw	r26, r24
    39c2:	cb 01       	movw	r24, r22
    39c4:	8f 83       	std	Y+7, r24	; 0x07
    39c6:	98 87       	std	Y+8, r25	; 0x08
    39c8:	a9 87       	std	Y+9, r26	; 0x09
    39ca:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    39cc:	6f 81       	ldd	r22, Y+7	; 0x07
    39ce:	78 85       	ldd	r23, Y+8	; 0x08
    39d0:	89 85       	ldd	r24, Y+9	; 0x09
    39d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    39d4:	20 e0       	ldi	r18, 0x00	; 0
    39d6:	30 e0       	ldi	r19, 0x00	; 0
    39d8:	40 e8       	ldi	r20, 0x80	; 128
    39da:	5f e3       	ldi	r21, 0x3F	; 63
    39dc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    39e0:	88 23       	and	r24, r24
    39e2:	2c f4       	brge	.+10     	; 0x39ee <Buzzer+0x786>
		__ticks = 1;
    39e4:	81 e0       	ldi	r24, 0x01	; 1
    39e6:	90 e0       	ldi	r25, 0x00	; 0
    39e8:	9e 83       	std	Y+6, r25	; 0x06
    39ea:	8d 83       	std	Y+5, r24	; 0x05
    39ec:	3f c0       	rjmp	.+126    	; 0x3a6c <Buzzer+0x804>
	else if (__tmp > 65535)
    39ee:	6f 81       	ldd	r22, Y+7	; 0x07
    39f0:	78 85       	ldd	r23, Y+8	; 0x08
    39f2:	89 85       	ldd	r24, Y+9	; 0x09
    39f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    39f6:	20 e0       	ldi	r18, 0x00	; 0
    39f8:	3f ef       	ldi	r19, 0xFF	; 255
    39fa:	4f e7       	ldi	r20, 0x7F	; 127
    39fc:	57 e4       	ldi	r21, 0x47	; 71
    39fe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3a02:	18 16       	cp	r1, r24
    3a04:	4c f5       	brge	.+82     	; 0x3a58 <Buzzer+0x7f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a06:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a08:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a0a:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a0c:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a0e:	20 e0       	ldi	r18, 0x00	; 0
    3a10:	30 e0       	ldi	r19, 0x00	; 0
    3a12:	40 e2       	ldi	r20, 0x20	; 32
    3a14:	51 e4       	ldi	r21, 0x41	; 65
    3a16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a1a:	dc 01       	movw	r26, r24
    3a1c:	cb 01       	movw	r24, r22
    3a1e:	bc 01       	movw	r22, r24
    3a20:	cd 01       	movw	r24, r26
    3a22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a26:	dc 01       	movw	r26, r24
    3a28:	cb 01       	movw	r24, r22
    3a2a:	9e 83       	std	Y+6, r25	; 0x06
    3a2c:	8d 83       	std	Y+5, r24	; 0x05
    3a2e:	0f c0       	rjmp	.+30     	; 0x3a4e <Buzzer+0x7e6>
    3a30:	88 ec       	ldi	r24, 0xC8	; 200
    3a32:	90 e0       	ldi	r25, 0x00	; 0
    3a34:	9c 83       	std	Y+4, r25	; 0x04
    3a36:	8b 83       	std	Y+3, r24	; 0x03
    3a38:	8b 81       	ldd	r24, Y+3	; 0x03
    3a3a:	9c 81       	ldd	r25, Y+4	; 0x04
    3a3c:	01 97       	sbiw	r24, 0x01	; 1
    3a3e:	f1 f7       	brne	.-4      	; 0x3a3c <Buzzer+0x7d4>
    3a40:	9c 83       	std	Y+4, r25	; 0x04
    3a42:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a44:	8d 81       	ldd	r24, Y+5	; 0x05
    3a46:	9e 81       	ldd	r25, Y+6	; 0x06
    3a48:	01 97       	sbiw	r24, 0x01	; 1
    3a4a:	9e 83       	std	Y+6, r25	; 0x06
    3a4c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a4e:	8d 81       	ldd	r24, Y+5	; 0x05
    3a50:	9e 81       	ldd	r25, Y+6	; 0x06
    3a52:	00 97       	sbiw	r24, 0x00	; 0
    3a54:	69 f7       	brne	.-38     	; 0x3a30 <Buzzer+0x7c8>
    3a56:	14 c0       	rjmp	.+40     	; 0x3a80 <Buzzer+0x818>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a58:	6f 81       	ldd	r22, Y+7	; 0x07
    3a5a:	78 85       	ldd	r23, Y+8	; 0x08
    3a5c:	89 85       	ldd	r24, Y+9	; 0x09
    3a5e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a64:	dc 01       	movw	r26, r24
    3a66:	cb 01       	movw	r24, r22
    3a68:	9e 83       	std	Y+6, r25	; 0x06
    3a6a:	8d 83       	std	Y+5, r24	; 0x05
    3a6c:	8d 81       	ldd	r24, Y+5	; 0x05
    3a6e:	9e 81       	ldd	r25, Y+6	; 0x06
    3a70:	9a 83       	std	Y+2, r25	; 0x02
    3a72:	89 83       	std	Y+1, r24	; 0x01
    3a74:	89 81       	ldd	r24, Y+1	; 0x01
    3a76:	9a 81       	ldd	r25, Y+2	; 0x02
    3a78:	01 97       	sbiw	r24, 0x01	; 1
    3a7a:	f1 f7       	brne	.-4      	; 0x3a78 <Buzzer+0x810>
    3a7c:	9a 83       	std	Y+2, r25	; 0x02
    3a7e:	89 83       	std	Y+1, r24	; 0x01
    		_delay_ms(100);
    		break;

	}

}
    3a80:	cb 59       	subi	r28, 0x9B	; 155
    3a82:	df 4f       	sbci	r29, 0xFF	; 255
    3a84:	0f b6       	in	r0, 0x3f	; 63
    3a86:	f8 94       	cli
    3a88:	de bf       	out	0x3e, r29	; 62
    3a8a:	0f be       	out	0x3f, r0	; 63
    3a8c:	cd bf       	out	0x3d, r28	; 61
    3a8e:	cf 91       	pop	r28
    3a90:	df 91       	pop	r29
    3a92:	1f 91       	pop	r17
    3a94:	0f 91       	pop	r16
    3a96:	08 95       	ret

00003a98 <servo>:

void servo(u16 Servo_Pos)
{
    3a98:	df 93       	push	r29
    3a9a:	cf 93       	push	r28
    3a9c:	cd b7       	in	r28, 0x3d	; 61
    3a9e:	de b7       	in	r29, 0x3e	; 62
    3aa0:	60 97       	sbiw	r28, 0x10	; 16
    3aa2:	0f b6       	in	r0, 0x3f	; 63
    3aa4:	f8 94       	cli
    3aa6:	de bf       	out	0x3e, r29	; 62
    3aa8:	0f be       	out	0x3f, r0	; 63
    3aaa:	cd bf       	out	0x3d, r28	; 61
    3aac:	98 8b       	std	Y+16, r25	; 0x10
    3aae:	8f 87       	std	Y+15, r24	; 0x0f
	PWM_voidSetDutyCycle1(Servo_Pos);
    3ab0:	8f 85       	ldd	r24, Y+15	; 0x0f
    3ab2:	98 89       	ldd	r25, Y+16	; 0x10
    3ab4:	0e 94 57 08 	call	0x10ae	; 0x10ae <PWM_voidSetDutyCycle1>
    3ab8:	80 e0       	ldi	r24, 0x00	; 0
    3aba:	90 e0       	ldi	r25, 0x00	; 0
    3abc:	aa ef       	ldi	r26, 0xFA	; 250
    3abe:	b3 e4       	ldi	r27, 0x43	; 67
    3ac0:	8b 87       	std	Y+11, r24	; 0x0b
    3ac2:	9c 87       	std	Y+12, r25	; 0x0c
    3ac4:	ad 87       	std	Y+13, r26	; 0x0d
    3ac6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ac8:	6b 85       	ldd	r22, Y+11	; 0x0b
    3aca:	7c 85       	ldd	r23, Y+12	; 0x0c
    3acc:	8d 85       	ldd	r24, Y+13	; 0x0d
    3ace:	9e 85       	ldd	r25, Y+14	; 0x0e
    3ad0:	20 e0       	ldi	r18, 0x00	; 0
    3ad2:	30 e0       	ldi	r19, 0x00	; 0
    3ad4:	4a ef       	ldi	r20, 0xFA	; 250
    3ad6:	54 e4       	ldi	r21, 0x44	; 68
    3ad8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3adc:	dc 01       	movw	r26, r24
    3ade:	cb 01       	movw	r24, r22
    3ae0:	8f 83       	std	Y+7, r24	; 0x07
    3ae2:	98 87       	std	Y+8, r25	; 0x08
    3ae4:	a9 87       	std	Y+9, r26	; 0x09
    3ae6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3ae8:	6f 81       	ldd	r22, Y+7	; 0x07
    3aea:	78 85       	ldd	r23, Y+8	; 0x08
    3aec:	89 85       	ldd	r24, Y+9	; 0x09
    3aee:	9a 85       	ldd	r25, Y+10	; 0x0a
    3af0:	20 e0       	ldi	r18, 0x00	; 0
    3af2:	30 e0       	ldi	r19, 0x00	; 0
    3af4:	40 e8       	ldi	r20, 0x80	; 128
    3af6:	5f e3       	ldi	r21, 0x3F	; 63
    3af8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3afc:	88 23       	and	r24, r24
    3afe:	2c f4       	brge	.+10     	; 0x3b0a <servo+0x72>
		__ticks = 1;
    3b00:	81 e0       	ldi	r24, 0x01	; 1
    3b02:	90 e0       	ldi	r25, 0x00	; 0
    3b04:	9e 83       	std	Y+6, r25	; 0x06
    3b06:	8d 83       	std	Y+5, r24	; 0x05
    3b08:	3f c0       	rjmp	.+126    	; 0x3b88 <servo+0xf0>
	else if (__tmp > 65535)
    3b0a:	6f 81       	ldd	r22, Y+7	; 0x07
    3b0c:	78 85       	ldd	r23, Y+8	; 0x08
    3b0e:	89 85       	ldd	r24, Y+9	; 0x09
    3b10:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b12:	20 e0       	ldi	r18, 0x00	; 0
    3b14:	3f ef       	ldi	r19, 0xFF	; 255
    3b16:	4f e7       	ldi	r20, 0x7F	; 127
    3b18:	57 e4       	ldi	r21, 0x47	; 71
    3b1a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3b1e:	18 16       	cp	r1, r24
    3b20:	4c f5       	brge	.+82     	; 0x3b74 <servo+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b22:	6b 85       	ldd	r22, Y+11	; 0x0b
    3b24:	7c 85       	ldd	r23, Y+12	; 0x0c
    3b26:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b28:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b2a:	20 e0       	ldi	r18, 0x00	; 0
    3b2c:	30 e0       	ldi	r19, 0x00	; 0
    3b2e:	40 e2       	ldi	r20, 0x20	; 32
    3b30:	51 e4       	ldi	r21, 0x41	; 65
    3b32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b36:	dc 01       	movw	r26, r24
    3b38:	cb 01       	movw	r24, r22
    3b3a:	bc 01       	movw	r22, r24
    3b3c:	cd 01       	movw	r24, r26
    3b3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b42:	dc 01       	movw	r26, r24
    3b44:	cb 01       	movw	r24, r22
    3b46:	9e 83       	std	Y+6, r25	; 0x06
    3b48:	8d 83       	std	Y+5, r24	; 0x05
    3b4a:	0f c0       	rjmp	.+30     	; 0x3b6a <servo+0xd2>
    3b4c:	88 ec       	ldi	r24, 0xC8	; 200
    3b4e:	90 e0       	ldi	r25, 0x00	; 0
    3b50:	9c 83       	std	Y+4, r25	; 0x04
    3b52:	8b 83       	std	Y+3, r24	; 0x03
    3b54:	8b 81       	ldd	r24, Y+3	; 0x03
    3b56:	9c 81       	ldd	r25, Y+4	; 0x04
    3b58:	01 97       	sbiw	r24, 0x01	; 1
    3b5a:	f1 f7       	brne	.-4      	; 0x3b58 <servo+0xc0>
    3b5c:	9c 83       	std	Y+4, r25	; 0x04
    3b5e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b60:	8d 81       	ldd	r24, Y+5	; 0x05
    3b62:	9e 81       	ldd	r25, Y+6	; 0x06
    3b64:	01 97       	sbiw	r24, 0x01	; 1
    3b66:	9e 83       	std	Y+6, r25	; 0x06
    3b68:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b6a:	8d 81       	ldd	r24, Y+5	; 0x05
    3b6c:	9e 81       	ldd	r25, Y+6	; 0x06
    3b6e:	00 97       	sbiw	r24, 0x00	; 0
    3b70:	69 f7       	brne	.-38     	; 0x3b4c <servo+0xb4>
    3b72:	14 c0       	rjmp	.+40     	; 0x3b9c <servo+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b74:	6f 81       	ldd	r22, Y+7	; 0x07
    3b76:	78 85       	ldd	r23, Y+8	; 0x08
    3b78:	89 85       	ldd	r24, Y+9	; 0x09
    3b7a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b80:	dc 01       	movw	r26, r24
    3b82:	cb 01       	movw	r24, r22
    3b84:	9e 83       	std	Y+6, r25	; 0x06
    3b86:	8d 83       	std	Y+5, r24	; 0x05
    3b88:	8d 81       	ldd	r24, Y+5	; 0x05
    3b8a:	9e 81       	ldd	r25, Y+6	; 0x06
    3b8c:	9a 83       	std	Y+2, r25	; 0x02
    3b8e:	89 83       	std	Y+1, r24	; 0x01
    3b90:	89 81       	ldd	r24, Y+1	; 0x01
    3b92:	9a 81       	ldd	r25, Y+2	; 0x02
    3b94:	01 97       	sbiw	r24, 0x01	; 1
    3b96:	f1 f7       	brne	.-4      	; 0x3b94 <servo+0xfc>
    3b98:	9a 83       	std	Y+2, r25	; 0x02
    3b9a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(500);

}
    3b9c:	60 96       	adiw	r28, 0x10	; 16
    3b9e:	0f b6       	in	r0, 0x3f	; 63
    3ba0:	f8 94       	cli
    3ba2:	de bf       	out	0x3e, r29	; 62
    3ba4:	0f be       	out	0x3f, r0	; 63
    3ba6:	cd bf       	out	0x3d, r28	; 61
    3ba8:	cf 91       	pop	r28
    3baa:	df 91       	pop	r29
    3bac:	08 95       	ret

00003bae <Manual_Temp>:
void Manual_Temp()
{
    3bae:	df 93       	push	r29
    3bb0:	cf 93       	push	r28
    3bb2:	cd b7       	in	r28, 0x3d	; 61
    3bb4:	de b7       	in	r29, 0x3e	; 62
    3bb6:	a0 97       	sbiw	r28, 0x20	; 32
    3bb8:	0f b6       	in	r0, 0x3f	; 63
    3bba:	f8 94       	cli
    3bbc:	de bf       	out	0x3e, r29	; 62
    3bbe:	0f be       	out	0x3f, r0	; 63
    3bc0:	cd bf       	out	0x3d, r28	; 61
	LCD_voidclearscrean();
    3bc2:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <LCD_voidclearscrean>
 	LCD_voidsendstring("TEMP: ");
    3bc6:	84 ef       	ldi	r24, 0xF4	; 244
    3bc8:	90 e0       	ldi	r25, 0x00	; 0
    3bca:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <LCD_voidsendstring>
	u8 digital = ADC_u8readvalue(0);
    3bce:	80 e0       	ldi	r24, 0x00	; 0
    3bd0:	0e 94 12 13 	call	0x2624	; 0x2624 <ADC_u8readvalue>
    3bd4:	88 a3       	std	Y+32, r24	; 0x20
	u16 mVolt = ((u32)5000*digital)/256;
    3bd6:	88 a1       	ldd	r24, Y+32	; 0x20
    3bd8:	88 2f       	mov	r24, r24
    3bda:	90 e0       	ldi	r25, 0x00	; 0
    3bdc:	a0 e0       	ldi	r26, 0x00	; 0
    3bde:	b0 e0       	ldi	r27, 0x00	; 0
    3be0:	28 e8       	ldi	r18, 0x88	; 136
    3be2:	33 e1       	ldi	r19, 0x13	; 19
    3be4:	40 e0       	ldi	r20, 0x00	; 0
    3be6:	50 e0       	ldi	r21, 0x00	; 0
    3be8:	bc 01       	movw	r22, r24
    3bea:	cd 01       	movw	r24, r26
    3bec:	0e 94 e4 21 	call	0x43c8	; 0x43c8 <__mulsi3>
    3bf0:	dc 01       	movw	r26, r24
    3bf2:	cb 01       	movw	r24, r22
    3bf4:	89 2f       	mov	r24, r25
    3bf6:	9a 2f       	mov	r25, r26
    3bf8:	ab 2f       	mov	r26, r27
    3bfa:	bb 27       	eor	r27, r27
    3bfc:	9f 8f       	std	Y+31, r25	; 0x1f
    3bfe:	8e 8f       	std	Y+30, r24	; 0x1e
	u8 temp = mVolt/10;
    3c00:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3c02:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3c04:	2a e0       	ldi	r18, 0x0A	; 10
    3c06:	30 e0       	ldi	r19, 0x00	; 0
    3c08:	b9 01       	movw	r22, r18
    3c0a:	0e 94 03 22 	call	0x4406	; 0x4406 <__udivmodhi4>
    3c0e:	cb 01       	movw	r24, r22
    3c10:	8d 8f       	std	Y+29, r24	; 0x1d
	LCD_voidWriteNumber(temp);
    3c12:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3c14:	88 2f       	mov	r24, r24
    3c16:	90 e0       	ldi	r25, 0x00	; 0
    3c18:	a0 e0       	ldi	r26, 0x00	; 0
    3c1a:	b0 e0       	ldi	r27, 0x00	; 0
    3c1c:	bc 01       	movw	r22, r24
    3c1e:	cd 01       	movw	r24, r26
    3c20:	0e 94 05 0e 	call	0x1c0a	; 0x1c0a <LCD_voidWriteNumber>
    3c24:	80 e0       	ldi	r24, 0x00	; 0
    3c26:	90 e8       	ldi	r25, 0x80	; 128
    3c28:	ab e3       	ldi	r26, 0x3B	; 59
    3c2a:	b5 e4       	ldi	r27, 0x45	; 69
    3c2c:	89 8f       	std	Y+25, r24	; 0x19
    3c2e:	9a 8f       	std	Y+26, r25	; 0x1a
    3c30:	ab 8f       	std	Y+27, r26	; 0x1b
    3c32:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c34:	69 8d       	ldd	r22, Y+25	; 0x19
    3c36:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3c38:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3c3a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3c3c:	20 e0       	ldi	r18, 0x00	; 0
    3c3e:	30 e0       	ldi	r19, 0x00	; 0
    3c40:	4a ef       	ldi	r20, 0xFA	; 250
    3c42:	54 e4       	ldi	r21, 0x44	; 68
    3c44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c48:	dc 01       	movw	r26, r24
    3c4a:	cb 01       	movw	r24, r22
    3c4c:	8d 8b       	std	Y+21, r24	; 0x15
    3c4e:	9e 8b       	std	Y+22, r25	; 0x16
    3c50:	af 8b       	std	Y+23, r26	; 0x17
    3c52:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3c54:	6d 89       	ldd	r22, Y+21	; 0x15
    3c56:	7e 89       	ldd	r23, Y+22	; 0x16
    3c58:	8f 89       	ldd	r24, Y+23	; 0x17
    3c5a:	98 8d       	ldd	r25, Y+24	; 0x18
    3c5c:	20 e0       	ldi	r18, 0x00	; 0
    3c5e:	30 e0       	ldi	r19, 0x00	; 0
    3c60:	40 e8       	ldi	r20, 0x80	; 128
    3c62:	5f e3       	ldi	r21, 0x3F	; 63
    3c64:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3c68:	88 23       	and	r24, r24
    3c6a:	2c f4       	brge	.+10     	; 0x3c76 <Manual_Temp+0xc8>
		__ticks = 1;
    3c6c:	81 e0       	ldi	r24, 0x01	; 1
    3c6e:	90 e0       	ldi	r25, 0x00	; 0
    3c70:	9c 8b       	std	Y+20, r25	; 0x14
    3c72:	8b 8b       	std	Y+19, r24	; 0x13
    3c74:	3f c0       	rjmp	.+126    	; 0x3cf4 <Manual_Temp+0x146>
	else if (__tmp > 65535)
    3c76:	6d 89       	ldd	r22, Y+21	; 0x15
    3c78:	7e 89       	ldd	r23, Y+22	; 0x16
    3c7a:	8f 89       	ldd	r24, Y+23	; 0x17
    3c7c:	98 8d       	ldd	r25, Y+24	; 0x18
    3c7e:	20 e0       	ldi	r18, 0x00	; 0
    3c80:	3f ef       	ldi	r19, 0xFF	; 255
    3c82:	4f e7       	ldi	r20, 0x7F	; 127
    3c84:	57 e4       	ldi	r21, 0x47	; 71
    3c86:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3c8a:	18 16       	cp	r1, r24
    3c8c:	4c f5       	brge	.+82     	; 0x3ce0 <Manual_Temp+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c8e:	69 8d       	ldd	r22, Y+25	; 0x19
    3c90:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3c92:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3c94:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3c96:	20 e0       	ldi	r18, 0x00	; 0
    3c98:	30 e0       	ldi	r19, 0x00	; 0
    3c9a:	40 e2       	ldi	r20, 0x20	; 32
    3c9c:	51 e4       	ldi	r21, 0x41	; 65
    3c9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ca2:	dc 01       	movw	r26, r24
    3ca4:	cb 01       	movw	r24, r22
    3ca6:	bc 01       	movw	r22, r24
    3ca8:	cd 01       	movw	r24, r26
    3caa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3cae:	dc 01       	movw	r26, r24
    3cb0:	cb 01       	movw	r24, r22
    3cb2:	9c 8b       	std	Y+20, r25	; 0x14
    3cb4:	8b 8b       	std	Y+19, r24	; 0x13
    3cb6:	0f c0       	rjmp	.+30     	; 0x3cd6 <Manual_Temp+0x128>
    3cb8:	88 ec       	ldi	r24, 0xC8	; 200
    3cba:	90 e0       	ldi	r25, 0x00	; 0
    3cbc:	9a 8b       	std	Y+18, r25	; 0x12
    3cbe:	89 8b       	std	Y+17, r24	; 0x11
    3cc0:	89 89       	ldd	r24, Y+17	; 0x11
    3cc2:	9a 89       	ldd	r25, Y+18	; 0x12
    3cc4:	01 97       	sbiw	r24, 0x01	; 1
    3cc6:	f1 f7       	brne	.-4      	; 0x3cc4 <Manual_Temp+0x116>
    3cc8:	9a 8b       	std	Y+18, r25	; 0x12
    3cca:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ccc:	8b 89       	ldd	r24, Y+19	; 0x13
    3cce:	9c 89       	ldd	r25, Y+20	; 0x14
    3cd0:	01 97       	sbiw	r24, 0x01	; 1
    3cd2:	9c 8b       	std	Y+20, r25	; 0x14
    3cd4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3cd6:	8b 89       	ldd	r24, Y+19	; 0x13
    3cd8:	9c 89       	ldd	r25, Y+20	; 0x14
    3cda:	00 97       	sbiw	r24, 0x00	; 0
    3cdc:	69 f7       	brne	.-38     	; 0x3cb8 <Manual_Temp+0x10a>
    3cde:	14 c0       	rjmp	.+40     	; 0x3d08 <Manual_Temp+0x15a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ce0:	6d 89       	ldd	r22, Y+21	; 0x15
    3ce2:	7e 89       	ldd	r23, Y+22	; 0x16
    3ce4:	8f 89       	ldd	r24, Y+23	; 0x17
    3ce6:	98 8d       	ldd	r25, Y+24	; 0x18
    3ce8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3cec:	dc 01       	movw	r26, r24
    3cee:	cb 01       	movw	r24, r22
    3cf0:	9c 8b       	std	Y+20, r25	; 0x14
    3cf2:	8b 8b       	std	Y+19, r24	; 0x13
    3cf4:	8b 89       	ldd	r24, Y+19	; 0x13
    3cf6:	9c 89       	ldd	r25, Y+20	; 0x14
    3cf8:	98 8b       	std	Y+16, r25	; 0x10
    3cfa:	8f 87       	std	Y+15, r24	; 0x0f
    3cfc:	8f 85       	ldd	r24, Y+15	; 0x0f
    3cfe:	98 89       	ldd	r25, Y+16	; 0x10
    3d00:	01 97       	sbiw	r24, 0x01	; 1
    3d02:	f1 f7       	brne	.-4      	; 0x3d00 <Manual_Temp+0x152>
    3d04:	98 8b       	std	Y+16, r25	; 0x10
    3d06:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(3000);
	LCD_voidclearscrean();
    3d08:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <LCD_voidclearscrean>
    3d0c:	80 e0       	ldi	r24, 0x00	; 0
    3d0e:	90 e0       	ldi	r25, 0x00	; 0
    3d10:	a8 ec       	ldi	r26, 0xC8	; 200
    3d12:	b2 e4       	ldi	r27, 0x42	; 66
    3d14:	8b 87       	std	Y+11, r24	; 0x0b
    3d16:	9c 87       	std	Y+12, r25	; 0x0c
    3d18:	ad 87       	std	Y+13, r26	; 0x0d
    3d1a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d1c:	6b 85       	ldd	r22, Y+11	; 0x0b
    3d1e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3d20:	8d 85       	ldd	r24, Y+13	; 0x0d
    3d22:	9e 85       	ldd	r25, Y+14	; 0x0e
    3d24:	20 e0       	ldi	r18, 0x00	; 0
    3d26:	30 e0       	ldi	r19, 0x00	; 0
    3d28:	4a ef       	ldi	r20, 0xFA	; 250
    3d2a:	54 e4       	ldi	r21, 0x44	; 68
    3d2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d30:	dc 01       	movw	r26, r24
    3d32:	cb 01       	movw	r24, r22
    3d34:	8f 83       	std	Y+7, r24	; 0x07
    3d36:	98 87       	std	Y+8, r25	; 0x08
    3d38:	a9 87       	std	Y+9, r26	; 0x09
    3d3a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3d3c:	6f 81       	ldd	r22, Y+7	; 0x07
    3d3e:	78 85       	ldd	r23, Y+8	; 0x08
    3d40:	89 85       	ldd	r24, Y+9	; 0x09
    3d42:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d44:	20 e0       	ldi	r18, 0x00	; 0
    3d46:	30 e0       	ldi	r19, 0x00	; 0
    3d48:	40 e8       	ldi	r20, 0x80	; 128
    3d4a:	5f e3       	ldi	r21, 0x3F	; 63
    3d4c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3d50:	88 23       	and	r24, r24
    3d52:	2c f4       	brge	.+10     	; 0x3d5e <Manual_Temp+0x1b0>
		__ticks = 1;
    3d54:	81 e0       	ldi	r24, 0x01	; 1
    3d56:	90 e0       	ldi	r25, 0x00	; 0
    3d58:	9e 83       	std	Y+6, r25	; 0x06
    3d5a:	8d 83       	std	Y+5, r24	; 0x05
    3d5c:	3f c0       	rjmp	.+126    	; 0x3ddc <Manual_Temp+0x22e>
	else if (__tmp > 65535)
    3d5e:	6f 81       	ldd	r22, Y+7	; 0x07
    3d60:	78 85       	ldd	r23, Y+8	; 0x08
    3d62:	89 85       	ldd	r24, Y+9	; 0x09
    3d64:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d66:	20 e0       	ldi	r18, 0x00	; 0
    3d68:	3f ef       	ldi	r19, 0xFF	; 255
    3d6a:	4f e7       	ldi	r20, 0x7F	; 127
    3d6c:	57 e4       	ldi	r21, 0x47	; 71
    3d6e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3d72:	18 16       	cp	r1, r24
    3d74:	4c f5       	brge	.+82     	; 0x3dc8 <Manual_Temp+0x21a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d76:	6b 85       	ldd	r22, Y+11	; 0x0b
    3d78:	7c 85       	ldd	r23, Y+12	; 0x0c
    3d7a:	8d 85       	ldd	r24, Y+13	; 0x0d
    3d7c:	9e 85       	ldd	r25, Y+14	; 0x0e
    3d7e:	20 e0       	ldi	r18, 0x00	; 0
    3d80:	30 e0       	ldi	r19, 0x00	; 0
    3d82:	40 e2       	ldi	r20, 0x20	; 32
    3d84:	51 e4       	ldi	r21, 0x41	; 65
    3d86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d8a:	dc 01       	movw	r26, r24
    3d8c:	cb 01       	movw	r24, r22
    3d8e:	bc 01       	movw	r22, r24
    3d90:	cd 01       	movw	r24, r26
    3d92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d96:	dc 01       	movw	r26, r24
    3d98:	cb 01       	movw	r24, r22
    3d9a:	9e 83       	std	Y+6, r25	; 0x06
    3d9c:	8d 83       	std	Y+5, r24	; 0x05
    3d9e:	0f c0       	rjmp	.+30     	; 0x3dbe <Manual_Temp+0x210>
    3da0:	88 ec       	ldi	r24, 0xC8	; 200
    3da2:	90 e0       	ldi	r25, 0x00	; 0
    3da4:	9c 83       	std	Y+4, r25	; 0x04
    3da6:	8b 83       	std	Y+3, r24	; 0x03
    3da8:	8b 81       	ldd	r24, Y+3	; 0x03
    3daa:	9c 81       	ldd	r25, Y+4	; 0x04
    3dac:	01 97       	sbiw	r24, 0x01	; 1
    3dae:	f1 f7       	brne	.-4      	; 0x3dac <Manual_Temp+0x1fe>
    3db0:	9c 83       	std	Y+4, r25	; 0x04
    3db2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3db4:	8d 81       	ldd	r24, Y+5	; 0x05
    3db6:	9e 81       	ldd	r25, Y+6	; 0x06
    3db8:	01 97       	sbiw	r24, 0x01	; 1
    3dba:	9e 83       	std	Y+6, r25	; 0x06
    3dbc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3dbe:	8d 81       	ldd	r24, Y+5	; 0x05
    3dc0:	9e 81       	ldd	r25, Y+6	; 0x06
    3dc2:	00 97       	sbiw	r24, 0x00	; 0
    3dc4:	69 f7       	brne	.-38     	; 0x3da0 <Manual_Temp+0x1f2>
    3dc6:	14 c0       	rjmp	.+40     	; 0x3df0 <Manual_Temp+0x242>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3dc8:	6f 81       	ldd	r22, Y+7	; 0x07
    3dca:	78 85       	ldd	r23, Y+8	; 0x08
    3dcc:	89 85       	ldd	r24, Y+9	; 0x09
    3dce:	9a 85       	ldd	r25, Y+10	; 0x0a
    3dd0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3dd4:	dc 01       	movw	r26, r24
    3dd6:	cb 01       	movw	r24, r22
    3dd8:	9e 83       	std	Y+6, r25	; 0x06
    3dda:	8d 83       	std	Y+5, r24	; 0x05
    3ddc:	8d 81       	ldd	r24, Y+5	; 0x05
    3dde:	9e 81       	ldd	r25, Y+6	; 0x06
    3de0:	9a 83       	std	Y+2, r25	; 0x02
    3de2:	89 83       	std	Y+1, r24	; 0x01
    3de4:	89 81       	ldd	r24, Y+1	; 0x01
    3de6:	9a 81       	ldd	r25, Y+2	; 0x02
    3de8:	01 97       	sbiw	r24, 0x01	; 1
    3dea:	f1 f7       	brne	.-4      	; 0x3de8 <Manual_Temp+0x23a>
    3dec:	9a 83       	std	Y+2, r25	; 0x02
    3dee:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(100);
}
    3df0:	a0 96       	adiw	r28, 0x20	; 32
    3df2:	0f b6       	in	r0, 0x3f	; 63
    3df4:	f8 94       	cli
    3df6:	de bf       	out	0x3e, r29	; 62
    3df8:	0f be       	out	0x3f, r0	; 63
    3dfa:	cd bf       	out	0x3d, r28	; 61
    3dfc:	cf 91       	pop	r28
    3dfe:	df 91       	pop	r29
    3e00:	08 95       	ret

00003e02 <Automatic_Temp>:
u8 Automatic_Temp()
{
    3e02:	df 93       	push	r29
    3e04:	cf 93       	push	r28
    3e06:	00 d0       	rcall	.+0      	; 0x3e08 <Automatic_Temp+0x6>
    3e08:	00 d0       	rcall	.+0      	; 0x3e0a <Automatic_Temp+0x8>
    3e0a:	cd b7       	in	r28, 0x3d	; 61
    3e0c:	de b7       	in	r29, 0x3e	; 62
	u8 digital = ADC_u8readvalue(0);
    3e0e:	80 e0       	ldi	r24, 0x00	; 0
    3e10:	0e 94 12 13 	call	0x2624	; 0x2624 <ADC_u8readvalue>
    3e14:	8c 83       	std	Y+4, r24	; 0x04
	u16 mVolt = ((u32)5000*digital)/256;
    3e16:	8c 81       	ldd	r24, Y+4	; 0x04
    3e18:	88 2f       	mov	r24, r24
    3e1a:	90 e0       	ldi	r25, 0x00	; 0
    3e1c:	a0 e0       	ldi	r26, 0x00	; 0
    3e1e:	b0 e0       	ldi	r27, 0x00	; 0
    3e20:	28 e8       	ldi	r18, 0x88	; 136
    3e22:	33 e1       	ldi	r19, 0x13	; 19
    3e24:	40 e0       	ldi	r20, 0x00	; 0
    3e26:	50 e0       	ldi	r21, 0x00	; 0
    3e28:	bc 01       	movw	r22, r24
    3e2a:	cd 01       	movw	r24, r26
    3e2c:	0e 94 e4 21 	call	0x43c8	; 0x43c8 <__mulsi3>
    3e30:	dc 01       	movw	r26, r24
    3e32:	cb 01       	movw	r24, r22
    3e34:	89 2f       	mov	r24, r25
    3e36:	9a 2f       	mov	r25, r26
    3e38:	ab 2f       	mov	r26, r27
    3e3a:	bb 27       	eor	r27, r27
    3e3c:	9b 83       	std	Y+3, r25	; 0x03
    3e3e:	8a 83       	std	Y+2, r24	; 0x02
	u8 temp = mVolt/10;
    3e40:	8a 81       	ldd	r24, Y+2	; 0x02
    3e42:	9b 81       	ldd	r25, Y+3	; 0x03
    3e44:	2a e0       	ldi	r18, 0x0A	; 10
    3e46:	30 e0       	ldi	r19, 0x00	; 0
    3e48:	b9 01       	movw	r22, r18
    3e4a:	0e 94 03 22 	call	0x4406	; 0x4406 <__udivmodhi4>
    3e4e:	cb 01       	movw	r24, r22
    3e50:	89 83       	std	Y+1, r24	; 0x01
	return temp;
    3e52:	89 81       	ldd	r24, Y+1	; 0x01
}
    3e54:	0f 90       	pop	r0
    3e56:	0f 90       	pop	r0
    3e58:	0f 90       	pop	r0
    3e5a:	0f 90       	pop	r0
    3e5c:	cf 91       	pop	r28
    3e5e:	df 91       	pop	r29
    3e60:	08 95       	ret

00003e62 <DC_Motor>:
void DC_Motor()
{
    3e62:	df 93       	push	r29
    3e64:	cf 93       	push	r28
    3e66:	cd b7       	in	r28, 0x3d	; 61
    3e68:	de b7       	in	r29, 0x3e	; 62
    3e6a:	60 97       	sbiw	r28, 0x10	; 16
    3e6c:	0f b6       	in	r0, 0x3f	; 63
    3e6e:	f8 94       	cli
    3e70:	de bf       	out	0x3e, r29	; 62
    3e72:	0f be       	out	0x3f, r0	; 63
    3e74:	cd bf       	out	0x3d, r28	; 61
    LCD_voidclearscrean();
    3e76:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <LCD_voidclearscrean>
    LCD_voidsendstring("1-(ON) 2-(OFF)");
    3e7a:	8b ef       	ldi	r24, 0xFB	; 251
    3e7c:	90 e0       	ldi	r25, 0x00	; 0
    3e7e:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <LCD_voidsendstring>
    LCD_gotoxy(1 ,0);
    3e82:	81 e0       	ldi	r24, 0x01	; 1
    3e84:	60 e0       	ldi	r22, 0x00	; 0
    3e86:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <LCD_gotoxy>
    LCD_voidsendstring("3- Return");
    3e8a:	8a e0       	ldi	r24, 0x0A	; 10
    3e8c:	91 e0       	ldi	r25, 0x01	; 1
    3e8e:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <LCD_voidsendstring>
    key= UART_u8Recive();
    3e92:	0e 94 da 05 	call	0xbb4	; 0xbb4 <UART_u8Recive>
    3e96:	80 93 ee 01 	sts	0x01EE, r24
    3e9a:	80 e0       	ldi	r24, 0x00	; 0
    3e9c:	90 e0       	ldi	r25, 0x00	; 0
    3e9e:	aa e7       	ldi	r26, 0x7A	; 122
    3ea0:	b4 e4       	ldi	r27, 0x44	; 68
    3ea2:	8b 87       	std	Y+11, r24	; 0x0b
    3ea4:	9c 87       	std	Y+12, r25	; 0x0c
    3ea6:	ad 87       	std	Y+13, r26	; 0x0d
    3ea8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3eaa:	6b 85       	ldd	r22, Y+11	; 0x0b
    3eac:	7c 85       	ldd	r23, Y+12	; 0x0c
    3eae:	8d 85       	ldd	r24, Y+13	; 0x0d
    3eb0:	9e 85       	ldd	r25, Y+14	; 0x0e
    3eb2:	20 e0       	ldi	r18, 0x00	; 0
    3eb4:	30 e0       	ldi	r19, 0x00	; 0
    3eb6:	4a ef       	ldi	r20, 0xFA	; 250
    3eb8:	54 e4       	ldi	r21, 0x44	; 68
    3eba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ebe:	dc 01       	movw	r26, r24
    3ec0:	cb 01       	movw	r24, r22
    3ec2:	8f 83       	std	Y+7, r24	; 0x07
    3ec4:	98 87       	std	Y+8, r25	; 0x08
    3ec6:	a9 87       	std	Y+9, r26	; 0x09
    3ec8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3eca:	6f 81       	ldd	r22, Y+7	; 0x07
    3ecc:	78 85       	ldd	r23, Y+8	; 0x08
    3ece:	89 85       	ldd	r24, Y+9	; 0x09
    3ed0:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ed2:	20 e0       	ldi	r18, 0x00	; 0
    3ed4:	30 e0       	ldi	r19, 0x00	; 0
    3ed6:	40 e8       	ldi	r20, 0x80	; 128
    3ed8:	5f e3       	ldi	r21, 0x3F	; 63
    3eda:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3ede:	88 23       	and	r24, r24
    3ee0:	2c f4       	brge	.+10     	; 0x3eec <DC_Motor+0x8a>
		__ticks = 1;
    3ee2:	81 e0       	ldi	r24, 0x01	; 1
    3ee4:	90 e0       	ldi	r25, 0x00	; 0
    3ee6:	9e 83       	std	Y+6, r25	; 0x06
    3ee8:	8d 83       	std	Y+5, r24	; 0x05
    3eea:	3f c0       	rjmp	.+126    	; 0x3f6a <DC_Motor+0x108>
	else if (__tmp > 65535)
    3eec:	6f 81       	ldd	r22, Y+7	; 0x07
    3eee:	78 85       	ldd	r23, Y+8	; 0x08
    3ef0:	89 85       	ldd	r24, Y+9	; 0x09
    3ef2:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ef4:	20 e0       	ldi	r18, 0x00	; 0
    3ef6:	3f ef       	ldi	r19, 0xFF	; 255
    3ef8:	4f e7       	ldi	r20, 0x7F	; 127
    3efa:	57 e4       	ldi	r21, 0x47	; 71
    3efc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3f00:	18 16       	cp	r1, r24
    3f02:	4c f5       	brge	.+82     	; 0x3f56 <DC_Motor+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f04:	6b 85       	ldd	r22, Y+11	; 0x0b
    3f06:	7c 85       	ldd	r23, Y+12	; 0x0c
    3f08:	8d 85       	ldd	r24, Y+13	; 0x0d
    3f0a:	9e 85       	ldd	r25, Y+14	; 0x0e
    3f0c:	20 e0       	ldi	r18, 0x00	; 0
    3f0e:	30 e0       	ldi	r19, 0x00	; 0
    3f10:	40 e2       	ldi	r20, 0x20	; 32
    3f12:	51 e4       	ldi	r21, 0x41	; 65
    3f14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f18:	dc 01       	movw	r26, r24
    3f1a:	cb 01       	movw	r24, r22
    3f1c:	bc 01       	movw	r22, r24
    3f1e:	cd 01       	movw	r24, r26
    3f20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f24:	dc 01       	movw	r26, r24
    3f26:	cb 01       	movw	r24, r22
    3f28:	9e 83       	std	Y+6, r25	; 0x06
    3f2a:	8d 83       	std	Y+5, r24	; 0x05
    3f2c:	0f c0       	rjmp	.+30     	; 0x3f4c <DC_Motor+0xea>
    3f2e:	88 ec       	ldi	r24, 0xC8	; 200
    3f30:	90 e0       	ldi	r25, 0x00	; 0
    3f32:	9c 83       	std	Y+4, r25	; 0x04
    3f34:	8b 83       	std	Y+3, r24	; 0x03
    3f36:	8b 81       	ldd	r24, Y+3	; 0x03
    3f38:	9c 81       	ldd	r25, Y+4	; 0x04
    3f3a:	01 97       	sbiw	r24, 0x01	; 1
    3f3c:	f1 f7       	brne	.-4      	; 0x3f3a <DC_Motor+0xd8>
    3f3e:	9c 83       	std	Y+4, r25	; 0x04
    3f40:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f42:	8d 81       	ldd	r24, Y+5	; 0x05
    3f44:	9e 81       	ldd	r25, Y+6	; 0x06
    3f46:	01 97       	sbiw	r24, 0x01	; 1
    3f48:	9e 83       	std	Y+6, r25	; 0x06
    3f4a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f4c:	8d 81       	ldd	r24, Y+5	; 0x05
    3f4e:	9e 81       	ldd	r25, Y+6	; 0x06
    3f50:	00 97       	sbiw	r24, 0x00	; 0
    3f52:	69 f7       	brne	.-38     	; 0x3f2e <DC_Motor+0xcc>
    3f54:	14 c0       	rjmp	.+40     	; 0x3f7e <DC_Motor+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f56:	6f 81       	ldd	r22, Y+7	; 0x07
    3f58:	78 85       	ldd	r23, Y+8	; 0x08
    3f5a:	89 85       	ldd	r24, Y+9	; 0x09
    3f5c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f62:	dc 01       	movw	r26, r24
    3f64:	cb 01       	movw	r24, r22
    3f66:	9e 83       	std	Y+6, r25	; 0x06
    3f68:	8d 83       	std	Y+5, r24	; 0x05
    3f6a:	8d 81       	ldd	r24, Y+5	; 0x05
    3f6c:	9e 81       	ldd	r25, Y+6	; 0x06
    3f6e:	9a 83       	std	Y+2, r25	; 0x02
    3f70:	89 83       	std	Y+1, r24	; 0x01
    3f72:	89 81       	ldd	r24, Y+1	; 0x01
    3f74:	9a 81       	ldd	r25, Y+2	; 0x02
    3f76:	01 97       	sbiw	r24, 0x01	; 1
    3f78:	f1 f7       	brne	.-4      	; 0x3f76 <DC_Motor+0x114>
    3f7a:	9a 83       	std	Y+2, r25	; 0x02
    3f7c:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(1000);

    switch (key)
    3f7e:	80 91 ee 01 	lds	r24, 0x01EE
    3f82:	28 2f       	mov	r18, r24
    3f84:	30 e0       	ldi	r19, 0x00	; 0
    3f86:	38 8b       	std	Y+16, r19	; 0x10
    3f88:	2f 87       	std	Y+15, r18	; 0x0f
    3f8a:	8f 85       	ldd	r24, Y+15	; 0x0f
    3f8c:	98 89       	ldd	r25, Y+16	; 0x10
    3f8e:	81 33       	cpi	r24, 0x31	; 49
    3f90:	91 05       	cpc	r25, r1
    3f92:	31 f0       	breq	.+12     	; 0x3fa0 <DC_Motor+0x13e>
    3f94:	2f 85       	ldd	r18, Y+15	; 0x0f
    3f96:	38 89       	ldd	r19, Y+16	; 0x10
    3f98:	22 33       	cpi	r18, 0x32	; 50
    3f9a:	31 05       	cpc	r19, r1
    3f9c:	39 f0       	breq	.+14     	; 0x3fac <DC_Motor+0x14a>
    3f9e:	0b c0       	rjmp	.+22     	; 0x3fb6 <DC_Motor+0x154>
    {
    case '1':
    	Dio_voidSetPinValue(DC_MOTOR_PORT, DC_MOTOR_PIN, DIO_HIGH);
    3fa0:	80 e0       	ldi	r24, 0x00	; 0
    3fa2:	62 e0       	ldi	r22, 0x02	; 2
    3fa4:	41 e0       	ldi	r20, 0x01	; 1
    3fa6:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <Dio_voidSetPinValue>
    3faa:	05 c0       	rjmp	.+10     	; 0x3fb6 <DC_Motor+0x154>
    	break;
    case '2':
    	Dio_voidSetPinValue(DC_MOTOR_PORT, DC_MOTOR_PIN, DIO_LOW);
    3fac:	80 e0       	ldi	r24, 0x00	; 0
    3fae:	62 e0       	ldi	r22, 0x02	; 2
    3fb0:	40 e0       	ldi	r20, 0x00	; 0
    3fb2:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <Dio_voidSetPinValue>
    	break;
    default:
       	break;
    }

}
    3fb6:	60 96       	adiw	r28, 0x10	; 16
    3fb8:	0f b6       	in	r0, 0x3f	; 63
    3fba:	f8 94       	cli
    3fbc:	de bf       	out	0x3e, r29	; 62
    3fbe:	0f be       	out	0x3f, r0	; 63
    3fc0:	cd bf       	out	0x3d, r28	; 61
    3fc2:	cf 91       	pop	r28
    3fc4:	df 91       	pop	r29
    3fc6:	08 95       	ret

00003fc8 <DC_AutomaticMotor>:
void DC_AutomaticMotor()
{
    3fc8:	df 93       	push	r29
    3fca:	cf 93       	push	r28
    3fcc:	cd b7       	in	r28, 0x3d	; 61
    3fce:	de b7       	in	r29, 0x3e	; 62
	Dio_voidSetPinValue(DC_MOTOR_PORT, DC_MOTOR_PIN, DIO_HIGH);
    3fd0:	80 e0       	ldi	r24, 0x00	; 0
    3fd2:	62 e0       	ldi	r22, 0x02	; 2
    3fd4:	41 e0       	ldi	r20, 0x01	; 1
    3fd6:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <Dio_voidSetPinValue>
}
    3fda:	cf 91       	pop	r28
    3fdc:	df 91       	pop	r29
    3fde:	08 95       	ret

00003fe0 <LED_init>:

void LED_init()
{
    3fe0:	df 93       	push	r29
    3fe2:	cf 93       	push	r28
    3fe4:	cd b7       	in	r28, 0x3d	; 61
    3fe6:	de b7       	in	r29, 0x3e	; 62
    Dio_voidSetPinDirection (LEDS_PORT,LED1_PIN,DIO_OUTPUT);
    3fe8:	81 e0       	ldi	r24, 0x01	; 1
    3fea:	60 e0       	ldi	r22, 0x00	; 0
    3fec:	41 e0       	ldi	r20, 0x01	; 1
    3fee:	0e 94 d9 0e 	call	0x1db2	; 0x1db2 <Dio_voidSetPinDirection>
 	Dio_voidSetPinDirection (LEDS_PORT,LED2_PIN,DIO_OUTPUT);
    3ff2:	81 e0       	ldi	r24, 0x01	; 1
    3ff4:	61 e0       	ldi	r22, 0x01	; 1
    3ff6:	41 e0       	ldi	r20, 0x01	; 1
    3ff8:	0e 94 d9 0e 	call	0x1db2	; 0x1db2 <Dio_voidSetPinDirection>
 	Dio_voidSetPinDirection (LEDS_PORT,LED3_PIN,DIO_OUTPUT);
    3ffc:	81 e0       	ldi	r24, 0x01	; 1
    3ffe:	62 e0       	ldi	r22, 0x02	; 2
    4000:	41 e0       	ldi	r20, 0x01	; 1
    4002:	0e 94 d9 0e 	call	0x1db2	; 0x1db2 <Dio_voidSetPinDirection>

}
    4006:	cf 91       	pop	r28
    4008:	df 91       	pop	r29
    400a:	08 95       	ret

0000400c <LED_ON>:
void LED_ON(void)
{
    400c:	df 93       	push	r29
    400e:	cf 93       	push	r28
    4010:	cd b7       	in	r28, 0x3d	; 61
    4012:	de b7       	in	r29, 0x3e	; 62
    Dio_voidSetPinValue (LEDS_PORT,LED1_PIN,DIO_HIGH);
    4014:	81 e0       	ldi	r24, 0x01	; 1
    4016:	60 e0       	ldi	r22, 0x00	; 0
    4018:	41 e0       	ldi	r20, 0x01	; 1
    401a:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <Dio_voidSetPinValue>
    Dio_voidSetPinValue (LEDS_PORT,LED2_PIN,DIO_HIGH);
    401e:	81 e0       	ldi	r24, 0x01	; 1
    4020:	61 e0       	ldi	r22, 0x01	; 1
    4022:	41 e0       	ldi	r20, 0x01	; 1
    4024:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <Dio_voidSetPinValue>
    Dio_voidSetPinValue (LEDS_PORT,LED3_PIN,DIO_HIGH);
    4028:	81 e0       	ldi	r24, 0x01	; 1
    402a:	62 e0       	ldi	r22, 0x02	; 2
    402c:	41 e0       	ldi	r20, 0x01	; 1
    402e:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <Dio_voidSetPinValue>

}
    4032:	cf 91       	pop	r28
    4034:	df 91       	pop	r29
    4036:	08 95       	ret

00004038 <LED_OFF>:

 void LED_OFF(void)
{
    4038:	df 93       	push	r29
    403a:	cf 93       	push	r28
    403c:	cd b7       	in	r28, 0x3d	; 61
    403e:	de b7       	in	r29, 0x3e	; 62
    Dio_voidSetPinValue (LEDS_PORT,LED1_PIN,DIO_LOW);
    4040:	81 e0       	ldi	r24, 0x01	; 1
    4042:	60 e0       	ldi	r22, 0x00	; 0
    4044:	40 e0       	ldi	r20, 0x00	; 0
    4046:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <Dio_voidSetPinValue>
    Dio_voidSetPinValue (LEDS_PORT,LED2_PIN,DIO_LOW);
    404a:	81 e0       	ldi	r24, 0x01	; 1
    404c:	61 e0       	ldi	r22, 0x01	; 1
    404e:	40 e0       	ldi	r20, 0x00	; 0
    4050:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <Dio_voidSetPinValue>
    Dio_voidSetPinValue (LEDS_PORT,LED3_PIN,DIO_LOW);
    4054:	81 e0       	ldi	r24, 0x01	; 1
    4056:	62 e0       	ldi	r22, 0x02	; 2
    4058:	40 e0       	ldi	r20, 0x00	; 0
    405a:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <Dio_voidSetPinValue>
 }
    405e:	cf 91       	pop	r28
    4060:	df 91       	pop	r29
    4062:	08 95       	ret

00004064 <Home_ManualSys>:

void Home_ManualSys()
{
    4064:	df 93       	push	r29
    4066:	cf 93       	push	r28
    4068:	cd b7       	in	r28, 0x3d	; 61
    406a:	de b7       	in	r29, 0x3e	; 62
    406c:	6e 97       	sbiw	r28, 0x1e	; 30
    406e:	0f b6       	in	r0, 0x3f	; 63
    4070:	f8 94       	cli
    4072:	de bf       	out	0x3e, r29	; 62
    4074:	0f be       	out	0x3f, r0	; 63
    4076:	cd bf       	out	0x3d, r28	; 61
    LCD_voidclearscrean();
    4078:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <LCD_voidclearscrean>
    LCD_voidsendstring("1-Open. 2-Temp.");
    407c:	84 e1       	ldi	r24, 0x14	; 20
    407e:	91 e0       	ldi	r25, 0x01	; 1
    4080:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <LCD_voidsendstring>
    LCD_gotoxy(1, 0);
    4084:	81 e0       	ldi	r24, 0x01	; 1
    4086:	60 e0       	ldi	r22, 0x00	; 0
    4088:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <LCD_gotoxy>
    LCD_voidsendstring("3-Fan.  4-Light.");
    408c:	84 e2       	ldi	r24, 0x24	; 36
    408e:	91 e0       	ldi	r25, 0x01	; 1
    4090:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <LCD_voidsendstring>
    // Receive a character from UART
    choose=UART_u8Recive();
    4094:	0e 94 da 05 	call	0xbb4	; 0xbb4 <UART_u8Recive>
    4098:	80 93 ed 01 	sts	0x01ED, r24
    LCD_voidclearscrean();
    409c:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <LCD_voidclearscrean>
    40a0:	80 e0       	ldi	r24, 0x00	; 0
    40a2:	90 e0       	ldi	r25, 0x00	; 0
    40a4:	aa e7       	ldi	r26, 0x7A	; 122
    40a6:	b4 e4       	ldi	r27, 0x44	; 68
    40a8:	89 8f       	std	Y+25, r24	; 0x19
    40aa:	9a 8f       	std	Y+26, r25	; 0x1a
    40ac:	ab 8f       	std	Y+27, r26	; 0x1b
    40ae:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    40b0:	69 8d       	ldd	r22, Y+25	; 0x19
    40b2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    40b4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    40b6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    40b8:	20 e0       	ldi	r18, 0x00	; 0
    40ba:	30 e0       	ldi	r19, 0x00	; 0
    40bc:	4a ef       	ldi	r20, 0xFA	; 250
    40be:	54 e4       	ldi	r21, 0x44	; 68
    40c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    40c4:	dc 01       	movw	r26, r24
    40c6:	cb 01       	movw	r24, r22
    40c8:	8d 8b       	std	Y+21, r24	; 0x15
    40ca:	9e 8b       	std	Y+22, r25	; 0x16
    40cc:	af 8b       	std	Y+23, r26	; 0x17
    40ce:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    40d0:	6d 89       	ldd	r22, Y+21	; 0x15
    40d2:	7e 89       	ldd	r23, Y+22	; 0x16
    40d4:	8f 89       	ldd	r24, Y+23	; 0x17
    40d6:	98 8d       	ldd	r25, Y+24	; 0x18
    40d8:	20 e0       	ldi	r18, 0x00	; 0
    40da:	30 e0       	ldi	r19, 0x00	; 0
    40dc:	40 e8       	ldi	r20, 0x80	; 128
    40de:	5f e3       	ldi	r21, 0x3F	; 63
    40e0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    40e4:	88 23       	and	r24, r24
    40e6:	2c f4       	brge	.+10     	; 0x40f2 <Home_ManualSys+0x8e>
		__ticks = 1;
    40e8:	81 e0       	ldi	r24, 0x01	; 1
    40ea:	90 e0       	ldi	r25, 0x00	; 0
    40ec:	9c 8b       	std	Y+20, r25	; 0x14
    40ee:	8b 8b       	std	Y+19, r24	; 0x13
    40f0:	3f c0       	rjmp	.+126    	; 0x4170 <Home_ManualSys+0x10c>
	else if (__tmp > 65535)
    40f2:	6d 89       	ldd	r22, Y+21	; 0x15
    40f4:	7e 89       	ldd	r23, Y+22	; 0x16
    40f6:	8f 89       	ldd	r24, Y+23	; 0x17
    40f8:	98 8d       	ldd	r25, Y+24	; 0x18
    40fa:	20 e0       	ldi	r18, 0x00	; 0
    40fc:	3f ef       	ldi	r19, 0xFF	; 255
    40fe:	4f e7       	ldi	r20, 0x7F	; 127
    4100:	57 e4       	ldi	r21, 0x47	; 71
    4102:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4106:	18 16       	cp	r1, r24
    4108:	4c f5       	brge	.+82     	; 0x415c <Home_ManualSys+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    410a:	69 8d       	ldd	r22, Y+25	; 0x19
    410c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    410e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4110:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4112:	20 e0       	ldi	r18, 0x00	; 0
    4114:	30 e0       	ldi	r19, 0x00	; 0
    4116:	40 e2       	ldi	r20, 0x20	; 32
    4118:	51 e4       	ldi	r21, 0x41	; 65
    411a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    411e:	dc 01       	movw	r26, r24
    4120:	cb 01       	movw	r24, r22
    4122:	bc 01       	movw	r22, r24
    4124:	cd 01       	movw	r24, r26
    4126:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    412a:	dc 01       	movw	r26, r24
    412c:	cb 01       	movw	r24, r22
    412e:	9c 8b       	std	Y+20, r25	; 0x14
    4130:	8b 8b       	std	Y+19, r24	; 0x13
    4132:	0f c0       	rjmp	.+30     	; 0x4152 <Home_ManualSys+0xee>
    4134:	88 ec       	ldi	r24, 0xC8	; 200
    4136:	90 e0       	ldi	r25, 0x00	; 0
    4138:	9a 8b       	std	Y+18, r25	; 0x12
    413a:	89 8b       	std	Y+17, r24	; 0x11
    413c:	89 89       	ldd	r24, Y+17	; 0x11
    413e:	9a 89       	ldd	r25, Y+18	; 0x12
    4140:	01 97       	sbiw	r24, 0x01	; 1
    4142:	f1 f7       	brne	.-4      	; 0x4140 <Home_ManualSys+0xdc>
    4144:	9a 8b       	std	Y+18, r25	; 0x12
    4146:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4148:	8b 89       	ldd	r24, Y+19	; 0x13
    414a:	9c 89       	ldd	r25, Y+20	; 0x14
    414c:	01 97       	sbiw	r24, 0x01	; 1
    414e:	9c 8b       	std	Y+20, r25	; 0x14
    4150:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4152:	8b 89       	ldd	r24, Y+19	; 0x13
    4154:	9c 89       	ldd	r25, Y+20	; 0x14
    4156:	00 97       	sbiw	r24, 0x00	; 0
    4158:	69 f7       	brne	.-38     	; 0x4134 <Home_ManualSys+0xd0>
    415a:	14 c0       	rjmp	.+40     	; 0x4184 <Home_ManualSys+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    415c:	6d 89       	ldd	r22, Y+21	; 0x15
    415e:	7e 89       	ldd	r23, Y+22	; 0x16
    4160:	8f 89       	ldd	r24, Y+23	; 0x17
    4162:	98 8d       	ldd	r25, Y+24	; 0x18
    4164:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4168:	dc 01       	movw	r26, r24
    416a:	cb 01       	movw	r24, r22
    416c:	9c 8b       	std	Y+20, r25	; 0x14
    416e:	8b 8b       	std	Y+19, r24	; 0x13
    4170:	8b 89       	ldd	r24, Y+19	; 0x13
    4172:	9c 89       	ldd	r25, Y+20	; 0x14
    4174:	98 8b       	std	Y+16, r25	; 0x10
    4176:	8f 87       	std	Y+15, r24	; 0x0f
    4178:	8f 85       	ldd	r24, Y+15	; 0x0f
    417a:	98 89       	ldd	r25, Y+16	; 0x10
    417c:	01 97       	sbiw	r24, 0x01	; 1
    417e:	f1 f7       	brne	.-4      	; 0x417c <Home_ManualSys+0x118>
    4180:	98 8b       	std	Y+16, r25	; 0x10
    4182:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms(1000);
    switch (choose)
    4184:	80 91 ed 01 	lds	r24, 0x01ED
    4188:	28 2f       	mov	r18, r24
    418a:	30 e0       	ldi	r19, 0x00	; 0
    418c:	3e 8f       	std	Y+30, r19	; 0x1e
    418e:	2d 8f       	std	Y+29, r18	; 0x1d
    4190:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4192:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4194:	83 33       	cpi	r24, 0x33	; 51
    4196:	91 05       	cpc	r25, r1
    4198:	19 f1       	breq	.+70     	; 0x41e0 <Home_ManualSys+0x17c>
    419a:	2d 8d       	ldd	r18, Y+29	; 0x1d
    419c:	3e 8d       	ldd	r19, Y+30	; 0x1e
    419e:	24 33       	cpi	r18, 0x34	; 52
    41a0:	31 05       	cpc	r19, r1
    41a2:	5c f4       	brge	.+22     	; 0x41ba <Home_ManualSys+0x156>
    41a4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    41a6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    41a8:	81 33       	cpi	r24, 0x31	; 49
    41aa:	91 05       	cpc	r25, r1
    41ac:	89 f0       	breq	.+34     	; 0x41d0 <Home_ManualSys+0x16c>
    41ae:	2d 8d       	ldd	r18, Y+29	; 0x1d
    41b0:	3e 8d       	ldd	r19, Y+30	; 0x1e
    41b2:	22 33       	cpi	r18, 0x32	; 50
    41b4:	31 05       	cpc	r19, r1
    41b6:	89 f0       	breq	.+34     	; 0x41da <Home_ManualSys+0x176>
    41b8:	1c c0       	rjmp	.+56     	; 0x41f2 <Home_ManualSys+0x18e>
    41ba:	8d 8d       	ldd	r24, Y+29	; 0x1d
    41bc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    41be:	84 33       	cpi	r24, 0x34	; 52
    41c0:	91 05       	cpc	r25, r1
    41c2:	89 f0       	breq	.+34     	; 0x41e6 <Home_ManualSys+0x182>
    41c4:	2d 8d       	ldd	r18, Y+29	; 0x1d
    41c6:	3e 8d       	ldd	r19, Y+30	; 0x1e
    41c8:	25 33       	cpi	r18, 0x35	; 53
    41ca:	31 05       	cpc	r19, r1
    41cc:	79 f0       	breq	.+30     	; 0x41ec <Home_ManualSys+0x188>
    41ce:	11 c0       	rjmp	.+34     	; 0x41f2 <Home_ManualSys+0x18e>
    {
    case '1':
        servo(2500);
    41d0:	84 ec       	ldi	r24, 0xC4	; 196
    41d2:	99 e0       	ldi	r25, 0x09	; 9
    41d4:	0e 94 4c 1d 	call	0x3a98	; 0x3a98 <servo>
    41d8:	84 c0       	rjmp	.+264    	; 0x42e2 <Home_ManualSys+0x27e>
        break;
    case '2':
    	Manual_Temp();
    41da:	0e 94 d7 1d 	call	0x3bae	; 0x3bae <Manual_Temp>
    41de:	81 c0       	rjmp	.+258    	; 0x42e2 <Home_ManualSys+0x27e>

        break;
    case '3':
        DC_Motor();
    41e0:	0e 94 31 1f 	call	0x3e62	; 0x3e62 <DC_Motor>
    41e4:	7e c0       	rjmp	.+252    	; 0x42e2 <Home_ManualSys+0x27e>
        break;
    case '4':
    	LED_ON();
    41e6:	0e 94 06 20 	call	0x400c	; 0x400c <LED_ON>
    41ea:	7b c0       	rjmp	.+246    	; 0x42e2 <Home_ManualSys+0x27e>
    	break;
    case '5':
    	LED_OFF();
    41ec:	0e 94 1c 20 	call	0x4038	; 0x4038 <LED_OFF>
    41f0:	78 c0       	rjmp	.+240    	; 0x42e2 <Home_ManualSys+0x27e>
    	break;
    default:
    	LCD_voidclearscrean();
    41f2:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <LCD_voidclearscrean>
        LCD_voidsendstring("incorrect input");
    41f6:	85 e3       	ldi	r24, 0x35	; 53
    41f8:	91 e0       	ldi	r25, 0x01	; 1
    41fa:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <LCD_voidsendstring>
    41fe:	80 e0       	ldi	r24, 0x00	; 0
    4200:	90 e0       	ldi	r25, 0x00	; 0
    4202:	aa e7       	ldi	r26, 0x7A	; 122
    4204:	b4 e4       	ldi	r27, 0x44	; 68
    4206:	8b 87       	std	Y+11, r24	; 0x0b
    4208:	9c 87       	std	Y+12, r25	; 0x0c
    420a:	ad 87       	std	Y+13, r26	; 0x0d
    420c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    420e:	6b 85       	ldd	r22, Y+11	; 0x0b
    4210:	7c 85       	ldd	r23, Y+12	; 0x0c
    4212:	8d 85       	ldd	r24, Y+13	; 0x0d
    4214:	9e 85       	ldd	r25, Y+14	; 0x0e
    4216:	20 e0       	ldi	r18, 0x00	; 0
    4218:	30 e0       	ldi	r19, 0x00	; 0
    421a:	4a ef       	ldi	r20, 0xFA	; 250
    421c:	54 e4       	ldi	r21, 0x44	; 68
    421e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4222:	dc 01       	movw	r26, r24
    4224:	cb 01       	movw	r24, r22
    4226:	8f 83       	std	Y+7, r24	; 0x07
    4228:	98 87       	std	Y+8, r25	; 0x08
    422a:	a9 87       	std	Y+9, r26	; 0x09
    422c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    422e:	6f 81       	ldd	r22, Y+7	; 0x07
    4230:	78 85       	ldd	r23, Y+8	; 0x08
    4232:	89 85       	ldd	r24, Y+9	; 0x09
    4234:	9a 85       	ldd	r25, Y+10	; 0x0a
    4236:	20 e0       	ldi	r18, 0x00	; 0
    4238:	30 e0       	ldi	r19, 0x00	; 0
    423a:	40 e8       	ldi	r20, 0x80	; 128
    423c:	5f e3       	ldi	r21, 0x3F	; 63
    423e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4242:	88 23       	and	r24, r24
    4244:	2c f4       	brge	.+10     	; 0x4250 <Home_ManualSys+0x1ec>
		__ticks = 1;
    4246:	81 e0       	ldi	r24, 0x01	; 1
    4248:	90 e0       	ldi	r25, 0x00	; 0
    424a:	9e 83       	std	Y+6, r25	; 0x06
    424c:	8d 83       	std	Y+5, r24	; 0x05
    424e:	3f c0       	rjmp	.+126    	; 0x42ce <Home_ManualSys+0x26a>
	else if (__tmp > 65535)
    4250:	6f 81       	ldd	r22, Y+7	; 0x07
    4252:	78 85       	ldd	r23, Y+8	; 0x08
    4254:	89 85       	ldd	r24, Y+9	; 0x09
    4256:	9a 85       	ldd	r25, Y+10	; 0x0a
    4258:	20 e0       	ldi	r18, 0x00	; 0
    425a:	3f ef       	ldi	r19, 0xFF	; 255
    425c:	4f e7       	ldi	r20, 0x7F	; 127
    425e:	57 e4       	ldi	r21, 0x47	; 71
    4260:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4264:	18 16       	cp	r1, r24
    4266:	4c f5       	brge	.+82     	; 0x42ba <Home_ManualSys+0x256>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4268:	6b 85       	ldd	r22, Y+11	; 0x0b
    426a:	7c 85       	ldd	r23, Y+12	; 0x0c
    426c:	8d 85       	ldd	r24, Y+13	; 0x0d
    426e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4270:	20 e0       	ldi	r18, 0x00	; 0
    4272:	30 e0       	ldi	r19, 0x00	; 0
    4274:	40 e2       	ldi	r20, 0x20	; 32
    4276:	51 e4       	ldi	r21, 0x41	; 65
    4278:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    427c:	dc 01       	movw	r26, r24
    427e:	cb 01       	movw	r24, r22
    4280:	bc 01       	movw	r22, r24
    4282:	cd 01       	movw	r24, r26
    4284:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4288:	dc 01       	movw	r26, r24
    428a:	cb 01       	movw	r24, r22
    428c:	9e 83       	std	Y+6, r25	; 0x06
    428e:	8d 83       	std	Y+5, r24	; 0x05
    4290:	0f c0       	rjmp	.+30     	; 0x42b0 <Home_ManualSys+0x24c>
    4292:	88 ec       	ldi	r24, 0xC8	; 200
    4294:	90 e0       	ldi	r25, 0x00	; 0
    4296:	9c 83       	std	Y+4, r25	; 0x04
    4298:	8b 83       	std	Y+3, r24	; 0x03
    429a:	8b 81       	ldd	r24, Y+3	; 0x03
    429c:	9c 81       	ldd	r25, Y+4	; 0x04
    429e:	01 97       	sbiw	r24, 0x01	; 1
    42a0:	f1 f7       	brne	.-4      	; 0x429e <Home_ManualSys+0x23a>
    42a2:	9c 83       	std	Y+4, r25	; 0x04
    42a4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    42a6:	8d 81       	ldd	r24, Y+5	; 0x05
    42a8:	9e 81       	ldd	r25, Y+6	; 0x06
    42aa:	01 97       	sbiw	r24, 0x01	; 1
    42ac:	9e 83       	std	Y+6, r25	; 0x06
    42ae:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    42b0:	8d 81       	ldd	r24, Y+5	; 0x05
    42b2:	9e 81       	ldd	r25, Y+6	; 0x06
    42b4:	00 97       	sbiw	r24, 0x00	; 0
    42b6:	69 f7       	brne	.-38     	; 0x4292 <Home_ManualSys+0x22e>
    42b8:	14 c0       	rjmp	.+40     	; 0x42e2 <Home_ManualSys+0x27e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    42ba:	6f 81       	ldd	r22, Y+7	; 0x07
    42bc:	78 85       	ldd	r23, Y+8	; 0x08
    42be:	89 85       	ldd	r24, Y+9	; 0x09
    42c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    42c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    42c6:	dc 01       	movw	r26, r24
    42c8:	cb 01       	movw	r24, r22
    42ca:	9e 83       	std	Y+6, r25	; 0x06
    42cc:	8d 83       	std	Y+5, r24	; 0x05
    42ce:	8d 81       	ldd	r24, Y+5	; 0x05
    42d0:	9e 81       	ldd	r25, Y+6	; 0x06
    42d2:	9a 83       	std	Y+2, r25	; 0x02
    42d4:	89 83       	std	Y+1, r24	; 0x01
    42d6:	89 81       	ldd	r24, Y+1	; 0x01
    42d8:	9a 81       	ldd	r25, Y+2	; 0x02
    42da:	01 97       	sbiw	r24, 0x01	; 1
    42dc:	f1 f7       	brne	.-4      	; 0x42da <Home_ManualSys+0x276>
    42de:	9a 83       	std	Y+2, r25	; 0x02
    42e0:	89 83       	std	Y+1, r24	; 0x01
        _delay_ms(1000);
        break;
    }
}
    42e2:	6e 96       	adiw	r28, 0x1e	; 30
    42e4:	0f b6       	in	r0, 0x3f	; 63
    42e6:	f8 94       	cli
    42e8:	de bf       	out	0x3e, r29	; 62
    42ea:	0f be       	out	0x3f, r0	; 63
    42ec:	cd bf       	out	0x3d, r28	; 61
    42ee:	cf 91       	pop	r28
    42f0:	df 91       	pop	r29
    42f2:	08 95       	ret

000042f4 <Home_AutomaticSys>:

void Home_AutomaticSys()
{
    42f4:	df 93       	push	r29
    42f6:	cf 93       	push	r28
    42f8:	00 d0       	rcall	.+0      	; 0x42fa <Home_AutomaticSys+0x6>
    42fa:	0f 92       	push	r0
    42fc:	cd b7       	in	r28, 0x3d	; 61
    42fe:	de b7       	in	r29, 0x3e	; 62
	LCD_voidclearscrean();
    4300:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <LCD_voidclearscrean>
	LCD_voidsendstring("For return ");
    4304:	85 e4       	ldi	r24, 0x45	; 69
    4306:	91 e0       	ldi	r25, 0x01	; 1
    4308:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <LCD_voidsendstring>
	LCD_gotoxy(1, 0);
    430c:	81 e0       	ldi	r24, 0x01	; 1
    430e:	60 e0       	ldi	r22, 0x00	; 0
    4310:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <LCD_gotoxy>
	LCD_voidsendstring("   enter(1) ");
    4314:	81 e5       	ldi	r24, 0x51	; 81
    4316:	91 e0       	ldi	r25, 0x01	; 1
    4318:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <LCD_voidsendstring>
    431c:	2b c0       	rjmp	.+86     	; 0x4374 <Home_AutomaticSys+0x80>
	u8 local_u8checkInput;
	while(local_u8checkInput!=1)
	{
		u8 local_u8receve;
		UART_u8RecAsynch('\0', local_u8receve);
    431e:	8a 81       	ldd	r24, Y+2	; 0x02
    4320:	88 2f       	mov	r24, r24
    4322:	90 e0       	ldi	r25, 0x00	; 0
    4324:	9c 01       	movw	r18, r24
    4326:	80 e0       	ldi	r24, 0x00	; 0
    4328:	90 e0       	ldi	r25, 0x00	; 0
    432a:	b9 01       	movw	r22, r18
    432c:	0e 94 94 06 	call	0xd28	; 0xd28 <UART_u8RecAsynch>
		local_u8checkInput=local_u8receve;
    4330:	8a 81       	ldd	r24, Y+2	; 0x02
    4332:	8b 83       	std	Y+3, r24	; 0x03
		u8 temp=Automatic_Temp();
    4334:	0e 94 01 1f 	call	0x3e02	; 0x3e02 <Automatic_Temp>
    4338:	89 83       	std	Y+1, r24	; 0x01
		if(temp>40)
    433a:	89 81       	ldd	r24, Y+1	; 0x01
    433c:	89 32       	cpi	r24, 0x29	; 41
    433e:	d0 f0       	brcs	.+52     	; 0x4374 <Home_AutomaticSys+0x80>
		{
			LCD_gotoxy(1, 0);
    4340:	81 e0       	ldi	r24, 0x01	; 1
    4342:	60 e0       	ldi	r22, 0x00	; 0
    4344:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <LCD_gotoxy>
			LCD_voidsendstring("TEMP: ");
    4348:	84 ef       	ldi	r24, 0xF4	; 244
    434a:	90 e0       	ldi	r25, 0x00	; 0
    434c:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <LCD_voidsendstring>
			LCD_gotoxy(1, 8);
    4350:	81 e0       	ldi	r24, 0x01	; 1
    4352:	68 e0       	ldi	r22, 0x08	; 8
    4354:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <LCD_gotoxy>
			LCD_voidWriteNumber(temp);
    4358:	89 81       	ldd	r24, Y+1	; 0x01
    435a:	88 2f       	mov	r24, r24
    435c:	90 e0       	ldi	r25, 0x00	; 0
    435e:	a0 e0       	ldi	r26, 0x00	; 0
    4360:	b0 e0       	ldi	r27, 0x00	; 0
    4362:	bc 01       	movw	r22, r24
    4364:	cd 01       	movw	r24, r26
    4366:	0e 94 05 0e 	call	0x1c0a	; 0x1c0a <LCD_voidWriteNumber>
			DC_AutomaticMotor();
    436a:	0e 94 e4 1f 	call	0x3fc8	; 0x3fc8 <DC_AutomaticMotor>
			Buzzer(3);
    436e:	83 e0       	ldi	r24, 0x03	; 3
    4370:	0e 94 34 19 	call	0x3268	; 0x3268 <Buzzer>
	LCD_voidclearscrean();
	LCD_voidsendstring("For return ");
	LCD_gotoxy(1, 0);
	LCD_voidsendstring("   enter(1) ");
	u8 local_u8checkInput;
	while(local_u8checkInput!=1)
    4374:	8b 81       	ldd	r24, Y+3	; 0x03
    4376:	81 30       	cpi	r24, 0x01	; 1
    4378:	91 f6       	brne	.-92     	; 0x431e <Home_AutomaticSys+0x2a>
			Buzzer(3);
		}

	}

}
    437a:	0f 90       	pop	r0
    437c:	0f 90       	pop	r0
    437e:	0f 90       	pop	r0
    4380:	cf 91       	pop	r28
    4382:	df 91       	pop	r29
    4384:	08 95       	ret

00004386 <main>:
#include "LCD_driver/LCD_interface.h"



void main()
{
    4386:	df 93       	push	r29
    4388:	cf 93       	push	r28
    438a:	0f 92       	push	r0
    438c:	cd b7       	in	r28, 0x3d	; 61
    438e:	de b7       	in	r29, 0x3e	; 62
	/*initialize*/
    LCD_voidinit();
    4390:	0e 94 9e 09 	call	0x133c	; 0x133c <LCD_voidinit>
    UART_init();
    4394:	0e 94 a3 05 	call	0xb46	; 0xb46 <UART_init>
    Adc_voidInit();
    4398:	0e 94 4f 12 	call	0x249e	; 0x249e <Adc_voidInit>
	PWM_voidInitTimer1();
    439c:	0e 94 0b 08 	call	0x1016	; 0x1016 <PWM_voidInitTimer1>
	Setup_Pins();
    43a0:	0e 94 0d 19 	call	0x321a	; 0x321a <Setup_Pins>
	Timer_voidInitTimer0();
    43a4:	0e 94 44 07 	call	0xe88	; 0xe88 <Timer_voidInitTimer0>


	PWM_voidSetDutyCycle1(500);
    43a8:	84 ef       	ldi	r24, 0xF4	; 244
    43aa:	91 e0       	ldi	r25, 0x01	; 1
    43ac:	0e 94 57 08 	call	0x10ae	; 0x10ae <PWM_voidSetDutyCycle1>
    u8 check_login=1;   /*Check what return from login func if 1 or 0 */
    43b0:	81 e0       	ldi	r24, 0x01	; 1
    43b2:	89 83       	std	Y+1, r24	; 0x01
    check_login = loginFunc();
    43b4:	0e 94 4e 13 	call	0x269c	; 0x269c <loginFunc>
    43b8:	89 83       	std	Y+1, r24	; 0x01


    Timer_voidSetCtc0Isr(Home_AutomaticSys);
    43ba:	8a e7       	ldi	r24, 0x7A	; 122
    43bc:	91 e2       	ldi	r25, 0x21	; 33
    43be:	0e 94 80 07 	call	0xf00	; 0xf00 <Timer_voidSetCtc0Isr>
    while (1)
    {

    	Home_ManualSys();
    43c2:	0e 94 32 20 	call	0x4064	; 0x4064 <Home_ManualSys>
    43c6:	fd cf       	rjmp	.-6      	; 0x43c2 <main+0x3c>

000043c8 <__mulsi3>:
    43c8:	62 9f       	mul	r22, r18
    43ca:	d0 01       	movw	r26, r0
    43cc:	73 9f       	mul	r23, r19
    43ce:	f0 01       	movw	r30, r0
    43d0:	82 9f       	mul	r24, r18
    43d2:	e0 0d       	add	r30, r0
    43d4:	f1 1d       	adc	r31, r1
    43d6:	64 9f       	mul	r22, r20
    43d8:	e0 0d       	add	r30, r0
    43da:	f1 1d       	adc	r31, r1
    43dc:	92 9f       	mul	r25, r18
    43de:	f0 0d       	add	r31, r0
    43e0:	83 9f       	mul	r24, r19
    43e2:	f0 0d       	add	r31, r0
    43e4:	74 9f       	mul	r23, r20
    43e6:	f0 0d       	add	r31, r0
    43e8:	65 9f       	mul	r22, r21
    43ea:	f0 0d       	add	r31, r0
    43ec:	99 27       	eor	r25, r25
    43ee:	72 9f       	mul	r23, r18
    43f0:	b0 0d       	add	r27, r0
    43f2:	e1 1d       	adc	r30, r1
    43f4:	f9 1f       	adc	r31, r25
    43f6:	63 9f       	mul	r22, r19
    43f8:	b0 0d       	add	r27, r0
    43fa:	e1 1d       	adc	r30, r1
    43fc:	f9 1f       	adc	r31, r25
    43fe:	bd 01       	movw	r22, r26
    4400:	cf 01       	movw	r24, r30
    4402:	11 24       	eor	r1, r1
    4404:	08 95       	ret

00004406 <__udivmodhi4>:
    4406:	aa 1b       	sub	r26, r26
    4408:	bb 1b       	sub	r27, r27
    440a:	51 e1       	ldi	r21, 0x11	; 17
    440c:	07 c0       	rjmp	.+14     	; 0x441c <__udivmodhi4_ep>

0000440e <__udivmodhi4_loop>:
    440e:	aa 1f       	adc	r26, r26
    4410:	bb 1f       	adc	r27, r27
    4412:	a6 17       	cp	r26, r22
    4414:	b7 07       	cpc	r27, r23
    4416:	10 f0       	brcs	.+4      	; 0x441c <__udivmodhi4_ep>
    4418:	a6 1b       	sub	r26, r22
    441a:	b7 0b       	sbc	r27, r23

0000441c <__udivmodhi4_ep>:
    441c:	88 1f       	adc	r24, r24
    441e:	99 1f       	adc	r25, r25
    4420:	5a 95       	dec	r21
    4422:	a9 f7       	brne	.-22     	; 0x440e <__udivmodhi4_loop>
    4424:	80 95       	com	r24
    4426:	90 95       	com	r25
    4428:	bc 01       	movw	r22, r24
    442a:	cd 01       	movw	r24, r26
    442c:	08 95       	ret

0000442e <__divmodsi4>:
    442e:	97 fb       	bst	r25, 7
    4430:	09 2e       	mov	r0, r25
    4432:	05 26       	eor	r0, r21
    4434:	0e d0       	rcall	.+28     	; 0x4452 <__divmodsi4_neg1>
    4436:	57 fd       	sbrc	r21, 7
    4438:	04 d0       	rcall	.+8      	; 0x4442 <__divmodsi4_neg2>
    443a:	14 d0       	rcall	.+40     	; 0x4464 <__udivmodsi4>
    443c:	0a d0       	rcall	.+20     	; 0x4452 <__divmodsi4_neg1>
    443e:	00 1c       	adc	r0, r0
    4440:	38 f4       	brcc	.+14     	; 0x4450 <__divmodsi4_exit>

00004442 <__divmodsi4_neg2>:
    4442:	50 95       	com	r21
    4444:	40 95       	com	r20
    4446:	30 95       	com	r19
    4448:	21 95       	neg	r18
    444a:	3f 4f       	sbci	r19, 0xFF	; 255
    444c:	4f 4f       	sbci	r20, 0xFF	; 255
    444e:	5f 4f       	sbci	r21, 0xFF	; 255

00004450 <__divmodsi4_exit>:
    4450:	08 95       	ret

00004452 <__divmodsi4_neg1>:
    4452:	f6 f7       	brtc	.-4      	; 0x4450 <__divmodsi4_exit>
    4454:	90 95       	com	r25
    4456:	80 95       	com	r24
    4458:	70 95       	com	r23
    445a:	61 95       	neg	r22
    445c:	7f 4f       	sbci	r23, 0xFF	; 255
    445e:	8f 4f       	sbci	r24, 0xFF	; 255
    4460:	9f 4f       	sbci	r25, 0xFF	; 255
    4462:	08 95       	ret

00004464 <__udivmodsi4>:
    4464:	a1 e2       	ldi	r26, 0x21	; 33
    4466:	1a 2e       	mov	r1, r26
    4468:	aa 1b       	sub	r26, r26
    446a:	bb 1b       	sub	r27, r27
    446c:	fd 01       	movw	r30, r26
    446e:	0d c0       	rjmp	.+26     	; 0x448a <__udivmodsi4_ep>

00004470 <__udivmodsi4_loop>:
    4470:	aa 1f       	adc	r26, r26
    4472:	bb 1f       	adc	r27, r27
    4474:	ee 1f       	adc	r30, r30
    4476:	ff 1f       	adc	r31, r31
    4478:	a2 17       	cp	r26, r18
    447a:	b3 07       	cpc	r27, r19
    447c:	e4 07       	cpc	r30, r20
    447e:	f5 07       	cpc	r31, r21
    4480:	20 f0       	brcs	.+8      	; 0x448a <__udivmodsi4_ep>
    4482:	a2 1b       	sub	r26, r18
    4484:	b3 0b       	sbc	r27, r19
    4486:	e4 0b       	sbc	r30, r20
    4488:	f5 0b       	sbc	r31, r21

0000448a <__udivmodsi4_ep>:
    448a:	66 1f       	adc	r22, r22
    448c:	77 1f       	adc	r23, r23
    448e:	88 1f       	adc	r24, r24
    4490:	99 1f       	adc	r25, r25
    4492:	1a 94       	dec	r1
    4494:	69 f7       	brne	.-38     	; 0x4470 <__udivmodsi4_loop>
    4496:	60 95       	com	r22
    4498:	70 95       	com	r23
    449a:	80 95       	com	r24
    449c:	90 95       	com	r25
    449e:	9b 01       	movw	r18, r22
    44a0:	ac 01       	movw	r20, r24
    44a2:	bd 01       	movw	r22, r26
    44a4:	cf 01       	movw	r24, r30
    44a6:	08 95       	ret

000044a8 <__prologue_saves__>:
    44a8:	2f 92       	push	r2
    44aa:	3f 92       	push	r3
    44ac:	4f 92       	push	r4
    44ae:	5f 92       	push	r5
    44b0:	6f 92       	push	r6
    44b2:	7f 92       	push	r7
    44b4:	8f 92       	push	r8
    44b6:	9f 92       	push	r9
    44b8:	af 92       	push	r10
    44ba:	bf 92       	push	r11
    44bc:	cf 92       	push	r12
    44be:	df 92       	push	r13
    44c0:	ef 92       	push	r14
    44c2:	ff 92       	push	r15
    44c4:	0f 93       	push	r16
    44c6:	1f 93       	push	r17
    44c8:	cf 93       	push	r28
    44ca:	df 93       	push	r29
    44cc:	cd b7       	in	r28, 0x3d	; 61
    44ce:	de b7       	in	r29, 0x3e	; 62
    44d0:	ca 1b       	sub	r28, r26
    44d2:	db 0b       	sbc	r29, r27
    44d4:	0f b6       	in	r0, 0x3f	; 63
    44d6:	f8 94       	cli
    44d8:	de bf       	out	0x3e, r29	; 62
    44da:	0f be       	out	0x3f, r0	; 63
    44dc:	cd bf       	out	0x3d, r28	; 61
    44de:	09 94       	ijmp

000044e0 <__epilogue_restores__>:
    44e0:	2a 88       	ldd	r2, Y+18	; 0x12
    44e2:	39 88       	ldd	r3, Y+17	; 0x11
    44e4:	48 88       	ldd	r4, Y+16	; 0x10
    44e6:	5f 84       	ldd	r5, Y+15	; 0x0f
    44e8:	6e 84       	ldd	r6, Y+14	; 0x0e
    44ea:	7d 84       	ldd	r7, Y+13	; 0x0d
    44ec:	8c 84       	ldd	r8, Y+12	; 0x0c
    44ee:	9b 84       	ldd	r9, Y+11	; 0x0b
    44f0:	aa 84       	ldd	r10, Y+10	; 0x0a
    44f2:	b9 84       	ldd	r11, Y+9	; 0x09
    44f4:	c8 84       	ldd	r12, Y+8	; 0x08
    44f6:	df 80       	ldd	r13, Y+7	; 0x07
    44f8:	ee 80       	ldd	r14, Y+6	; 0x06
    44fa:	fd 80       	ldd	r15, Y+5	; 0x05
    44fc:	0c 81       	ldd	r16, Y+4	; 0x04
    44fe:	1b 81       	ldd	r17, Y+3	; 0x03
    4500:	aa 81       	ldd	r26, Y+2	; 0x02
    4502:	b9 81       	ldd	r27, Y+1	; 0x01
    4504:	ce 0f       	add	r28, r30
    4506:	d1 1d       	adc	r29, r1
    4508:	0f b6       	in	r0, 0x3f	; 63
    450a:	f8 94       	cli
    450c:	de bf       	out	0x3e, r29	; 62
    450e:	0f be       	out	0x3f, r0	; 63
    4510:	cd bf       	out	0x3d, r28	; 61
    4512:	ed 01       	movw	r28, r26
    4514:	08 95       	ret

00004516 <strcmp>:
    4516:	fb 01       	movw	r30, r22
    4518:	dc 01       	movw	r26, r24
    451a:	8d 91       	ld	r24, X+
    451c:	01 90       	ld	r0, Z+
    451e:	80 19       	sub	r24, r0
    4520:	01 10       	cpse	r0, r1
    4522:	d9 f3       	breq	.-10     	; 0x451a <strcmp+0x4>
    4524:	99 0b       	sbc	r25, r25
    4526:	08 95       	ret

00004528 <_exit>:
    4528:	f8 94       	cli

0000452a <__stop_program>:
    452a:	ff cf       	rjmp	.-2      	; 0x452a <__stop_program>
